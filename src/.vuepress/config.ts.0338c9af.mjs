// src/.vuepress/config.ts
import { defineUserConfig } from "vuepress";
import { searchProPlugin } from "vuepress-plugin-search-pro";

// src/.vuepress/theme.ts
import { hopeTheme } from "vuepress-theme-hope";

// src/.vuepress/navbar.ts
import { navbar } from "vuepress-theme-hope";
var navbar_default = navbar([
  {
    text: "\u9996\u9875",
    link: "/"
  },
  {
    text: "\u5173\u4E8E",
    link: "/\u4E2A\u4EBA\u7B80\u4ECB"
  },
  {
    text: "\u6536\u85CF",
    link: "/star"
  },
  {
    text: "\u77E5\u8BC6\u5927\u7EB2",
    link: "/\u6821\u62DB/\u77E5\u8BC6\u5927\u7EB2"
  },
  {
    text: "\u5FC5\u8BFB\u6587\u7AE0",
    link: "/\u8F6F\u6280\u80FD/\u7CBE\u9009\u6587\u7AE0\u5217\u8868"
  },
  {
    text: "\u53CB\u94FE",
    children: [
      {
        text: "\u8F89\u5149\u4E16\u754C\u5B98\u7F51",
        link: "https://lwmc.net"
      },
      {
        text: "DiF1202 \u535A\u5BA2",
        link: "http://182.61.38.183:3000/home"
      }
    ]
  }
]);

// src/.vuepress/sidebar.ts
import { sidebar as sidebar5 } from "vuepress-theme-hope";

// src/.vuepress/sidebars/node.ts
import { sidebar } from "vuepress-theme-hope";
var node_default = sidebar({
  "/Node/": "structure"
});

// src/.vuepress/sidebars/vue.ts
import { sidebar as sidebar2 } from "vuepress-theme-hope";
var vue_default = sidebar2({
  "/Vue/": [
    {
      text: "Vue\u6E90\u7801\u89E3\u6790",
      prefix: "code",
      children: "structure"
    },
    {
      text: "Vue\u57FA\u7840\u77E5\u8BC6\u4F53\u7CFB",
      prefix: "",
      children: "structure"
    }
  ]
});

// src/.vuepress/sidebars/react.ts
import { sidebar as sidebar3 } from "vuepress-theme-hope";
var react_default = sidebar3({
  "/React/": "structure"
});

// src/.vuepress/sidebars/webpack.ts
import { sidebar as sidebar4 } from "vuepress-theme-hope";
var webpack_default = sidebar4({
  "/Webpack/": [
    {
      text: "Webpack\u57FA\u7840",
      prefix: "",
      children: "structure"
    },
    {
      text: "Webpack\u9762\u8BD5",
      prefix: "interview",
      children: "structure"
    }
  ]
});

// src/.vuepress/sidebars/index.ts
var sidebars_default = {
  ...node_default,
  ...vue_default,
  ...react_default,
  ...webpack_default
};

// src/.vuepress/sidebar.ts
var sidebar_default = sidebar5({
  ...sidebars_default,
  "/\u8BA1\u7B97\u673A\u7F51\u7EDC/": "structure",
  "/\u6D4F\u89C8\u5668\u5DE5\u4F5C\u539F\u7406/": "structure",
  "/leetcode/": "structure",
  "/\u9762\u8BD5\u901A\u7528/": "structure",
  "/JavaScript/": [
    {
      text: "JavaScript\u77E5\u8BC6\u4F53\u7CFB",
      prefix: "",
      children: "structure"
    }
  ],
  "/\u725B\u5BA2/": "structure",
  "/CSS/": [
    {
      text: "CSS\u9762\u8BD5\u9898",
      prefix: "interview",
      children: "structure"
    },
    {
      text: "CSS\u77E5\u8BC6\u4F53\u7CFB",
      prefix: "",
      children: "structure"
    }
  ],
  "/HTML/": "structure",
  "/TypeScript/": "structure"
});

// src/.vuepress/theme.ts
var theme_default = hopeTheme({
  outlookLocales: void 0,
  hostname: "https://yihuiBlog.top",
  author: {
    name: "Yihui",
    url: "https://yihuiBlog.top"
  },
  headerDepth: 4,
  iconPrefix: "iconfont icon-",
  logo: "https://cdn.yihuiblog.top/images/logo-for-blog.jpg",
  repo: "https://github.com/MoMeak9/MyBlogDoc",
  docsDir: "/src",
  navbar: navbar_default,
  sidebar: sidebar_default,
  footer: `<a href="https://beian.miit.gov.cn/" target='_blank'>\u95FDICP\u590719026932\u53F7-1</a>`,
  copyright: `Licensed under <a href="https://creativecommons.org/licenses/by/4.0/" target='_blank'>CC-BY 4.0</a>`,
  displayFooter: true,
  pageInfo: ["Author", "Original", "Date", "Category", "Tag", "ReadingTime"],
  blog: {
    description: "\u6CEF\u6CF7 - \u524D\u7AEF\u5F00\u53D1\u7231\u597D\u8005",
    intro: "/intro.html",
    medias: {
      Email: "mailto:shi_yihui@qq.com",
      GitHub: "https://github.com/MoMeak9",
      BiliBili: "https://space.bilibili.com/298768693"
    }
  },
  plugins: {
    blog: {
      autoExcerpt: true
    },
    comment: {
      provider: "Giscus",
      repo: "MoMeak9/giscus_discuess",
      repoId: "R_kgDOHAxnrQ",
      category: "General",
      categoryId: "DIC_kwDOHAxnrc4COIL7"
    },
    mdEnhance: {
      presentation: {
        plugins: ["highlight", "math", "search", "notes", "zoom"]
      }
    },
    copyright: {
      hostname: "https://yihuiblog.top",
      author: "YihuiBlog",
      license: "CC-BY 4.0",
      global: true,
      triggerWords: 20
    },
    copyCode: {}
  },
  fullscreen: false,
  themeColor: false,
  darkmode: "switch",
  titleIcon: true
});

// src/.vuepress/config.ts
var config_default = defineUserConfig({
  theme: theme_default,
  base: "/",
  dest: "./dist",
  head: [
    [
      "script",
      {},
      `
            var _hmt = _hmt || [];
            (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?43cbf856b430fee41af63fc72731d1d6";
            var s = document.getElementsByTagName("script")[0]; 
            s.parentNode.insertBefore(hm, s);
            })();`
    ],
    [
      "meta",
      { name: "google-site-verification", content: "9vkxYqOlDYYQz21WsvuXk9ztRIK5L0_MuzL1WvFmBuY" }
    ]
  ],
  locales: {
    "/": {
      lang: "zh-CN",
      title: "Yihui's Blog",
      description: "\u524D\u7AEF\u5C0F\u767D\u7684\u6280\u672F\u535A\u5BA2"
    }
  },
  plugins: [
    searchProPlugin({
      indexContent: true,
      locales: {
        "/": {
          placeholder: "\u641C\u7D22"
        }
      },
      customFields: [
        {
          name: "category",
          getter: (page) => page.frontmatter.category,
          formatter: {
            "/": "\u5206\u7C7B: $content"
          }
        },
        {
          name: "tag",
          getter: (page) => page.frontmatter.tag,
          formatter: {
            "/": "\u6807\u7B7E: $content"
          }
        }
      ],
      hotKeys: [{
        key: "h",
        ctrl: true
      }]
    })
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
