import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as d,a,b as e,d as c,e as s,r as o}from"./app.d7b34baa.js";const r={},l=s(`<h1 id="git-常用语句与命令行" tabindex="-1"><a class="header-anchor" href="#git-常用语句与命令行" aria-hidden="true">#</a> Git 常用语句与命令行</h1><h2 id="git-是什么" tabindex="-1"><a class="header-anchor" href="#git-是什么" aria-hidden="true">#</a> Git 是什么</h2><p>git，是一个分布式版本控制软件，最初目的是为更好地管理<code>Linux</code>内核开发而设计</p><p>分布式版本控制系统的客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复</p><img src="https://cdn.yihuiblog.top/images/202209241850846.png" alt="img" style="zoom:50%;"><p>项目开始，只有一个原始版仓库，别的机器可以<code>clone</code>这个原始版本库，那么所有<code>clone</code>的机器，它们的版本库其实都是一样的，并没有主次之分</p><p>所以在实现团队协作的时候，只要有一台电脑充当服务器的角色，其他每个人都从这个“服务器”仓库<code>clone</code>一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交</p><p><code>github</code>实际就可以充当这个服务器角色，其是一个开源协作社区，提供<code>Git</code>仓库托管服务，既可以让别人参与你的开源项目，也可以参与别人的开源项目</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h3><p>当我们通过<code>git init</code>创建或者<code>git clone</code>一个项目的时候，项目目录会隐藏一个<code>.git</code>子目录，其作用是用来跟踪管理版本库的</p><p><code>Git</code> 中所有数据在存储前都计算校验和，然后以校验和来引用，所以在我们修改或者删除文件的时候，<code>git</code>能够知道</p><p><code>Git</code>用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）， 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来，如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>24b9da6552252987aa493b52f8696cd6d3b00373
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们修改文件的时候，<code>git</code>就会修改文件的状态，可以通过<code>git status</code>进行查询，状态情况如下：</p><ul><li>已修改（modified）：表示修改了文件，但还没保存到数据库中。</li><li>已暂存（staged）：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li>已提交（committed）：表示数据已经安全的保存在本地数据库中。</li></ul><p>文件状态对应的，不同状态的文件在<code>Git</code>中处于不同的工作区域，主要分成了四部分：</p><ul><li>工作区：相当于本地写代码的区域，如 git clone 一个项目到本地，相当于本地克隆了远程仓库项目的一个副本</li><li>暂存区：暂存区是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中</li><li>本地仓库：提交更新，找到暂存区域的文件，将快照永久性存储到 Git 本地仓库</li><li>远程仓库：远程的仓库，如 github</li></ul><img src="https://cdn.yihuiblog.top/images/202209241852441.png" alt="img" style="zoom:50%;"><h2 id="head、工作树和索引" tabindex="-1"><a class="header-anchor" href="#head、工作树和索引" aria-hidden="true">#</a> HEAD、工作树和索引</h2><p>在<code>git</code>中，可以存在很多分支，其本质上是一个指向<code>commit</code>对象的可变指针，而<code>Head</code>是一个特别的指针，是一个指向你正在工作中的本地分支的指针</p><p>简单来讲，就是你现在在哪儿，HEAD 就指向哪儿</p><p>例如当前我们处于<code>master</code>分支，所以<code>HEAD</code>这个指针指向了<code>master</code>分支指针</p><p><img src="https://cdn.yihuiblog.top/images/202209241859254.png" alt="img"></p><p>然后通过调用<code>git checkout test</code>切换到<code>test</code>分支，那么<code>HEAD</code>则指向<code>test</code>分支，如下图：</p><p><img src="https://cdn.yihuiblog.top/images/202209241859274.png" alt="img"></p><p>但我们在<code>test</code>分支再一次<code>commit</code>信息的时候，<code>HEAD</code>指针仍然指向了<code>test</code>分支指针，而<code>test</code>分支指针已经指向了最新创建的提交，如下图：</p><p><img src="https://cdn.yihuiblog.top/images/202209241859561.png" alt="img"></p><p>这个<code>HEAD</code>存储的位置就在<code>.git/HEAD</code>目录中，查看信息可以看到<code>HEAD</code>指向了另一个文件</p><p><strong>工作树和索引</strong></p><p>在<code>Git</code>管理下，大家实际操作的目录被称为工作树，也就是工作区域。在数据库和工作树之间有索引，索引是为了向数据库提交作准备的区域，也被称为暂存区域</p><p><code>Git</code>在执行提交的时候，不是直接将工作树的状态保存到数据库，<strong>而是将设置在中间索引区域的状态保存到数据库</strong>。</p><p>因此，要提交文件，首先需要把文件加入到索引区域中。</p><p>所以，凭借中间的索引，可以避免工作树中不必要的文件提交，还可以将文件修改内容的一部分加入索引区域并提交。</p><h2 id="常用语句" tabindex="-1"><a class="header-anchor" href="#常用语句" aria-hidden="true">#</a> 常用语句</h2><h3 id="新建-初始化-项目" tabindex="-1"><a class="header-anchor" href="#新建-初始化-项目" aria-hidden="true">#</a> 新建（初始化）项目</h3><p>初始化当前项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建一个目录，将其初始化为Git代码库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 directory，只包含 .git 子目录的空目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init <span class="token parameter variable">--bare</span> <span class="token operator">&lt;</span>directory<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载一个项目和它的整个代码历史</p><p>这个命令就是将一个版本库拷贝到另一个目录中，同时也将分支都拷贝到新的版本库中。这样就可以在新的版本库中提交到远程分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改配置项" tabindex="-1"><a class="header-anchor" href="#修改配置项" aria-hidden="true">#</a> 修改配置项</h3><p>显示当前的Git配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编辑Git配置文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git config -e [--global]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出、设置基本的全局变量（用户名、邮箱）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name

<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;MyEmail@gmail.com&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;My Name&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取信息" tabindex="-1"><a class="header-anchor" href="#获取信息" aria-hidden="true">#</a> 获取信息</h3><p>显示commit历史，以及每次commit发生变更的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--stat</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>搜索提交历史，根据关键词</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="状态信息" tabindex="-1"><a class="header-anchor" href="#状态信息" aria-hidden="true">#</a> 状态信息</h3><p>显示分支，未跟踪文件，更改和其他不同</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="log、提交信息等" tabindex="-1"><a class="header-anchor" href="#log、提交信息等" aria-hidden="true">#</a> log、提交信息等</h3><p>显示commit历史，以及每次commit发生变更的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--stat</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>搜索提交历史，根据关键词</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示某个commit之后的所有变动，每个commit占据一行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:%s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示某个文件的版本历史，包括文件改名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--follow</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
<span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显示指定文件相关的每一次diff</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示过去5次提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>it log <span class="token parameter variable">-5</span> <span class="token parameter variable">--pretty</span> <span class="token parameter variable">--oneline</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="分支操作" tabindex="-1"><a class="header-anchor" href="#分支操作" aria-hidden="true">#</a> 分支操作</h4><p>创建新的分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> br <span class="token operator">&lt;</span>new_branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看远程分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> br <span class="token parameter variable">-r</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看已经被合并到当前分支的分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> br <span class="token parameter variable">--merged</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看尚未被合并到当前分支的分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> br --no-merged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="merge-和-reabse-的区别" tabindex="-1"><a class="header-anchor" href="#merge-和-reabse-的区别" aria-hidden="true">#</a> merge 和 reabse 的区别</h3><p><code>git rebase</code> 与 <code>git merge</code>都有相同的作用，都是将一个分支的提交合并到另一分支上，但是在原理上却不相同</p><h4 id="git-merge" tabindex="-1"><a class="header-anchor" href="#git-merge" aria-hidden="true">#</a> git merge</h4><p>通过<code>git merge</code>将当前分支与<code>xxx</code>分支合并，产生的新的<code>commit</code>对象有两个父节点</p><p>如果“指定分支”本身是当前分支的一个直接子节点，则会产生快照合并</p><p>举个例子，<code>bugfix</code>分支是从<code>master</code>分支分叉出来的，如下所示：</p><p><img src="https://cdn.yihuiblog.top/images/202209242139943.png" alt="img"></p><p>合并<code>bugfix</code>分支到<code>master</code>分支时，如果<code>master</code>分支的状态没有被更改过，即 <code>bugfix</code>分支的历史记录包含<code>master</code>分支所有的历史记录</p><p>所以通过把<code>master</code>分支的位置移动到<code>bugfix</code>的最新分支上，就完成合并</p><p>如果<code>master</code>分支的历史记录在创建<code>bugfix</code>分支后又有新的提交，如下情况：</p><p><img src="https://cdn.yihuiblog.top/images/202209242139946.png" alt="img"></p><p>这时候使用<code>git merge</code>的时候，会生成一个新的提交，并且<code>master</code>分支的<code>HEAD</code>会移动到新的分支上，如下：</p><p><img src="https://cdn.yihuiblog.top/images/202209242139934.png" alt="img"></p><p>从上面可以看到，会把两个分支的最新快照以及二者最近的共同祖先进行三方合并，合并的结果是生成一个新的快照</p><h3 id="git-rebase" tabindex="-1"><a class="header-anchor" href="#git-rebase" aria-hidden="true">#</a> git rebase</h3><p>同样，<code>master</code>分支的历史记录在创建<code>bugfix</code>分支后又有新的提交，如下情况：</p><p><img src="https://cdn.yihuiblog.top/images/202209242141919.png" alt="img"></p><p>通过<code>git rebase</code>，会变成如下情况：</p><p><img src="https://cdn.yihuiblog.top/images/202209242141910.png" alt="img"></p><p>在移交过程中，如果发生冲突，需要修改各自的冲突，如下：</p><p><img src="https://cdn.yihuiblog.top/images/202209242141941.png" alt="img"></p><p><code>rebase</code>之后，<code>master</code>的<code>HEAD</code>位置不变。因此，要合并<code>master</code>分支和<code>bugfix</code>分支</p><p><img src="https://cdn.yihuiblog.top/images/202209242141932.png" alt="img"></p><p>从上面可以看到，<code>rebase</code>会找到不同的分支的最近共同祖先，如上图的<code>B</code>，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件（老的提交<code>X</code>和<code>Y</code>也没有被销毁，只是简单地不能再被访问或者使用），然后将当前分支指向目标最新位置<code>D</code>, 然后将之前另存为临时文件的修改依序应用。</p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><ul><li><p>git merge 会让2个分支的提交按照提交时间进行排序，并且会<strong>把最新的2个commit合并成一个commit</strong>，使得最后的分支树呈现非线性的结构</p></li><li><p>git reabse 将当前的提交复制到master的最新提交之后，最终形成一个<strong>线性的分支树</strong></p></li></ul><blockquote><p><strong>社区评价：</strong></p><p>这个看公司需求，因为有些时候，注重提交日志的话，那我们应该选择merge，这样每一次的提交都清清楚楚记录着，如果说，我们不太注重日志的记录，那rebase是可以的，但是rebase有一个小小的缺点，就是基点变了，提交的多了，就不知道怎么是从哪个分支拉取的代码了</p><p>rebase 空间消耗小，merge责任清晰。收验pr用merge更好。自己上传前校验和处理与仓库的冲突，rebase更好。</p></blockquote><h3 id="常用可视化工具" tabindex="-1"><a class="header-anchor" href="#常用可视化工具" aria-hidden="true">#</a> 常用可视化工具</h3>`,110),p={href:"https://tortoisegit.org/",target:"_blank",rel:"noopener noreferrer"},g=s('<h3 id="git中-fork-clone-branch这三个概念-有什么区别" tabindex="-1"><a class="header-anchor" href="#git中-fork-clone-branch这三个概念-有什么区别" aria-hidden="true">#</a> Git中 fork, clone,branch这三个概念，有什么区别?</h3><p>fork 只能对代码仓进行操作，且 fork 不属于 git 的命令，通常用于代码仓托管平台的一种“操作” clone 是 git 的一种命令，它的作用是将文件从远程代码仓下载到本地，从而形成一个本地代码仓 branch 特征与 fork 很类似，fork 得到的是一个新的、自己的代码仓，而 branch 得到的是一个代码仓的一个新分支</p><h3 id="说说你对git-stash-的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对git-stash-的理解-应用场景" aria-hidden="true">#</a> 说说你对git stash 的理解？应用场景？</h3><p>stash，译为存放，在 git 中，可以理解为保存当前工作进度，会把暂存区和工作区的改动进行保存，这些修改会保存在一个栈上</p><p>后续你可以在任何时候任何分支重新将某次的修改推出来，重新应用这些更改的代码</p><p><strong>默认情况下，<code>git stash</code>会缓存下列状态的文件：</strong></p><ul><li>添加到暂存区的修改（staged changes）</li><li>Git跟踪的但并未添加到暂存区的修改（unstaged changes）</li></ul><p>但以下状态的文件不会缓存：</p><ul><li>在工作目录中新的文件（untracked files）</li><li>被忽略的文件（ignored files）</li></ul><p>如果想要上述的文件都被缓存，可以使用<code>-u</code>或者<code>--include-untracked</code>可以工作目录新的文件，使用<code>-a</code>或者<code>--all</code>命令可以当前目录下的所有修改</p><p><strong>常见命令：</strong></p><ul><li>git stash</li><li>git stash save</li><li>git stash list</li><li>git stash pop</li><li>git stash apply</li><li>git stash show</li><li>git stash drop</li><li>git stash clear</li></ul><p><strong>应用场景：</strong></p><p>当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态， 而这时你想要切换到另一个分支或者拉下远端的代码去做一点别的事情</p><p>但是你创建一次未完成的代码的<code>commit</code>提交，这时候就可以使用<code>git stash</code></p><p>例如以下场景：</p><p>当你的开发进行到一半,但是代码还不想进行提交 ,然后需要同步去关联远端代码时.如果你本地的代码和远端代码没有冲突时,可以直接通过<code>git pull</code>解决</p><p>但是如果可能发生冲突怎么办.直接<code>git pull</code>会拒绝覆盖当前的修改，这时候就可以依次使用下述的命令：</p><ul><li>git stash</li><li>git pull</li><li>git stash pop</li></ul><p>或者当你开发到一半，现在要修改别的分支问题的时候，你也可以使用<code>git stash</code>缓存当前区域的代码</p><ul><li>git stash：保存开发到一半的代码</li><li>git commit -m &#39;修改问题&#39;</li><li>git stash pop：将代码追加到最新的提交之后</li></ul><h3 id="说说你对git-reset-和-git-revert-的理解-区别" tabindex="-1"><a class="header-anchor" href="#说说你对git-reset-和-git-revert-的理解-区别" aria-hidden="true">#</a> 说说你对git reset 和 git revert 的理解？区别？</h3><h4 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset" aria-hidden="true">#</a> git reset</h4><p><code>reset</code>用于回退版本，可以遗弃不再使用的提交</p><p>执行遗弃时，需要根据影响的范围而指定不同的参数，可以指定是否复原索引或工作树内容</p><p><img src="https://cdn.yihuiblog.top/images/202209242146317.png" alt="img"></p><h4 id="git-revert" tabindex="-1"><a class="header-anchor" href="#git-revert" aria-hidden="true">#</a> git revert</h4><p>在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化，不会改变过去的历史，主要是用于安全地取消过去发布的提交</p><p><img src="https://cdn.yihuiblog.top/images/202209242146262.png" alt="img"></p>',29);function h(u,m){const i=o("ExternalLinkIcon");return t(),d("div",null,[l,a("p",null,[e("Webstorm、vscode 内置git可视化工具，"),a("a",p,[e("TortoiseGit"),c(i)]),e(" 小乌龟")]),g])}const f=n(r,[["render",h],["__file","Git 常用语句与命令行.html.vue"]]);export{f as default};
