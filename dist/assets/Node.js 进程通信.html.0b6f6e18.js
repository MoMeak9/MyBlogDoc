const e=JSON.parse(`{"key":"v-02affdf3","path":"/Node/Node.js%20%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1.html","title":"Node.js 进程通信","lang":"zh-CN","frontmatter":{"date":"2022-04-06T00:00:00.000Z","icon":"page","description":"由面试题引出的 黄金时代：事件驱动 为了解决高并发问题，基于事件驱动的服务模型出现了，像Node与Nginx均是基于事件驱动 的方式实现的，采用单线程避免了不必要的内存开销和上下文切换开销。 多进程架构 面对单进程单线程对多核使用不足的问题，前人的经验是启动多进程即可。理想状态下每个 进程各自利用一个CPU，以此实现多核CPU的利用。所幸，Node提供...","head":[["meta",{"property":"og:url","content":"https://yihuiBlog.top/Node/Node.js%20%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1.html"}],["meta",{"property":"og:site_name","content":"Yihui's Blog"}],["meta",{"property":"og:title","content":"Node.js 进程通信"}],["meta",{"property":"og:description","content":"由面试题引出的 黄金时代：事件驱动 为了解决高并发问题，基于事件驱动的服务模型出现了，像Node与Nginx均是基于事件驱动 的方式实现的，采用单线程避免了不必要的内存开销和上下文切换开销。 多进程架构 面对单进程单线程对多核使用不足的问题，前人的经验是启动多进程即可。理想状态下每个 进程各自利用一个CPU，以此实现多核CPU的利用。所幸，Node提供..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-11-25T08:26:33.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-04-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-25T08:26:33.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"多进程架构","slug":"多进程架构","link":"#多进程架构","children":[{"level":3,"title":"创建子进程","slug":"创建子进程","link":"#创建子进程","children":[]},{"level":3,"title":"进程间通信","slug":"进程间通信","link":"#进程间通信","children":[]}]}],"git":{"createdTime":1669364793000,"updatedTime":1669364793000,"contributors":[{"name":"MoMeak9","email":"1308994506@qq.com","commits":1}]},"readingTime":{"minutes":4.61,"words":1383},"copyright":"著作权归YihuiBlog所有\\n基于CC-BY 4.0协议\\n原文链接：https://yihuiblog.top/Node/Node.js%20%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1.html","filePathRelative":"Node/Node.js 进程通信.md","localizedDate":"2022年4月6日"}`);export{e as data};
