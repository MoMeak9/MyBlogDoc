import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as l,a as e,b as n,d as a,e as i,r as c}from"./app.d7b34baa.js";const d={},r=e("blockquote",null,[e("p",null,"参照： https://juejin.cn/post/6844903870678695943")],-1),p=e("p",null,[n("在我们写完一个应用程序后，需要发布到npm上，大多数人可能仅仅使用"),e("code",null,"npm publish"),n("就完成了，在这里我讲一下如何更好的发布包。")],-1),u=e("h3",{id:"_1-registry",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-registry","aria-hidden":"true"},"#"),n(" 1. registry")],-1),m=e("code",null,"taobao",-1),v=e("code",null,"npm",-1),g={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2F",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"Npm",-1),b=e("code",null,"package.json",-1),k=i(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;publishConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;registry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://registry.npm.xxx.com/&quot;</span>
 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以设置别名</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">alias</span> ynpm<span class="token operator">=</span><span class="token string">&quot;npm --registry=http://registry.npm.xxx.com&quot;</span>
<span class="token comment">// 发布的时候</span>
ynpm publish

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-权限相关" tabindex="-1"><a class="header-anchor" href="#_2-权限相关" aria-hidden="true">#</a> 2. 权限相关</h3><p>发布包需要验证你的账号权限，第一次执行<code>npm adduser</code>,后面就只需要<code>npm login</code>了。有时候我们遇到说你用户名密码错误，但实际并没错，可能是因为你的<code>registry</code>设置成了淘宝镜像的url，npm配置可以前往<code>~/.npmrc</code>查看，可以通过<code>npm config delete registry</code>删除掉。如果你需要一个人帮你一起发包，可以使用<code>npm owner add &lt;user&gt; [&lt;@scope&gt;/]&lt;pkg&gt;</code>去添加一个用户，不过最好还是把发布权限收紧，其他人提MR，包的<code>owner</code>进行<code>code review</code>，然后发包。</p><h3 id="_3-发布哪些文件" tabindex="-1"><a class="header-anchor" href="#_3-发布哪些文件" aria-hidden="true">#</a> 3. 发布哪些文件？</h3><p>发布一个包，考虑到别人的下载速度，包体积肯定需要尽量小，所以源文件最好不包括，那如何控制只发哪些文件呢？</p><p>第一种方式是在 <code>package.json</code> 里 <code>files</code> 字段来控制，<code>files</code> 字段的值是一个数组，你可以写具体文件名，也可以写目录，还支持 <code>glob</code> 模式。</p><p>第二种就是使用 <code>.npmignore</code> 配置文件，他类似于 <code>.gitignore</code> 文件，其实如果没有 <code>.npmignore</code>，会使用<code>.gitignore</code>来取代他的功能。在包的根目录下，<code>.npmignore</code>不会覆盖 <code>files</code> 字段，但在子目录中会覆盖。</p><p>有些文件不能无法通过配置排除或者包含：</p><ul><li>package.json</li><li>README</li><li>CHANGES / CHANGELOG / HISTORY</li><li>LICENSE / LICENCE</li><li>NOTICE</li><li>main字段中的文件</li></ul><p>以上文件无法忽略。</p><ul><li>.git</li><li>CVS</li><li>.svn</li><li>.DS_Store</li><li>._*</li><li>等等</li></ul><p>以上文件无法发布到 <code>npm</code>。</p><h3 id="_4-版本管理" tabindex="-1"><a class="header-anchor" href="#_4-版本管理" aria-hidden="true">#</a> 4. 版本管理</h3><p>npm的发包需要遵循语义化版本，一个版本号包含三个部分：<code>MAJOR.MINOR.PATCH</code>，</p><ul><li>MAJOR 表示主版本号，当你做了不兼容的API修改；</li><li>MINOR 表示次版本号，当你做了向下兼容的功能性新增；</li><li>PATCH 表示修订号,当你做了向下兼容的问题修正;</li></ul><p>我们可以使用<code>npm version</code> 命令来自动修改版本号，比如：</p><div class="language-arduino line-numbers-mode" data-ext="arduino"><pre class="language-arduino"><code><span class="token comment">// version = v1.0.0</span>
npm version patch
<span class="token comment">// v1.0.1</span>
npm version prepatch
<span class="token comment">// v1.0.2-0</span>
npm version minor
<span class="token comment">// v1.1.0</span>
npm version major
<span class="token comment">// v2.0.0</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说还有先行版本，测试版本等，他们这样命名</p><ul><li>3.1.0-beta.0</li><li>3.1.0-alpha.0</li></ul><p>如果我们发布先行版本，<code>npm version prepatch</code> 命令得出的版本号好像就不够规范了，我们只能使用 <code>npm version 1.0.0-alpha.1</code> 指定版本号，不过还好，在 <code>npm 6.4.0</code> 之后，我们可以使用 <code>--preid</code> 参数：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">npm version prerelease --preid</span><span class="token punctuation">=</span><span class="token value attr-value">alpha</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-changelog" tabindex="-1"><a class="header-anchor" href="#_5-changelog" aria-hidden="true">#</a> 5. Changelog</h3>`,24),_=e("code",null,"Changelog",-1),f={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fconventional-changelog%2Fstandard-version",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"CHANGELOG",-1),y=i(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>standard-version --prerelease alpha
✔ bumping version in package.json from 3.0.2-0 to 3.0.2-alpha.0
✔ created CHANGELOG.md
✔ outputting changes to CHANGELOG.md
✔ committing package.json and CHANGELOG.md
✔ tagging release v3.0.2-alpha.0
ℹ Run \`git push --follow-tags origin master &amp;&amp; npm publish --tag alpha\` to publish
// 再看下生成的Changelog

### Bug Fixes

* 添加功能1 75e2808

### [3.0.2-alpha.0]<span class="token punctuation">(</span>///compare/v3.0.2-0...v3.0.2-alpha.0<span class="token punctuation">)</span> <span class="token punctuation">(</span>2019-06-18<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个工具我们都不需要使用<code>npm version prepatch</code>了。<code>standard-version</code>会根据你的<code>git commit</code>信息，自动生成日志，比如新增啥啥功能，修复啥啥啥bug。自动生成的同时，也就意味着你<code>git commit</code>需要遵循一定格式，比如：</p><ul><li>feat: A new feature</li><li>fix: A bug fix</li><li>docs: Documentation only changes</li><li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-co lons, etc)</li><li>refactor: A code change that neither fixes a bug nor adds a feature</li><li>perf: A code change that improves performance</li></ul>`,3),j={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fconventional-changelog%2Fcommitlint",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"husky",-1),C=i(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;commit-msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span>
    <span class="token punctuation">}</span>  
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcommitizen%2Fcz-cli",target:"_blank",rel:"noopener noreferrer"},q=i(`<h3 id="_6-tag" tabindex="-1"><a class="header-anchor" href="#_6-tag" aria-hidden="true">#</a> 6. Tag</h3><p>在说明npm的tag之前需要先将一讲git的tag：</p><h5 id="git的tag" tabindex="-1"><a class="header-anchor" href="#git的tag" aria-hidden="true">#</a> git的tag</h5><p>git上打标签我们应该比较熟悉，特别是开发sdk或者APP软件的同学。我们在使用<code>npm version prepatch</code>的时候就会默认执行一次<code>git tag version</code>，我们也可以手动打一个标签<code>git tag -a &lt;tag名&gt; -m &lt;注释文字&gt;</code>，通过<code>git push — tags origin master</code> 将标签推到远程。</p><h5 id="npm的tag" tabindex="-1"><a class="header-anchor" href="#npm的tag" aria-hidden="true">#</a> npm的tag</h5><p>我们可以通过 <code>npm dist-tag ls [&lt;pkg&gt;]</code> 来查看一个包的tag，一般来说我们至少会有三种类型的标签</p><ul><li>latest：最后版本，npm install的就是这个</li><li>beta：测试版本，一般内测使用，需要指定版本号install，例如3.1.0-beta.0</li><li>next: 先行版本，npm install foo@next安装，例如3.0.2-alpha.0</li></ul><p>如果我们需要发布一个测试版本，在发布的时候需要执行</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>npm publish --tag beta

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你直接执行<code>npm publish</code>，那么即使你的版本号是<code>-beta.n</code>，默认会打上<code>latest</code>的标签，别人install的时候也会下载到。这个时候需要我们只要改一下tag：</p><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code><span class="token operator">//</span> 不小心发错了
latest<span class="token punctuation">:</span> <span class="token v-string string">1.0.1</span><span class="token operator">-</span>beta<span class="token number">.0</span>
<span class="token operator">//</span> 将<span class="token v-string string">1.0.1</span><span class="token operator">-</span>beta<span class="token number">.0</span>设置为beta
npm dist<span class="token operator">-</span>tag add <span class="token keyword">my</span><span class="token operator">-</span><span class="token keyword">package</span><span class="token variable">@1</span><span class="token operator">.</span><span class="token number">0.1</span><span class="token operator">-</span>beta<span class="token number">.0</span> beta
npm dist<span class="token operator">-</span>tag add <span class="token keyword">my</span><span class="token operator">-</span><span class="token keyword">package</span><span class="token variable">@1</span><span class="token operator">.</span><span class="token number">0.0</span> latest

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就万事大吉了。</p>`,12);function E(F,w){const s=c("ExternalLinkIcon");return t(),l("div",null,[r,p,u,e("p",null,[n("在下载包的时候，很多人喜欢设置"),m,n("镜像，因为"),v,n("仓库服务器在国外，下载速度真是急死个人。发布的时候也一样，一般开源应用基本都发布到"),e("a",g,[n("npmjs"),a(s)]),n("，公司内部包的话就会发到私有"),h,n("仓库，我们可以在"),b,n("设置一下你想要的发布的地址：")]),k,e("p",null,[n("包发布了很多次后，使用者升级就需要知道他是否需要升级，需要查看文档看看有哪些不兼容性改动，所以需要一个 "),_,n(" 来记录每次发布改了些什么。如果手动的维护肯定会有忘记的时候，所以需要使用工具来自动生成，我们可以使用"),e("a",f,[n("standard-version"),a(s)]),n(" 这个包来生成，这个包的作用是自动更新版本和生成"),x,n("。")]),y,e("p",null,[n("我们可以使用 "),e("a",j,[n("commitlint"),a(s)]),n("搭配 "),A,n(" 来校验你commit的信息是否符合标准")]),C,e("p",null,[n("也可以使用交互式的方式来生成commit，"),e("a",N,[n("commitizen"),a(s)]),n("这个包就可以。")]),q])}const H=o(d,[["render",E],["__file","NPM 包管理.html.vue"]]);export{H as default};
