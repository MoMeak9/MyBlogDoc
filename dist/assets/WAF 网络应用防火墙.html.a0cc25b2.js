import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as i,e as t}from"./app.d7b34baa.js";const r={},o=t('<h1 id="waf-网络应用防火墙" tabindex="-1"><a class="header-anchor" href="#waf-网络应用防火墙" aria-hidden="true">#</a> WAF 网络应用防火墙</h1><p>你可能对传统的“防火墙”比较熟悉。<strong>传统“防火墙”工作在三层或者四层</strong>，隔离了外网和内网，使用预设的规则，只允许某些特定 IP 地址和端口号的数据包通过，拒绝不符合条件的数据流入或流出内网，实质上是<strong>一种网络数据过滤设备。</strong></p><p>WAF 也是一种“防火墙”，但它工作在七层，看到的不仅是 IP 地址和端口号，还能看到整个 HTTP 报文，所以就能够对报文内容做更深入细致的审核，使用更复杂的条件、规则来过滤数据。</p><p>说白了，WAF 就是一种**“HTTP 入侵检测和防御系统”。**</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202205142116416.png" alt="img"></p><p>通常一款产品能够称为 WAF，要具备下面的一些功能：</p><ul><li>IP 黑名单和白名单，拒绝黑名单上地址的访问，或者只允许白名单上的用户访问；</li><li>URI 黑名单和白名单，与 IP 黑白名单类似，允许或禁止对某些 URI 的访问；</li><li>防护 DDoS 攻击，对特定的 IP 地址限连限速；</li><li>过滤请求报文，防御“代码注入”攻击；</li><li>过滤响应报文，防御敏感信息外泄；</li><li>审计日志，记录所有检测到的入侵操作。</li></ul><p>它就像是平时编写程序时必须要做的函数入口参数检查，拿到 HTTP 请求、响应报文，用字符串处理函数看看有没有关键字、敏感词，或者用正则表达式做一下模式匹配，命中了规则就执行对应的动作，比如返回 403/404。</p><h2 id="全面的-waf-解决方案" tabindex="-1"><a class="header-anchor" href="#全面的-waf-解决方案" aria-hidden="true">#</a> 全面的 WAF 解决方案</h2><p>这里我就要“隆重”介绍一下 WAF 领域里的最顶级产品了：ModSecurity，它可以说是 WAF 界“事实上的标准”。</p><p>ModSecurity 是一个开源的、生产级的 WAF 工具包，历史很悠久，比 Nginx 还要大几岁。它开始于一个私人项目，后来被商业公司 Breach Security 收购，现在则是由 TrustWave 公司的 SpiderLabs 团队负责维护。</p><p>ModSecurity 是一个开源的、生产级的 WAF 产品，核心组成部分是“规则引擎”和“规则集”，两者的关系有点像杀毒引擎和病毒特征库；</p><p>WAF 实质上是模式匹配与数据过滤，所以会消耗 CPU，增加一些计算成本，降低服务能力，使用时需要在安全与性能之间找到一个“平衡点”。</p>',13),c=[o];function p(s,l){return a(),i("div",null,c)}const d=e(r,[["render",p],["__file","WAF 网络应用防火墙.html.vue"]]);export{d as default};
