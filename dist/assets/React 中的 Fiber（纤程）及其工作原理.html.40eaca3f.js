const e=JSON.parse(`{"key":"v-82225ab6","path":"/React/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/React%20%E4%B8%AD%E7%9A%84%20Fiber%EF%BC%88%E7%BA%A4%E7%A8%8B%EF%BC%89%E5%8F%8A%E5%85%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html","title":"React 中的 Fiber（纤程）及其工作原理","lang":"zh-CN","frontmatter":{"date":"2022-08-24T00:00:00.000Z","star":true,"category":["React","源码探究"],"description":"代数效应 代数效应能够将副作用（例子中为请求图片数量）从函数逻辑中分离，使函数关注点保持纯粹。（函数调用产生的副作用不需要使用者关心，并且是上下文无关的，并不与上下文逻辑相绑定） Fiber Fiber并不是计算机术语中的新名词，他的中文翻译叫做纤程，与进程（Process）、线程（Thread）、协程（Coroutine）同为程序执行过程。\\r Wik...","head":[["meta",{"property":"og:url","content":"https://yihuiBlog.top/React/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/React%20%E4%B8%AD%E7%9A%84%20Fiber%EF%BC%88%E7%BA%A4%E7%A8%8B%EF%BC%89%E5%8F%8A%E5%85%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Yihui's Blog"}],["meta",{"property":"og:title","content":"React 中的 Fiber（纤程）及其工作原理"}],["meta",{"property":"og:description","content":"代数效应 代数效应能够将副作用（例子中为请求图片数量）从函数逻辑中分离，使函数关注点保持纯粹。（函数调用产生的副作用不需要使用者关心，并且是上下文无关的，并不与上下文逻辑相绑定） Fiber Fiber并不是计算机术语中的新名词，他的中文翻译叫做纤程，与进程（Process）、线程（Thread）、协程（Coroutine）同为程序执行过程。\\r Wik..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-11-25T08:56:40.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-08-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-25T08:56:40.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"代数效应","slug":"代数效应","link":"#代数效应","children":[]},{"level":2,"title":"Fiber","slug":"fiber","link":"#fiber","children":[{"level":3,"title":"起源、含义","slug":"起源、含义","link":"#起源、含义","children":[]},{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"架构实现","slug":"架构实现","link":"#架构实现","children":[]}]},{"level":2,"title":"Fiber 架构工作原理","slug":"fiber-架构工作原理","link":"#fiber-架构工作原理","children":[{"level":3,"title":"双缓存 Fiber 树","slug":"双缓存-fiber-树","link":"#双缓存-fiber-树","children":[]}]},{"level":2,"title":"生命周期中的构建/替换流程","slug":"生命周期中的构建-替换流程","link":"#生命周期中的构建-替换流程","children":[{"level":3,"title":"mount 时","slug":"mount-时","link":"#mount-时","children":[]}]},{"level":2,"title":"update时","slug":"update时","link":"#update时","children":[]}],"git":{"createdTime":1669366600000,"updatedTime":1669366600000,"contributors":[{"name":"MoMeak9","email":"1308994506@qq.com","commits":1}]},"readingTime":{"minutes":7.4,"words":2220},"copyright":"著作权归YihuiBlog所有\\n基于CC-BY 4.0协议\\n原文链接：https://yihuiblog.top/React/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/React%20%E4%B8%AD%E7%9A%84%20Fiber%EF%BC%88%E7%BA%A4%E7%A8%8B%EF%BC%89%E5%8F%8A%E5%85%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html","filePathRelative":"React/源码学习/React 中的 Fiber（纤程）及其工作原理.md","localizedDate":"2022年8月24日"}`);export{e as data};
