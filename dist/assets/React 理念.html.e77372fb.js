import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c,a as e,b as o,d as a,e as n,r as d}from"./app.d7b34baa.js";const l={},p=e("p",null,"笔记内容来自于：",-1),i={href:"https://reactjs.org/docs/react-component.html#setstate",target:"_blank",rel:"noopener noreferrer"},h={href:"https://react.iamkasong.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://react.iamkasong.com/",target:"_blank",rel:"noopener noreferrer"},u=n(`<h1 id="react-理念" tabindex="-1"><a class="header-anchor" href="#react-理念" aria-hidden="true">#</a> React 理念</h1><blockquote><p>我们认为，React 是用 JavaScript 构建<strong>快速响应</strong>的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。</p></blockquote><p>React 通过解决Web应用的CPU的瓶颈、IO的瓶颈达到快速响应。</p><h3 id="cpu瓶颈" tabindex="-1"><a class="header-anchor" href="#cpu瓶颈" aria-hidden="true">#</a> CPU瓶颈</h3><p>当项目变得庞大、组件数量繁多时（构建树压力大），就容易遇到CPU的瓶颈。</p><p>主流浏览器刷新频率为60Hz，即每（1000ms / 60Hz）16.6ms浏览器刷新一次。我们知道，JS可以操作DOM，<code>GUI渲染线程</code>与<code>JS线程</code>是互斥的。所以<strong>JS脚本执行</strong>和<strong>浏览器布局、绘制</strong>不能同时执行。即在这短时间内要完成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JS</span>脚本执行 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  样式布局 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 样式绘制
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当JS执行时间过长，超出了16.6ms，这次刷新就没有时间执行<strong>样式布局</strong>和<strong>样式绘制</strong>，即常见的页面未响应，不更新等情况。</p><p><strong>React 解决</strong></p>`,9),g=e("code",null,"React",-1),m={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L119",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"React",-1),f=e("code",null,"React",-1),b=n('<p>这种将长任务分拆到每一帧中，像蚂蚁搬家一样一次执行一小段任务的操作，被称为<code>时间切片</code>（time slice）</p><p>此时我们的长任务被拆分到每一帧不同的<code>task</code>中，<code>JS脚本</code>执行时间大体在<code>5ms</code>左右，这样浏览器就有剩余时间执行<strong>样式布局</strong>和<strong>样式绘制</strong>，减少掉帧的可能性。</p><p>所以，解决<code>CPU瓶颈</code>的关键是实现<code>时间切片</code>，而<code>时间切片</code>的关键是：将<strong>同步的更新</strong>变为<strong>可中断的异步更新</strong>。</p><blockquote><p><code>React</code>从v15升级到v16后重构了整个架构，这是16 + 架构的重要更新，此前的同步更新遇到长递归更新的情况会直接导致页面卡死，长时间占用CPU资源</p></blockquote><h3 id="io-瓶颈" tabindex="-1"><a class="header-anchor" href="#io-瓶颈" aria-hidden="true">#</a> IO 瓶颈</h3>',5),v=e("code",null,"React",-1),R={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-intro.html#putting-research-into-production",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"loading",-1),S=e("p",null,"为了支持这些特性，同样需要将同步的更新变为可中断的异步更新。",-1);function I(U,J){const t=d("ExternalLinkIcon");return r(),c("div",null,[e("blockquote",null,[p,e("p",null,[e("a",i,[o("React官网"),a(t)])]),e("p",null,[e("a",h,[o("React技术揭秘"),a(t)])]),e("p",null,[o("添加了个人笔记注释和观点，希望能帮助大家理解。此外，如果想要完整阅读原文内容，请前往卡颂的网站 "),e("a",_,[o("React技术揭秘"),a(t)]),o("。")])]),u,e("p",null,[o("在浏览器每一帧的时间中，预留一些时间给JS线程，"),g,o("利用这部分时间更新组件（在"),e("a",m,[o("源码"),a(t)]),o("中，预留的初始时间是5ms）。当预留的时间不够用时，"),k,o("将线程控制权交还给浏览器使其有时间渲染UI，"),f,o("则等待下一帧时间到来继续被中断的工作。")]),b,e("p",null,[o("对于前端应用主要需要解决的是网络延迟情况下减少用户对这种情况的感知。"),v,o("给出的答案是"),e("a",R,[o("将人机交互研究的结果整合到真实的 UI 中"),a(t)]),o("，实际上是对用户行为有意的“延迟”对UI的更新和反馈，并在背后并行地执行数据请求，并且使这个时间足够的短，使用户无感知，直到这个时间超过某个阈值之后再显示"),x,o("效果。")]),S])}const q=s(l,[["render",I],["__file","React 理念.html.vue"]]);export{q as default};
