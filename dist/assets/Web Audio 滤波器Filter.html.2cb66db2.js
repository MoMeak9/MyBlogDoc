import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as d,a as n,b as a,d as t,e,r as p}from"./app.d7b34baa.js";const c={},r=n("h1",{id:"web-audio-api-biquadfilternode简单低阶滤波器食用指南",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#web-audio-api-biquadfilternode简单低阶滤波器食用指南","aria-hidden":"true"},"#"),a(" Web Audio API - BiquadFilterNode简单低阶滤波器食用指南")],-1),l=n("code",null,"BiquadFilterNode",-1),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/BaseAudioContext/createBiquadFilter",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"AudioContext.createBiquadFilter()",-1),h=e(`<p>这个节点拥有一个输入和输出,一个节点可以设置很多不同的滤波效果，例如让某段频率以下的声音通过什么的(低通).</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><blockquote><h4 id="biquadfilternode-frequency-类型是双精度浮点" tabindex="-1"><a class="header-anchor" href="#biquadfilternode-frequency-类型是双精度浮点" aria-hidden="true">#</a> BiquadFilterNode.frequency 类型是双精度浮点</h4></blockquote><p>当前滤波算法中以赫兹(Hz)为单位测量的频率的双精度浮点值。</p><blockquote><h4 id="biquadfilternode-detune-类型为整数" tabindex="-1"><a class="header-anchor" href="#biquadfilternode-detune-类型为整数" aria-hidden="true">#</a> BiquadFilterNode.detune 类型为整数</h4></blockquote><p>频率失谐值</p><blockquote><h4 id="biquadfilternode-q-类型为双精度浮点" tabindex="-1"><a class="header-anchor" href="#biquadfilternode-q-类型为双精度浮点" aria-hidden="true">#</a> BiquadFilterNode.Q 类型为双精度浮点</h4></blockquote><p>Q因子，或质量因子.默认值为 1,范围在 0.0001 至 1000.</p><blockquote><h4 id="biquadfilternode-gain-类型为整数" tabindex="-1"><a class="header-anchor" href="#biquadfilternode-gain-类型为整数" aria-hidden="true">#</a> BiquadFilterNode.gain 类型为整数</h4></blockquote><p>在当前的过滤算法中使用.当它取正值时,即为增益，当它取负值时，即为衰减,以分贝(dB)为单位,范围为 -40 至 40.</p><blockquote><h4 id="biquadfilternode-type-类型是字符串" tabindex="-1"><a class="header-anchor" href="#biquadfilternode-type-类型是字符串" aria-hidden="true">#</a> BiquadFilterNode.type 类型是字符串</h4></blockquote><p>这个属性决定了滤波器的效果，能使用的值在下列表格。除第一列以外都是对应节点的属性的描述 (给定的频率是指frequency.value)</p><h3 id="属性依赖说明" tabindex="-1"><a class="header-anchor" href="#属性依赖说明" aria-hidden="true">#</a> 属性依赖说明：</h3><table><thead><tr><th>type</th><th>描述</th><th>frequency</th><th>Q</th><th>gain</th></tr></thead><tbody><tr><td>lowpass</td><td>具有12dB/倍频程衰减的标准二阶谐振低通滤波器.给定频率以下的频率通过,高于它的频率会衰减.</td><td>给定频率</td><td>指示频率在截止频率附近的峰值。 该值越大，峰值越大。</td><td>未使用</td></tr><tr><td>highpass</td><td>具有12dB/倍频程衰减的标准二阶谐振高通滤波器,给定频率以下的频率衰减,高于它的频率通过.</td><td>给定频率</td><td>指示频率在截止频率附近的峰值。 该值越大，峰值越大。</td><td>未使用</td></tr><tr><td>bandpass</td><td>标准二阶带通滤波器.给定频率范围之外的频率被衰减,范围内的频率通过</td><td>频率范围内的中心</td><td>控制频带的宽度。Q值越大，频带越小。</td><td>未使用</td></tr><tr><td>lowshelf</td><td>标准二阶低架滤波器.低于给定频率的频率得到提升或衰减,高于给定频率上的频率不变.</td><td>该频率以上获得提升或衰减</td><td>未使用</td><td>要应用的增强(正数)或衰减(负数)，以分贝(dB)为单位；</td></tr><tr><td>highshelf</td><td>标准二阶高架滤波器.高于给定频率的频率得到提升或衰减,低于给定的频率的频率不变.</td><td>该频率以下获得提升或衰减</td><td>未使用</td><td>要应用的增强(正数)或衰减(负数)，以分贝(dB)为单位；</td></tr><tr><td>peaking</td><td>给定频率的范围内的频率得到提升或衰减,给定频率的范围之外的频率不变.</td><td>频率范围内的频率得到增强或衰减</td><td>控制频带的宽度。Q值越大，频带越小。</td><td>要应用的增强(正数)或衰减(负数)，以分贝(dB)为单位；</td></tr><tr><td>notch</td><td>标准陷波滤波器,也称为带阻或带阻滤波器.它的效果与带通滤波器相反:给定频率范围之外的频率通过,内部的频率被衰减.</td><td>频率范围内的中心</td><td>控制频带的宽度。Q值越大，频带越小。</td><td>未使用</td></tr><tr><td>allpass</td><td>标准二阶全通滤波器.它让所有频率通过，但会改变不同频率之间的相位关系.</td><td>频率最大组延迟，即发生相变中心的频率.</td><td>控制过渡在中频的锐度。该参数越大，过渡越锐利越大。</td><td>未使用</td></tr></tbody></table><h2 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例" aria-hidden="true">#</a> 简单示例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> audioCtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitAudioContext<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置音频节点</span>
<span class="token keyword">const</span> biquadFilter <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">createBiquadFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接节点</span>
source <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">createMediaStreamSource</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>biquadFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
biquadFilter<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioCtx<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置参数</span>
biquadFilter<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;lowpass&quot;</span><span class="token punctuation">;</span>
biquadFilter<span class="token punctuation">.</span>frequency<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
biquadFilter<span class="token punctuation">.</span><span class="token constant">Q</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
biquadFilter<span class="token punctuation">.</span>gain<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),b={id:"结合wavesurfer-js使用",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#结合wavesurfer-js使用","aria-hidden":"true"},"#",-1),m={href:"https://wavesurfer-js.org/",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取audio context，其中audioplayer为wavesurfer.create()创建的wavesurfer实例</span>
<span class="token keyword">const</span> BiquadFilter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>audioplayer<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>ac<span class="token punctuation">.</span><span class="token function">createBiquadFitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置参数</span>
BiquadFilter<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;lowpass&#39;</span>
BiquadFilter<span class="token punctuation">.</span>frequency<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">:</span>
BiquadFiter<span class="token punctuation">.</span><span class="token constant">Q</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
BiquadFilter<span class="token punctuation">.</span>gain<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// 设置过滤器</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>audioplayer<span class="token punctuation">.</span>backend<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>BiquadFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小作业预告" tabindex="-1"><a class="header-anchor" href="#小作业预告" aria-hidden="true">#</a> 小作业预告</h2><p>最近专业选修课作业写了个基于Web Audio API 的播放器，后续会更新文章关于如何边实践边学习Web Audio API，敬请期待~</p>`,3),q={href:"https://my-bucket-r4bp40x-1259409954.cos-website.ap-guangzhou.myqcloud.com",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[n("img",{src:"https://cdn.yihuiblog.top/images/202211272255177.png",alt:"image-20221127225535081"})],-1),g=n("p",null,[n("img",{src:"https://cdn.yihuiblog.top/images/202211272256166.png",alt:"image-20221127225637069"})],-1),B=n("p",null,"参考文档：",-1),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/BaseAudioContext/createBiquadFilter#%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"},F={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/BiquadFilterNode",target:"_blank",rel:"noopener noreferrer"},y={href:"https://wavesurfer-js.org/",target:"_blank",rel:"noopener noreferrer"};function w(A,N){const s=p("ExternalLinkIcon");return i(),d("div",null,[r,n("p",null,[l,a(" 接口表示一个简单低阶滤波器（双二阶滤波器），通过 "),n("a",u,[k,t(s)]),a(" 方法创建。")]),h,n("h3",b,[v,a(" 结合"),n("a",m,[a("wavesurfer.js"),t(s)]),a("使用")]),f,n("p",null,[n("a",q,[a("Online Demo"),t(s)]),a("，成品是这个样子")]),_,g,n("blockquote",null,[B,n("p",null,[n("a",x,[a("MDN 文档"),t(s)])]),n("p",null,[n("a",F,[a("MDN BiquadFilterNode"),t(s)])]),n("p",null,[n("a",y,[a("wavesurfer"),t(s)])])])])}const z=o(c,[["render",w],["__file","Web Audio 滤波器Filter.html.vue"]]);export{z as default};
