import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e as p,r as l}from"./app.d7b34baa.js";const i={},u=n("h1",{id:"webpack-性能优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack-性能优化","aria-hidden":"true"},"#"),s(" Webpack 性能优化")],-1),r=n("ul",null,[n("li",null,"使用动态加载，减少首屏资源加载量；"),n("li",null,"使用 externals 外置依赖、Tree-Shaking、Scope Hoisting 特性，减少应用体积；"),n("li",null,[s("正确使用 "),n("code",null,"[hash]"),s(" 占位符，优化 HTTP 资源缓存效率；")])],-1),k=n("h2",{id:"动态加载",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#动态加载","aria-hidden":"true"},"#"),s(" 动态加载")],-1),d={href:"https://web.dev/critical-rendering-path/",target:"_blank",rel:"noopener noreferrer"},m=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> someBigMethod <span class="token keyword">from</span> <span class="token string">&quot;./someBigMethod&quot;</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;someButton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">someBigMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><img src="https://cdn.yihuiblog.top/images/202208230937460.png" alt="渐进式页面渲染" style="zoom:80%;"><p>性能优化就是要了解在接收 HTML、CSS 和 JavaScript 字节以及将它们转换为渲染像素所需的处理之间的这些中间步骤中发生了什么——这是<strong>关键的渲染路径</strong>。</p></blockquote><p>逻辑上，直到点击页面的 <code>someButton</code> 按钮时才会调用 <code>someBigMethod</code> 方法，因此这部分代码没必要出现在首屏资源列表中，此时我们可以使用 Webpack 的动态加载功能将该模块更改为异步导入，修改上述代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;someButton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用 \`import(&quot;module&quot;)\` 动态加载模块</span>
  <span class="token keyword">const</span> someBigMethod <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./someBigMethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">someBigMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，重新构建将产生额外的产物文件 <code>src_someBigMethod_js.js</code>，这个文件直到执行 <code>import</code> 语句时 —— 也就是上例 <code>someButton</code> 被点击时才被加载到浏览器，也就不会影响到关键渲染路径了。</p><p>**<u>动态加载是 Webpack 内置能力</u>**之一，我们不需要做任何额外配置就可以通过动态导入语句(<code>import</code>、<code>require.ensure</code>)轻易实现。但请 注意，这一特性有时候反而会带来一些新的性能问题：</p><p><strong>一是过度使用会使产物变得过度细碎，产物文件过多，运行时 HTTP 通讯次数也会变多</strong>，在 HTTP 1.x 环境下这可能反而会降低网络性能，得不偿失；</p><p><strong>二是使用时 Webpack 需要在客户端注入一大段用于支持动态加载特性的 Runtime（2.5KB）</strong></p><p><img src="https://cdn.yihuiblog.top/images/202208230929920.png" alt="image-20220823092900750"></p><p>多数情况下我们没必要为小模块使用动态加载能力。<strong>目前社区比较常见的用法是配合 SPA 的前端路由能力实现页面级别的动态加载</strong>，例如在 Vue 中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./Home.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;sub-pages&quot; */</span> <span class="token string">&quot;./Foo.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;sub-pages&quot; */</span> <span class="token string">&quot;./Bar.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 基础页面</span>
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/bar&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Bar <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Foo <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Home&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Home <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>Home/Foo/Bar</code> 三个组件均通过 <code>import()</code> 语句动态导入，这使得仅当页面切换到相应路由时才会加载对应组件代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;sub-pages&quot; */</span> <span class="token string">&quot;./Bar.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>webpackChunkName</code> 用于指定该异步模块的 Chunk 名称，相同 Chunk 名称的模块最终会打包在一起。</p><h2 id="http-缓存优化" tabindex="-1"><a class="header-anchor" href="#http-缓存优化" aria-hidden="true">#</a> HTTP 缓存优化</h2><p>我们可以调整产物文件的名称(通过 Hash)与内容(通过代码拆分 Code Splitting)，使其更适配 HTTP 持久化缓存策略。</p><blockquote><p>提示：Hash 是一种将任意长度的消息压缩到某一固定长度的消息<strong>摘要</strong>的函数，不同明文计算出的摘要值不同，所以常常被用作<strong>内容唯一标识</strong>。</p></blockquote>`,17),v={href:"https://webpack.js.org/configuration/output/#template-strings",target:"_blank",rel:"noopener noreferrer"},b={href:"https://webpack.js.org/configuration/output/#outputfilename",target:"_blank",rel:"noopener noreferrer"},g=p(`<ul><li><code>[fullhash]</code>：整个项目的内容 Hash 值，项目中任意模块变化都会产生新的 <code>fullhash</code>；</li><li><code>[chunkhash]</code>：产物对应 Chunk 的 Hash，Chunk 中任意模块变化都会产生新的 <code>chunkhash</code>；</li><li><code>[contenthash]</code>：<strong>产物内容 Hash 值，仅当产物内容发生变化时才会产生新的 <code>contenthash</code>，因此实用性较高</strong>。</li></ul><p>用法很简单，只需要在 <code>output.filename</code> 值中插入相应占位符即可，如 <code>&quot;[name]-[contenthash].js&quot;</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;./src/foo.js&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name]-[contenthash].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name]-[contenthash].css&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.yihuiblog.top/images/202208230942045.png" alt="image-20220823094247913"></p><blockquote><p>提示：也可以通过占位符传入 Hash 位数，如 [contenthash:7] ，即可限定生成的 Hash 长度。</p></blockquote><p>可以看到每个产物文件名都会带上一段由产物内容计算出的唯一 Hash 值，文件内容不变，Hash 也不会变化，这就很适合用作 HTTP 持久缓存 资源</p><p>此时，产物文件不会被重复下载，一直到文件内容发生变化，引起 Hash 变化生成不同 URL 路径之后，才需要请求新的资源文件，能有效提升网络性能，因此，生产环境下应尽量使用 <code>[contenthash]</code> 生成有版本意义的文件名。</p><h2 id="使用外置依赖" tabindex="-1"><a class="header-anchor" href="#使用外置依赖" aria-hidden="true">#</a> 使用外置依赖</h2><p><code>externals</code> 的主要作用是将部分模块排除在 Webpack 打包系统之外，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上述配置后，Webpack 会 <strong>预设</strong> 运行环境中已经内置 Lodash 库 —— 无论是通过 CDN 还是其它方式注入，所以不需要再将这些模块打包到产物中</p><blockquote><p>提示：<code>externals</code> 不仅适用于优化产物性能，在特定环境下还能用于跳过若干运行时模块，例如 Node 中的 <code>fs/net</code> 等，避免将这部分源码错误打包进 Bundle。</p></blockquote><p>使用 <code>externals</code> 时必须确保这些外置依赖代码已经被正确注入到上下文环境中，这在 Web 应用中通常可以通过 CDN 方式实现</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//unpkg.com/react@18/umd/react.development.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//unpkg.com/lodash@4.17.21/lodash.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-tree-shaking-树摇-删除多余模块导出" tabindex="-1"><a class="header-anchor" href="#使用-tree-shaking-树摇-删除多余模块导出" aria-hidden="true">#</a> 使用 Tree-Shaking （树摇）删除多余模块导出</h2><p>Webpack 自 2.0 版本开始接入，是一种基于 ES Module 规范的 Dead Code Elimination 技术，它会在运行过程中静态分析模块之间的导入导出，判断哪些模块导出值没有被其它模块使用 —— 相当于模块层面的 Dead Code，并将其删除。</p><p>在 Webpack 中，启动 Tree Shaking 功能必须同时满足两个条件：</p><ul><li>配置 <code>optimization.usedExports</code> 为 <code>true</code>，标记模块导入导出列表；</li><li>启动代码优化功能，可以通过如下方式实现： <ul><li>配置 <code>mode = production</code></li><li>配置 <code>optimization.minimize = true</code></li><li>提供 <code>optimization.minimizer</code> 数组</li></ul></li></ul><h2 id="使用-scope-hoisting-作用域提升-合并模块" tabindex="-1"><a class="header-anchor" href="#使用-scope-hoisting-作用域提升-合并模块" aria-hidden="true">#</a> 使用 Scope Hoisting （作用域提升）合并模块</h2><p>默认情况下 Webpack 会将模块打包成一个个单独的函数，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// common.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&quot;common&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> common <span class="token keyword">from</span> <span class="token string">&#39;./common&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>common<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过 Webpack 打包后会生成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;./src/common.js&quot;</span><span class="token operator">:</span>
  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;common&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">/* harmony export */</span>
      <span class="token string-property property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>__WEBPACK_DEFAULT_EXPORT__<span class="token punctuation">)</span>
      <span class="token comment">/* harmony export */</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span>
  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> _common__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span> <span class="token comment">/*! ./common */</span> <span class="token string">&quot;./src/common.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_common__WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Webpack 提供了 Scope Hoisting 功能，用于 <strong>将符合条件的多个模块合并到同一个函数空间</strong>(提升到同一个函数空间)：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span><span class="token comment">// CONCATENATED MODULE: ./src/common.js</span>
    <span class="token comment">/* harmony default export */</span> <span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;common&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token punctuation">;</span><span class="token comment">// CONCATENATED MODULE: ./src/index.js</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>common<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Webpack 提供了三种开启 Scope Hoisting 的方法：</p><ul><li>使用 <code>mode = &#39;production&#39;</code> 开启生产模式；</li><li>使用 <code>optimization.concatenateModules</code> 配置项；</li><li>直接使用 <code>ModuleConcatenationPlugin</code> 插件。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ModuleConcatenationPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack/lib/optimize/ModuleConcatenationPlugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法1： 将 \`mode\` 设置为 production，即可开启</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 方法2： 将 \`optimization.concatenateModules\` 设置为 true</span>
    <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">concatenateModules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">providedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 方法3： 直接使用 \`ModuleConcatenationPlugin\` 插件</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Tree-Shaking 类似，Scope Hoisting 底层基于 ES Module 方案的 静态特性，推断模块之间的依赖关系，并进一步判断模块与模块能否合并，因此在以下场景下会失效：</p><ul><li>非 ESM 模块</li><li>模块被多个 Chunk 引用</li></ul><h2 id="监控产物体积" tabindex="-1"><a class="header-anchor" href="#监控产物体积" aria-hidden="true">#</a> 监控产物体积</h2><p>Webpack 专门为此提供了一套 性能监控方案，当构建生成的产物体积超过阈值时抛出异常警告，以此帮助我们时刻关注资源体积，避免因项目迭代增长带来过大的网络传输</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">performance</span><span class="token operator">:</span> <span class="token punctuation">{</span>    
    <span class="token comment">// 设置所有产物体积阈值</span>
    <span class="token literal-property property">maxAssetSize</span><span class="token operator">:</span> <span class="token number">172</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token comment">// 设置 entry 产物体积阈值</span>
    <span class="token literal-property property">maxEntrypointSize</span><span class="token operator">:</span> <span class="token number">244</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token comment">// 报错方式，支持 \`error\` | \`warning\` | false</span>
    <span class="token literal-property property">hints</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 过滤需要监控的文件类型</span>
    <span class="token function-variable function">assetFilter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">assetFilename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个比较好的 经验法则 是确保 关键路径 资源体积始终小于 170KB，超过这个体积就应该使用上面介绍的若干方法做好裁剪优化。</p>`,34);function h(_,y){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,k,n("p",null,[s("Webpack 默认会将同一个 Entry 下的所有模块全部打包成一个产物文件 —— 包括那些与页面 "),n("a",d,[s("关键渲染路径"),t(a)]),s(" 无关的代码，这会导致页面初始化时需要花费多余时间去下载这部分暂时用不上的代码，影响首屏渲染性能，例如：")]),m,n("p",null,[s("Webpack 提供了一种模板字符串("),n("a",v,[s("Template String"),t(a)]),s(")能力，用于根据构建情况动态拼接产物文件名称("),n("a",b,[s("output.filename"),t(a)]),s(")，从性能角度看，比较值得关注的是其中的几个 Hash 占位符：")]),g])}const w=e(i,[["render",h],["__file","Webpack 性能优化.html.vue"]]);export{w as default};
