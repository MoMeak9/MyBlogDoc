import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as e,e as a,r as l}from"./app.d7b34baa.js";const i={},u=a(`<h1 id="牛客网刷题04" tabindex="-1"><a class="header-anchor" href="#牛客网刷题04" aria-hidden="true">#</a> 牛客网刷题04</h1><h3 id="_31-正确的函数定义" tabindex="-1"><a class="header-anchor" href="#_31-正确的函数定义" aria-hidden="true">#</a> 31. 正确的函数定义</h3><blockquote><p>题目描述 请修复给定的 js 代码中，函数定义存在的问题 输入：true 输出：a</p><p>？好像没有问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">functions</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：使用函数表达式</span>
<span class="token keyword">function</span> <span class="token function">functions</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上面的等同于下面的，变量提升</span>
<span class="token keyword">function</span> <span class="token function">functions</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> getValue
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>函数的定义方式</li></ul><blockquote><p>函数声明式：<strong>函数声明在函数没有执行之前就已经在作用域中会提升，同名的声明会进行覆盖</strong>，以下面的为准，那么程序执行的时候一直输出的就是b。</p><p>函数表达式：使用<strong>函数表达式</strong>，还是会进行变量的提升，只不过这次提升的是变量getValue，在执行的时候，才会根据if语句的流程控制执行不同的函数。</p></blockquote><h3 id="_32-正确的使用-parseint" tabindex="-1"><a class="header-anchor" href="#_32-正确的使用-parseint" aria-hidden="true">#</a> 32. 正确的使用 parseInt</h3><blockquote><p>题目描述 修改 js 代码中 parseInt 的调用方式，使之通过全部测试用例 输入：&#39;12&#39; 输出：12 输入： &#39;12px&#39; 输出：12 输入： &#39;0x12&#39; 输出：0</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法，确定是10进制</span>
<span class="token keyword">function</span> <span class="token function">parse2Int</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>parseInt</li></ul><blockquote><p>parseInt经常用于强制类型转换中显式转换成数字，接收两个参数，返回数值或者NaN</p><p>parseInt(string, radix) 第一个参数是字符串，必须传的。 第二个参数是数字的基数，2-36，如果不传或者传0都是以10位基数来计算，如果小于2(不等于0)或者大于36一律返回NaN，如果&#39;0x&#39;开头为16进制，&#39;0&#39;开头不包括0是8进制。</p><p>parseInt强制类型转化的时候，**如果第一位不是数字就会返回NaN，如果第一位是数字，那么会把后面是数字的返回，不是数字的过滤掉。**如果是小数的话，<strong>会向下取整成整数</strong>。</p></blockquote><h3 id="_33-完全等同" tabindex="-1"><a class="header-anchor" href="#_33-完全等同" aria-hidden="true">#</a> 33. 完全等同</h3><blockquote><p>题目描述 判断 val1 和 val2 是否完全等同</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> val1 <span class="token operator">===</span> val2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>等同</li></ul><blockquote><p>== 和 === 的区别，简单来说在于，== 只判断值相同，遇到问题，=== 还要判断类型是否相同。 这里其实我觉得还需要考虑NaN的问题，NaN !== NaN</p></blockquote><h3 id="_34-正确的函数定义" tabindex="-1"><a class="header-anchor" href="#_34-正确的函数定义" aria-hidden="true">#</a> 34. 正确的函数定义</h3><blockquote><p>题目描述 实现一个打点计时器，要求</p><ol><li>从 start 到 end（包含 start 和 end），每隔 100 毫秒 console.log 一个数字，每次数字增幅为 1</li><li>返回的对象中需要包含一个 cancel 方法，用于停止定时操作</li><li>第一个数需要立即输出</li></ol></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一个立即输出</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token comment">// 返回的方法是一个函数</span>
        <span class="token function-variable function">cancel</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>setInterval</li></ul><blockquote><p>计时器，如果第一个要立即输出，那么需要手动写一次。 定义的时候接收两个参数，第一个是每次执行的函数，第二个是执行时间间隔。 返回值接收计时器名称，可以用于清空计时器用。</p></blockquote><ul><li>闭包</li></ul>`,26),r={id:"_35-流程控制",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_35-流程控制","aria-hidden":"true"},"#",-1),d={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.nowcoder.com%2Fpractice%2F8a7bff7ab0d345d5ac5c82e41d9f7115%3FtpId%3D2%26tqId%3D37889%26rp%3D1%26ru%3D%2Factivity%2Foj%26qru%3D%2Fta%2Ffront-end%2Fquestion-ranking%26tab%3DanswerKey",target:"_blank",rel:"noopener noreferrer"},v=a(`<blockquote><p>题目描述 实现 fizzBuzz 函数，参数 num 与返回值的关系如下： 1、如果 num 能同时被 3 和 5 整除，返回字符串 fizzbuzz 2、如果 num 能被 3 整除，返回字符串 fizz 3、如果 num 能被 5 整除，返回字符串 buzz 4、如果参数为空或者不是 Number 类型，返回 false 5、其余情况，返回参数 num 输入： 15 ; 输出： fizzbuzz</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：if-else if-else</span>
<span class="token keyword">function</span> <span class="token function">fizzBuzz</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果num为空或者不传，isNaN都为true</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;fizzbuzz&#39;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;fizz&#39;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;buzz&#39;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> num
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：观察合理使用if</span>
<span class="token keyword">function</span> <span class="token function">fizzBuzz</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> str <span class="token operator">+=</span> <span class="token string">&#39;fizz&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> str <span class="token operator">+=</span> <span class="token string">&#39;buzz&#39;</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> str <span class="token operator">===</span> <span class="token string">&#39;&#39;</span> <span class="token operator">?</span> num <span class="token operator">:</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>流程控制：if-else</li><li>isNaN</li></ul><blockquote><p>isNaN()，遇到不是Number类型的判断都用这个函数，如果参数不是数字就返回true，其他的判断我觉得都不是这个题要考的。ES6之后新增了方法Number.isNaN() 判断是否是NaN</p></blockquote><ul><li>取余 %</li></ul>`,6),m={id:"_36-函数传参",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_36-函数传参","aria-hidden":"true"},"#",-1),f={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.nowcoder.com%2Fpractice%2F80365a2685144559817e3d5e0c27f3a8%3FtpId%3D2%26tqId%3D37890%26rp%3D1%26ru%3D%2Factivity%2Foj%26qru%3D%2Fta%2Ffront-end%2Fquestion-ranking%26tab%3DanswerKey",target:"_blank",rel:"noopener noreferrer"},g=a(`<blockquote><p>题目描述 将数组 arr 中的元素作为调用函数 fn 的参数 输入： function (greeting, name, punctuation) {return greeting + &#39;, &#39; + name + (punctuation || &#39;!&#39;);}, [&#39;Hello&#39;, &#39;Ellie&#39;, &#39;!&#39;] 输出： Hello, Ellie!</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：量身定做，传的是数组</span>
<span class="token keyword">function</span> <span class="token function">argsAsArray</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：如果用call就需要使用扩展符打散</span>
<span class="token keyword">function</span> <span class="token function">argsAsArray</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法三：如果bind处理</span>
<span class="token keyword">function</span> <span class="token function">argsAsArray</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>apply/call/bind (详情见一的第一题)</li><li>fn传参问题</li></ul>`,4),h={id:"_37-函数的上下文",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#_37-函数的上下文","aria-hidden":"true"},"#",-1),y={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.nowcoder.com%2Fpractice%2F5e97b94794bd438f893137b2d3b28a6a%3FtpId%3D2%26tqId%3D37891%26rp%3D1%26ru%3D%2Factivity%2Foj%26qru%3D%2Fta%2Ffront-end%2Fquestion-ranking%26tab%3DanswerKey",target:"_blank",rel:"noopener noreferrer"},_=a(`<blockquote><p>题目描述 将函数 fn 的执行上下文改为 obj 对象 输入： function () {return this.greeting + &#39;, &#39; + this.name + &#39;!!!&#39;;}, {greeting: &#39;Hello&#39;, name: &#39;Rebecca&#39;} 输出：Hello, Rebecca!!!</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：apply</span>
<span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法一：call</span>
<span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法一：bind</span>
<span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>this指向</li></ul><blockquote><p>apply/call/bind 都可以修改执行上下文，如果直接调用fn，this指的是window，如果用 apply/call/bind 可以将this改成对象obj</p></blockquote>`,5),j={id:"_38-返回函数",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#_38-返回函数","aria-hidden":"true"},"#",-1),q={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.nowcoder.com%2Fpractice%2F1f9fd23cdfd14675ab10207191e1d035%3FtpId%3D2%26tqId%3D37892%26rp%3D1%26ru%3D%2Factivity%2Foj%26qru%3D%2Fta%2Ffront-end%2Fquestion-ranking%26tab%3DanswerKey",target:"_blank",rel:"noopener noreferrer"},x=a(`<blockquote><p>题目描述 实现函数 functionFunction，调用之后满足如下条件： 1、返回值为一个函数 f 2、调用返回的函数 f，返回值为按照调用顺序的参数拼接，拼接字符为英文逗号加一个空格，即 &#39;, &#39; 3、所有函数的参数数量为 1，且均为 String 类型 输入： functionFunction(&#39;Hello&#39;)(&#39;world&#39;) 输出： Hello, world</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：直接用扩展运算符获取参数</span>
<span class="token keyword">function</span> <span class="token function">functionFunction</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 记得逗号之后要加一个空格，才能过oj</span>
        <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">&#39;, &#39;</span><span class="token operator">+</span>arg
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：用原生方法获取参数</span>
<span class="token keyword">function</span> <span class="token function">functionFunction</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>  str<span class="token operator">+</span> <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>闭包 + 柯里化</li></ul><blockquote><p>闭包是一个函数可以访问另一个函数作用域的变量。</p></blockquote>`,5),z={id:"_39-使用闭包",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#_39-使用闭包","aria-hidden":"true"},"#",-1),D={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.nowcoder.com%2Fpractice%2F578026cd24e3446bbf27fe565473dc26%3FtpId%3D2%26tqId%3D37893%26rp%3D1%26ru%3D%2Factivity%2Foj%26qru%3D%2Fta%2Ffront-end%2Fquestion-ranking%26tab%3DanswerKey",target:"_blank",rel:"noopener noreferrer"},I=a(`<blockquote><p>题目描述 实现函数 makeClosures，调用之后满足如下条件： 1、返回一个函数数组 result，长度与 arr 相同 2、运行 result 中第 i 个函数，即 <code>result[i]()</code>，结果与 <code>fn(arr[i])</code> 相同 输入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：4</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 闭包</span>
<span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>闭包</li></ul><blockquote><p>上面的题，如果不用闭包，那么for循环的嘶吼，最后调用函数的时候，i都是arr.length,如果使用闭包，可以是当时循环的i值。</p></blockquote><h3 id="_40-二次封装函数" tabindex="-1"><a class="header-anchor" href="#_40-二次封装函数" aria-hidden="true">#</a> 40. 二次封装函数</h3><blockquote><p>题目描述 已知函数 fn 执行需要 3 个参数。请实现函数 partial，调用之后满足如下条件： 1、返回一个函数 result，该函数接受一个参数 2、执行 result(str3) ，返回的结果与 fn(str1, str2, str3) 一致 输入： <code>var sayIt = function(greeting, name, punctuation) { return greeting + &#39;, &#39; + name + (punctuation || &#39;!&#39;); }; partial(sayIt, &#39;Hello&#39;, &#39;Ellie&#39;)(&#39;!!!&#39;);</code></p><p>输出：Hello, Ellie!!!</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：直接调用，因为没有涉及到this，这里直接用arguments来获取，因为arguments是类数组</span>
<span class="token keyword">function</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：用扩展运算符拿到参数传入，更加的通用</span>
<span class="token keyword">function</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>arg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：ES6箭头函数，this指的是undefined</span>
<span class="token keyword">const</span> <span class="token function-variable function">partial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">str3</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>闭包</li><li>获取函数参数arguments</li></ul><blockquote><p>arguments 类数组， 获取长度arguments.length 获取元素用数组下标arguments[0] 获取当前执行的函数 arguments.callee (ES5严格模式下禁用)</p></blockquote><p>后面的东西可能会上一些小难度~~~</p>`,12);function V(A,E){const t=l("ExternalLinkIcon");return o(),c("div",null,[u,n("h3",r,[k,s(" 35. "),n("a",d,[s("流程控制"),e(t)])]),v,n("h3",m,[b,s(" 36. "),n("a",f,[s("函数传参"),e(t)])]),g,n("h3",h,[w,s(" 37. "),n("a",y,[s("函数的上下文"),e(t)])]),_,n("h3",j,[F,s(" 38. "),n("a",q,[s("返回函数"),e(t)])]),x,n("h3",z,[N,s(" 39. "),n("a",D,[s("使用闭包"),e(t)])]),I])}const K=p(i,[["render",V],["__file","牛客网刷题31-40.html.vue"]]);export{K as default};
