import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as s,d as e,e as t,r as l}from"./app.d7b34baa.js";const r={},i=n("h1",{id:"webpack-配置及规则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack-配置及规则","aria-hidden":"true"},"#"),s(" Webpack 配置及规则")],-1),u=n("p",null,"参考来源：",-1),d={href:"https://juejin.cn/book/7115598540721618944",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="配置方法" tabindex="-1"><a class="header-anchor" href="#配置方法" aria-hidden="true">#</a> 配置方法</h2><h3 id="对象配置" tabindex="-1"><a class="header-anchor" href="#对象配置" aria-hidden="true">#</a> 对象配置</h3><p>在前面章节中，我们已经编写了许多 Webpack 配置示例，其大多数都以单文件导出单个配置对象方式实现，类似：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 其它配置...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较常用的一种方式，逻辑简单，适合大多数业务项目；</p><h3 id="使用配置数组" tabindex="-1"><a class="header-anchor" href="#使用配置数组" aria-hidden="true">#</a> 使用配置数组</h3><blockquote><p>同一份代码打包出多种产物”场景</p></blockquote><p>导出数组的方式很简单，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 其它配置...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 其它配置...</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用数组方式时，Webpack 会在启动后创建多个 <code>Compilation</code> 实例，并行执行构建工作，但需要注意，<code>Compilation</code> 实例间基本上不作通讯，这意味着这种并行构建对运行性能并没有任何正向收益，<u>例如某个 Module 在 <code>Compilation</code> 实例 A 中完成解析、构建后，在其它 <code>Compilation</code> 中依然需要完整经历构建流程，无法直接复用结果。</u></p><p>数组方式主要用于应对“同一份代码打包出多种产物”的场景，例如在构建 Library 时，我们通常需要同时构建出 ESM/CMD/UMD 等模块方案的产物，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./dist-amd.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./app.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./dist-commonjs.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;commonjs&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;commonjs&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./app.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：</p><p>使用配置数组时，还可以通过 <code>--config-name</code> 参数指定需要构建的配置对象，例如上例配置中若执行 <code>npx webpack --config-name=&#39;amd&#39;</code>，则仅使用数组中 <code>name=&#39;amd&#39;</code> 的项做构建。</p></blockquote><p>此时适合使用配置数组方式解决；若是“多份代码打包多份产物”的场景，则建议使用 <code>entry</code> 配置多个应用入口。</p>`,14),m={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-merge",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-merge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;amd&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./app.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name]-amd.js&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&quot;amd&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;./[name]-commonjs.js&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：<code>webpack-merge</code> 是 Webpack 生态内专门用于合并配置对象的工具</p></blockquote><p>示例中将公共配置抽取为 <code>baseConfig</code> 对象，之后配合 <code>webpack-merge</code> 创建不同目标数组项，这种方式可有效减少重复的配置代码，非常推荐使用。</p><h3 id="使用配置函数" tabindex="-1"><a class="header-anchor" href="#使用配置函数" aria-hidden="true">#</a> 使用配置函数</h3><p>配置函数方式要求在配置文件中导出一个函数，并在函数中返回 Webpack 配置对象，或配置数组，或 <code>Promise</code> 对象，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 其它配置...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时，Webpack 会传入两个环境参数对象：</p><ul><li><code>env</code>：通过 <code>--env</code> 传递的命令行参数，适用于自定义参数，例如：</li></ul><table><thead><tr><th>命令：</th><th><code>env</code> 参数值：</th></tr></thead><tbody><tr><td>npx webpack --env prod</td><td>{ prod: true }</td></tr><tr><td>npx webpack --env prod --env min</td><td>{ prod: true, min: true }</td></tr><tr><td>npx webpack --env platform=app --env production</td><td>{ platform: &quot;app&quot;, production: true }</td></tr><tr><td>npx webpack --env foo=bar=app</td><td>{ foo: &quot;bar=app&quot;}</td></tr><tr><td>npx webpack --env app.platform=&quot;staging&quot; --env app.name=&quot;test&quot;</td><td>{ app: { platform: &quot;staging&quot;, name: &quot;test&quot; }</td></tr></tbody></table>`,9),b=n("code",null,"argv",-1),h={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fapi%2Fcli%2F%23flags",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"entry",-1),_=n("code",null,"output-path",-1),y=n("code",null,"mode",-1),f=n("code",null,"merge",-1),j=t(`<p><u>“<strong>配置函数</strong>”这种方式的意义在于，允许用户根据命令行参数动态创建配置对象，可用于实现简单的多环境治理策略</u></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npx webpack --env app.type=miniapp --mode=production</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> argv<span class="token punctuation">.</span>mode <span class="token operator">?</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devtool</span><span class="token operator">:</span> argv<span class="token punctuation">.</span>mode <span class="token operator">?</span> <span class="token string">&quot;source-map&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;eval&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>env<span class="token punctuation">.</span>app<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">compress</span><span class="token operator">:</span> argv<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不过这种方式并不常用，</p><p>一是因为需要在配置函数内做许多逻辑判断，复杂场景下可能可读性会很低，维护成本高；</p><p>二是强依赖于命令行参数，可能最终需要写出一串很长的运行命令，应用体验较差。目前社区比较流行通过不同配置文件区分不同环境的运行配置，配合 <code>--config</code> 参数实现环境治理。</p></blockquote><h2 id="环境治理策略" tabindex="-1"><a class="header-anchor" href="#环境治理策略" aria-hidden="true">#</a> 环境治理策略 ⭐</h2><p>在现代前端工程化实践中，通常需要将同一个应用项目部署在不同环境(如生产环境、开发环境、测试环境)中，以满足项目参与各方的不同需求。这就要求我们能根据部署环境需求，对同一份代码执行各有侧重的打包策略，例如：</p><ul><li><strong>开发环境需要使用 <code>webpack-dev-server</code> 实现 Hot Module Replacement；</strong></li><li><strong>测试环境需要带上完整的 Soucemap 内容，以帮助更好地定位问题；</strong></li><li><strong>生产环境需要尽可能打包出更快、更小、更好的应用代码，确保用户体验。</strong></li></ul><p>Webpack 中有许多实现环境治理的方案，比如上面介绍过的，使用“配置函数”配合命令行参数动态计算配置对象。除此之外，<strong>业界比较流行将不同环境配置分别维护在单独的配置文件中，如：</strong></p><p>之后配合 <code>--config</code> 选项指定配置目标，如：</p><div class="language-arduino line-numbers-mode" data-ext="arduino"><pre class="language-arduino"><code>npx webpack <span class="token operator">--</span><span class="token builtin">config</span> webpack<span class="token punctuation">.</span>development<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),F=n("code",null,"webpack.common.js",-1),w={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.org%2Fpackage%2Fwebpack-merge",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"webpack-merge",-1),x=n("code",null,"merge",-1),W={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdevdocs.io%2Flodash~4%2Findex%23merge",target:"_blank",rel:"noopener noreferrer"},A={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdevdocs.io%2Fjavascript%2Fglobal_objects%2Fobject%2Fassign",target:"_blank",rel:"noopener noreferrer"},E=t(`<ul><li>支持数组属性合并，例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">{</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>支持函数属性合并，例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
res<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; 1,2 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>支持设定对象合并策略，支持 <code>match/append/prepend/replace/merge</code> 规则；</li><li>支持传入自定义对象合并函数；</li></ul><p><a href=""><strong>参考仓库地址</strong></a></p><h2 id="核心配置项汇总" tabindex="-1"><a class="header-anchor" href="#核心配置项汇总" aria-hidden="true">#</a> 核心配置项汇总</h2><p><img src="https://cdn.yihuiblog.top/images/202208171121387.webp" alt="image.png"></p><p>较常用，需要着重学习的配置有：</p><ul><li><code>entry</code>：声明项目入口文件，Webpack 会从这个文件开始递归找出所有文件依赖；</li><li><code>output</code>：声明构建结果的存放位置；</li><li><code>target</code>：用于配置编译产物的目标运行环境，支持 <code>web</code>、<code>node</code>、<code>electron</code> 等值，不同值最终产物会有所差异；</li><li><code>mode</code>：编译模式短语，支持 <code>development</code>、<code>production</code> 等值，Webpack 会根据该属性推断默认配置；</li><li><code>optimization</code>：用于控制如何优化产物包体积，内置 Dead Code Elimination、Scope Hoisting、代码混淆、代码压缩等功能；</li><li><code>module</code>：用于声明模块加载规则，例如针对什么类型的资源需要使用哪些 Loader 进行处理；</li><li><code>plugin</code>：Webpack 插件列表。</li></ul><p>其中，<code>optimization/module/plugin</code> 属性将在后续章节做专门介绍，此处先不展开。接下来我们将集中讲解 <code>entry/output/target/mode</code> 属性，帮你更全面、立体、透彻地理解 Webpack 配置项逻辑。</p><h3 id="entry-配置详解" tabindex="-1"><a class="header-anchor" href="#entry-配置详解" aria-hidden="true">#</a> entry 配置详解</h3>`,12),C=n("strong",null,"「入口文件」",-1),B={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Fentry-context%2F",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"entry",-1),L=t(`<ul><li>字符串：指定入口文件路径；</li><li>对象：对象形态功能比较完备，除了可以指定入口文件列表外，还可以指定入口依赖、Runtime 打包方式等；</li><li>函数：动态生成 Entry 配置信息，函数中可返回字符串、对象或数组；</li><li>数组：指明多个入口文件，数组项可以为上述介绍的文件路径字符串、对象、函数形式，Webpack 会将数组指明的入口全部打包成一个 Bundle。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 字符串形态</span>
    <span class="token literal-property property">home</span><span class="token operator">:</span> <span class="token string">&#39;./home.js&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 数组形态</span>
    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 对象形态</span>
    <span class="token literal-property property">personal</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;./personal.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;pages/personal.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&#39;shared&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunkLoading</span><span class="token operator">:</span> <span class="token string">&#39;jsonp&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">asyncChunks</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 函数形态</span>
    <span class="token function-variable function">admin</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;./admin.js&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象为例，支持以下属性配置：</p>`,3),M=t(`<li><p><code>import</code>：声明入口文件，支持路径字符串或路径数组(多入口)；</p></li><li><p><code>dependOn</code>：声明该入口的前置依赖 Bundle，从效果上看能够减少重复代码，优化构建产物质量。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/foo.js&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&quot;main&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>foo</code> 入口的 <code>dependOn</code> 属性指向 <code>main</code> 入口，此时 Webpack 认为：客户端在加载 <code>foo</code> 产物之前必然会加载 <code>main</code>，因此可以将重复的模块代码、运行时代码等都放到 <code>main</code> 产物，减少不必要的重复。</p><p><img src="https://cdn.yihuiblog.top/images/202208171421507.webp" alt="image.png"></p><p>左边为 <code>main</code> 产物，包含所有模块、运行时代码，与普通 Bundle 无异；右边为 <code>foo</code> 产物，代码结构非常清爽。作为对比，若不指定 <code>dependOn</code> 属性，则构建结果：</p><p><img src="https://cdn.yihuiblog.top/images/202208171421435.webp" alt="image.png"></p><p><u><code>dependOn</code> 适用于哪些有明确入口依赖的场景，例如我们构建了一个主框架 Bundle，其中包含了项目基本框架(如 React)，之后还需要为每个页面单独构建 Bundle，这些页面代码也都依赖于主框架代码，此时可用 <code>dependOn</code> 属性优化产物内容，减少代码重复。</u></p></li><li><p><code>runtime</code>：设置该入口的 Runtime Chunk（管理运行时代码），若该属性不为空，Webpack 会将该入口的运行时代码抽离成单独的 Bundle；</p><p>为支持产物代码在各种环境中正常运行，Webpack 会在产物文件中注入一系列运行时代码，用以支撑起整个应用框架。运行时代码的多寡取决于我们用到多少特性，例如：</p><ul><li>需要导入导出文件时，将注入 <code>__webpack_require__.r</code> 等；</li><li>使用异步加载时，将注入 <code>__webpack_require__.l</code> 等；</li></ul></li>`,3),O=n("code",null,"filename",-1),P={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputfilename",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"library",-1),T={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputlibrary",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"publicPath",-1),Y={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputpublicpath",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"chunkLoading",-1),D={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputchunkloading",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"false/jsonp/require/import",-1),V=n("code",null,"asyncChunks",-1),U={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputasyncchunks",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"true",-1),I=n("h3",{id:"使用-output-声明输出方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-output-声明输出方式","aria-hidden":"true"},"#"),s(" 使用 output 声明输出方式")],-1),$={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"output",-1),J={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputpath",target:"_blank",rel:"noopener noreferrer"},K={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputfilename",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"[name]/[hash]",-1),Z={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputpublicpath",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputclean",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"path",-1),an={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputlibrary",target:"_blank",rel:"noopener noreferrer"},en={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foutput%2F%23outputchunkloading",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"false/jsonp/require",-1),on=n("p",null,[s("对于 Web 应用场景，多数情况下我们只需要使用 "),n("code",null,"path/filename/publicPath"),s(" 即可满足需求，其它属性使用率不高，篇幅关系，此处不再赘述。")],-1),pn=n("h3",{id:"使用-target-设置构建目标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-target-设置构建目标","aria-hidden":"true"},"#"),s(" 使用 target 设置构建目标")],-1),cn={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Ftarget%2F",target:"_blank",rel:"noopener noreferrer"},ln=t("<li><code>node[[X].Y]</code>：编译为 Node 应用，此时将使用 Node 的 <code>require</code> 方法加载其它 Chunk，支持指定 Node 版本，如：<code>node12.13</code>；</li><li><code>async-node[[X].Y]</code>：编译为 Node 应用，与 <code>node</code> 相比主要差异在于：<code>async-node</code> 方式将以异步(Promise)方式加载异步模块(<code>node</code> 时直接使用 <code>require</code>)。支持指定 Node 版本，如：<code>async-node12.13</code>；</li><li><code>nwjs[[X].Y]</code>：编译为 NW.js 应用；</li><li><code>node-webkit[[X].Y]</code>：同 <code>nwjs</code>；</li>",4),rn=n("code",null,"electron[[X].Y]-main",-1),un={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fzh%2Fdocs%2Flatest%2Ftutorial%2Fprocess-model%23%E4%B8%BB%E8%BF%9B%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"electron[[X].Y]-renderer",-1),kn={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fzh%2Fdocs%2Flatest%2Ftutorial%2Fprocess-model%23%E6%B8%B2%E6%9F%93%E5%99%A8%E8%BF%9B%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"electron[[X].Y]-preload",-1),vn={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fzh%2Fdocs%2Flatest%2Ftutorial%2Fprocess-model%23preload-%E8%84%9A%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"},bn=n("li",null,[n("code",null,"web"),s("：构建为 Web 应用；")],-1),hn=n("li",null,[n("code",null,"esX"),s("：构建为特定版本 ECMAScript 兼容的代码，支持 "),n("code",null,"es5"),s("、"),n("code",null,"es2020"),s(" 等；")],-1),gn=n("code",null,"browserslist",-1),_n={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fbrowserslist%2Fbrowserslist%23queries",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"browserslist: 'last 2 major versions'",-1),fn=n("h3",{id:"使用-mode-短语-设置构建模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-mode-短语-设置构建模式","aria-hidden":"true"},"#"),s(" 使用 "),n("code",null,"mode"),s(" 短语 设置构建模式")],-1),jn={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fwebpack%2Fwebpack%2Fblob%2Fmain%2Flib%2Fconfig%2Fdefaults.js",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Fmode%2F",target:"_blank",rel:"noopener noreferrer"},wn=t('<ul><li><code>production</code>：默认值，生产模式，使用该值时 Webpack 会自动帮我们开启一系列优化措施：Three-Shaking、Terser 压缩代码、SplitChunk 提起公共代码，通常用于生产环境构建；</li><li><code>development</code>：开发模式，使用该值时 Webpack 会保留更语义化的 Module 与 Chunk 名称，更有助于调试，通常用于开发环境构建；</li><li><code>none</code>：关闭所有内置优化规则。</li></ul><p><code>mode</code> 规则比较简单，一般在开发模式使用 <code>mode = &#39;development&#39;</code>，生产模式使用 <code>mode = &#39;production&#39;</code> 即可。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><code>entry</code> 配置项支持字符串、对象、函数、数组等方式，其中对象形式下的 <code>dependOn/runtime</code> 规则比较复杂，建议深入学习；</li><li><code>output</code> 用于声明构建产物的输出规则；</li><li><code>target</code> 用于设置构建目标，不同目标会导致产物内容有轻微差异，支持 Node、Web、Electron、WebWorker 等场景；</li><li><code>mode</code> 构建模式，支持 <code>development/production/none</code> 三种值。</li></ul>',4);function qn(xn,Wn){const a=l("ExternalLinkIcon");return p(),c("div",null,[i,n("blockquote",null,[u,n("p",null,[n("a",d,[s("Webpack5 核心原理与应用实践"),e(a)])])]),k,n("p",null,[s("使用数组方式时，我们还可以借助 "),n("a",m,[s("webpack-merge"),e(a)]),s(" 工具简化配置逻辑，如：")]),v,n("ul",null,[n("li",null,[b,s("：命令行 "),n("a",h,[s("Flags"),e(a)]),s(" 参数，支持 "),g,s("/"),_,s("/"),y,s("/"),f,s(" 等。")])]),j,n("p",null,[s("这种模式下通常会将部分通用配置放在基础文件中，如上例的 "),F,s("，之后在其它文件中引入该模块并使用 "),n("a",w,[s("webpack-merge"),e(a)]),s(" 合并配置对象。")]),n("p",null,[q,s(" 是一个专为 Webpack 设计的数据合并("),x,s(")的工具，功能逻辑与 Lodash 的 "),n("a",W,[s("merge"),e(a)]),s(" 函数、 "),n("a",A,[s("Object.assign"),e(a)]),s(" 等相似，但支持更多特性，如：")]),E,n("p",null,[s("Webpack 的基本运行逻辑是从 "),C,s(" 开始，递归加载、构建所有项目资源，所以几乎所有项目都必须使用 "),n("a",B,[s("entry"),e(a)]),s(" 配置项明确声明项目入口。"),N,s(" 配置规则比较复杂，支持如下形态：")]),L,n("ul",null,[M,n("li",null,[n("p",null,[O,s("：效果与 "),n("a",P,[s("output.filename"),e(a)]),s(" 类同，用于声明该模块构建产物路径；")])]),n("li",null,[n("p",null,[S,s("：声明该入口的 "),n("a",T,[s("output.library"),e(a)]),s(" 配置，一般在构建 NPM Library 时使用；")])]),n("li",null,[n("p",null,[X,s("：效果与 "),n("a",Y,[s("output.publicPath"),e(a)]),s(" 相同，用于声明该入口文件的发布 URL；")])]),n("li",null,[n("p",null,[z,s("：效果与 "),n("a",D,[s("output.chunkLoading"),e(a)]),s(" 相同，用于声明异步模块加载的技术方案，支持 "),R,s(" 等值；")])]),n("li",null,[n("p",null,[V,s("：效果与 "),n("a",U,[s("output.asyncChunks"),e(a)]),s(" 相同，用于声明是否支持异步模块加载，默认值为 "),H,s("。")])])]),I,n("p",null,[s("Webpack 的 "),n("a",$,[s("output"),e(a)]),s(" 配置项用于声明：如何输出构建结果，比如产物放在什么地方、文件名是什么、文件编码等。"),G,s(" 支持许多子配置项，包括：")]),n("ul",null,[n("li",null,[n("a",J,[s("output.path"),e(a)]),s("：声明产物放在什么文件目录下；")]),n("li",null,[n("a",K,[s("output.filename"),e(a)]),s("：声明产物文件名规则，支持 "),Q,s(" 等占位符；")]),n("li",null,[n("a",Z,[s("output.publicPath"),e(a)]),s("：文件发布路径，在 Web 应用中使用率较高；")]),n("li",null,[n("a",nn,[s("output.clean"),e(a)]),s("：是否自动清除 "),sn,s(" 目录下的内容，调试时特别好用；")]),n("li",null,[n("a",an,[s("output.library"),e(a)]),s("：NPM Library 形态下的一些产物特性，例如：Library 名称、模块化(UMD/CMD 等)规范；")]),n("li",null,[n("a",en,[s("output.chunkLoading"),e(a)]),s("：声明加载异步模块的技术方案，支持 "),tn,s(" 等方式。")])]),on,pn,n("p",null,[s("虽然多数时候 Webpack 都被用于打包 Web 应用，但实际上 Webpack 还支持构建 Node、Electron、NW.js、WebWorker 等应用形态，这一特性主要通过 "),n("a",cn,[s("target"),e(a)]),s(" 配置控制，支持如下数值：")]),n("ul",null,[ln,n("li",null,[rn,s("：构建为 Electron "),n("a",un,[s("主进程"),e(a)]),s("；")]),n("li",null,[dn,s("：构建为 Electron "),n("a",kn,[s("渲染进程"),e(a)]),s("；")]),n("li",null,[mn,s("：构建为 Electron Preload "),n("a",vn,[s("脚本"),e(a)]),s("；")]),bn,hn,n("li",null,[gn,s("：根据浏览器平台与版本，推断需要兼容的 ES 特性，数据来源于 "),n("a",_n,[s("Browserslist"),e(a)]),s(" 项目，用法如："),yn,s("。")])]),fn,n("p",null,[s("Webpack "),n("a",jn,[s("内置"),e(a)]),s(" 了许多构建优化策略，我们可以通过 "),n("a",Fn,[s("mode"),e(a)]),s(" 配置项切换默认优化规则，支持如下值：")]),wn])}const Cn=o(r,[["render",qn],["__file","Webpack 配置及规则.html.vue"]]);export{Cn as default};
