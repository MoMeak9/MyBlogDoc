import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e as a,r as l}from"./app.d7b34baa.js";const i={},u=a(`<h1 id="牛客网刷题01" tabindex="-1"><a class="header-anchor" href="#牛客网刷题01" aria-hidden="true">#</a> 牛客网刷题01</h1><h3 id="_1-修改this指向" tabindex="-1"><a class="header-anchor" href="#_1-修改this指向" aria-hidden="true">#</a> 1. 修改this指向</h3><blockquote><p>封装函数 f，使 f 的 this 指向指定的对象。</p></blockquote><p>这里给出三种写法，哪种都可以。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// apply修改this作用域</span>
<span class="token keyword">function</span> <span class="token function">bindThis</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> oTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>oTarget<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// call修改this作用域</span>
<span class="token keyword">function</span> <span class="token function">bindThis</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> oTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>oTarget<span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// bind修改this作用域</span>
<span class="token keyword">function</span> <span class="token function">bindThis</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> oTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>oTarget<span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 手动调用</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ol><li>apply、call、bind区别</li></ol><blockquote><p>apply、call、bind的作用都是修改执行上下文 apply、call都是返回函数立即执行的<u>结果</u>，其中apply第二个参数之后是数组Array，call第二个参数之后是逐个参数。 bind返回的是函数，需要手动执行结果。第二个参数之后是逐个参数。</p></blockquote><h3 id="_2-获取url参数" tabindex="-1"><a class="header-anchor" href="#_2-获取url参数" aria-hidden="true">#</a> 2. 获取url参数</h3><blockquote><p>获取 url 中的参数</p><ol><li>指定参数名称，返回该参数的值 或者 空字符串</li><li>不指定参数名称，返回全部的参数对象 或者 {}</li><li>如果存在多个同名参数，则返回数组</li></ol><p>输入：<code>http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe key</code></p><p>输出：[1, 2, 3]</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getUrlParam</span><span class="token punctuation">(</span><span class="token parameter">sUrl<span class="token punctuation">,</span> sKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment">// 获取?号后面#号前面的值</span>
        <span class="token keyword">let</span> query <span class="token operator">=</span> sUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token comment">// 如果query存在</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> arr <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span>
          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>
              <span class="token comment">// 数组</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>sKey <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> sKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
              <span class="token comment">// 对象</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> newObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  newObj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                  newObj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 判断sKey有没有值</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>sKey <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">case</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">return</span> newArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> newObj
          <span class="token punctuation">}</span>
        <span class="token comment">// 如果query不存在，判断sKey是否存在，如果存在就返回空对象，如果不存在就返回空字符串</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> sKey <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>url的组成部分</li></ul><blockquote><p><code>https://user:pass@www.baidu.com:80/index.html?type=1&amp;name=2#haha</code><code>http/https</code> 是协议 <code>user:pass@</code> 是登录认证 <code>www.baidu.com</code> 是域名，服务器地址 <code>:80</code> 是端口号 <code>/index.html</code> 是请求资源文件路径 <code>?type=1&amp;name=2</code> 是查询字符串，携带参数，给服务器传的内容。 <code>#haha</code> 是哈希，片段标识符</p></blockquote><ul><li>split方法</li></ul><blockquote><p>字符串分割成数组的方法，里面的参数是以什么分割，如果不传就是空字符串为分割，返回值是一个数组。</p></blockquote><ul><li>query部分可以使用正则</li></ul><h3 id="_3-dom节点查找" tabindex="-1"><a class="header-anchor" href="#_3-dom节点查找" aria-hidden="true">#</a> 3. dom节点查找</h3><blockquote><p>查找两个节点的最近的一个共同父节点，可以包括节点自身</p><p>输入描述: oNode1 和 oNode2 在同一文档中，且不会为相同的节点</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commonParentNode</span><span class="token punctuation">(</span><span class="token parameter">oNode1<span class="token punctuation">,</span> oNode2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oNode2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> oNode1
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 一直将node1向上升</span>
        <span class="token keyword">return</span> <span class="token function">commonParentNode</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">.</span>parentNode<span class="token punctuation">,</span>oNode2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>contains API</li></ul>`,22),r={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FNode%2Fcontains",target:"_blank",rel:"noopener noreferrer"},k=a(`<ul><li>递归(参考数据结构树)</li></ul><h3 id="_4-根据包名-在指定空间中创建对象" tabindex="-1"><a class="header-anchor" href="#_4-根据包名-在指定空间中创建对象" aria-hidden="true">#</a> 4. 根据包名，在指定空间中创建对象</h3><blockquote><p>根据包名，在指定空间中创建对象 输入描述: namespace({a: {test: 1, b: 2}}, &#39;a.b.c.d&#39;) 输出描述: {a: {test: 1, b: {c: {d: {}}}}}</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">namespace</span><span class="token punctuation">(</span><span class="token parameter">oNamespace<span class="token punctuation">,</span> sPackage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> scope <span class="token operator">=</span> sPackage<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> ns <span class="token operator">=</span> oNamespace
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> scope<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果对象中没有该元素，或者不是对象，那么就置为空对象</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ns<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>scope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ns<span class="token punctuation">[</span>scope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ns<span class="token punctuation">[</span>scope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 然后继续往下找</span>
        ns <span class="token operator">=</span> ns<span class="token punctuation">[</span>scope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> oNamespace
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考察知识点：</p><ul><li>判断对象的自身是否有某属性(hasOwnProperty)</li><li>hasOwnProperty / typeof / in / instanceof 的区别</li></ul><blockquote><ul><li>hasOwnProperty 是判断对象自身有没有某属性，不包含原型链的方法。</li><li>in 是判断对象在自身和原型链上有没有该方法。</li><li>instanceof 是判断对象在原型链上有没有该方法。</li><li>typeof 判断操作数的类型，但是null也会判断为&quot;object&quot;</li></ul></blockquote><ul><li>准确判断某值的类型</li></ul><blockquote><p>Object.prototype.toString.call(123) === &quot;[object Number]&quot; Object.prototype.toString.call(&#39;aaa&#39;) === &quot;[object String]&quot; Object.prototype.toString.call(true) === &quot;[object Boolean]&quot; Object.prototype.toString.call(undefined) === &quot;[object Undefined]&quot; Object.prototype.toString.call(null) === &#39;[object Null]&#39; Object.prototype.toString.call({}) === &#39;[object Object]&#39; Object.prototype.toString.call([]) === &#39;[object Array]&#39; Object.prototype.toString.call(Math) === &quot;[object Math]&quot; Object.prototype.toString.call(new Date()) === &quot;[object Date]&quot; Object.prototype.toString.call(new RegExp) === &quot;[object RegExp]&quot;</p></blockquote><ul><li>递归(对象的嵌套参考数据结构中的树)</li></ul><h3 id="_5-数组去重" tabindex="-1"><a class="header-anchor" href="#_5-数组去重" aria-hidden="true">#</a> 5. 数组去重</h3><blockquote><p>为 Array 对象添加一个去除重复项的方法 输入 [false, true, undefined, null, NaN, 0, 1, {}, {}, &#39;a&#39;, &#39;a&#39;, NaN] 输出 [false, true, undefined, null, NaN, 0, 1, {}, {}, &#39;a&#39;]</p></blockquote><p><u>这个题，狗就狗在，还有NaN</u></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：终极思路</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">uniq</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：includes避免NaN的问题</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">uniq</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法三：使用reduce+includes</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">uniq</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> prev
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法四：普通思路，遍历之后比较值</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">uniq</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// == -1 有两种情况，一种是NaN，一种是有相同值</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是NaN</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// flag是标记，第一个NaN就进，之后的就不进去</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
                  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  
                  flag <span class="token operator">=</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>uniq方法中的this指向哪里?</li></ul><blockquote><p>Array构造函数的原型方法中的this指的是数组实例。</p></blockquote><ul><li>Set的特性</li></ul>`,18),d={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fc36684658aba",target:"_blank",rel:"noopener noreferrer"},v=a(`<ul><li>(NaN === NaN) =&gt; false</li></ul><blockquote><p>NaN ： is not a number，不等于自己 typeof NaN =&gt; number Object.prototype.toString.call(NaN) =&gt; &quot;[object Number]&quot; ES6 新增方法：Number.isNaN() 用来判断是否属于数字</p></blockquote><h3 id="_6-斐波那契数列" tabindex="-1"><a class="header-anchor" href="#_6-斐波那契数列" aria-hidden="true">#</a> 6. 斐波那契数列</h3><blockquote><p>用 JavaScript 实现斐波那契数列函数,返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等</p></blockquote><p>斐波那契数列基本学js都会，1 1 2 3 5 8 13，后一个是前两个的和。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：递归思路</span>
<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：迭代思路</span>
<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2
        num1 <span class="token operator">=</span> num2
        num2 <span class="token operator">=</span> sum
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

<span class="token comment">// 上面写法可以过oj，但是如果数字大点就超级慢，使用缓存很可</span>
<span class="token comment">// 方法三：递归优化思路</span>
<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 有缓存就直接读缓存</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 没有缓存算完之后存入缓存</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> cache<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>cache<span class="token punctuation">)</span>
    cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> temp
    <span class="token keyword">return</span> temp
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>递归</li></ul><h3 id="_7-时间格式化输出" tabindex="-1"><a class="header-anchor" href="#_7-时间格式化输出" aria-hidden="true">#</a> 7. 时间格式化输出</h3><blockquote><p>题目描述 按所给的时间格式输出指定的时间 格式说明 对于 2014.09.05 13:14:20 yyyy: 年份，2014 yy: 年份，14 MM: 月份，补满两位，09 M: 月份, 9 dd: 日期，补满两位，05 d: 日期, 5 HH: 24制小时，补满两位，13 H: 24制小时，13 hh: 12制小时，补满两位，01 h: 12制小时，1 mm: 分钟，补满两位，14 m: 分钟，14 ss: 秒，补满两位，20 s: 秒，20 w: 星期，为 [&#39;日&#39;, &#39;一&#39;, &#39;二&#39;, &#39;三&#39;, &#39;四&#39;, &#39;五&#39;, &#39;六&#39;] 中的某一个，本 demo 结果为 五</p><p>输入 formatDate(new Date(1409894060000), &#39;yyyy-MM-dd HH:mm:ss 星期w&#39;)</p><p>输出 2014-09-05 13:14:20 星期五</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> month <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">let</span> day <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> hour <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> minutes <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> second <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;日&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;一&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;二&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;四&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;五&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;六&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;yyyy&#39;</span><span class="token operator">:</span> year<span class="token punctuation">,</span>
      <span class="token string-property property">&#39;yy&#39;</span><span class="token operator">:</span> year<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;MM&#39;</span><span class="token operator">:</span> <span class="token function">ten</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;M&#39;</span><span class="token operator">:</span> month<span class="token punctuation">,</span>
      <span class="token string-property property">&#39;dd&#39;</span><span class="token operator">:</span> <span class="token function">ten</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;d&#39;</span><span class="token operator">:</span> day<span class="token punctuation">,</span>
      <span class="token string-property property">&#39;HH&#39;</span><span class="token operator">:</span> <span class="token function">ten</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;H&#39;</span><span class="token operator">:</span> hour<span class="token punctuation">,</span>
      <span class="token string-property property">&#39;hh&#39;</span><span class="token operator">:</span> <span class="token function">ten</span><span class="token punctuation">(</span>hour <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;h&#39;</span><span class="token operator">:</span> hour <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;mm&#39;</span><span class="token operator">:</span> <span class="token function">ten</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;m&#39;</span><span class="token operator">:</span> minutes<span class="token punctuation">,</span>
      <span class="token string-property property">&#39;ss&#39;</span><span class="token operator">:</span> <span class="token function">ten</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;s&#39;</span><span class="token operator">:</span> second<span class="token punctuation">,</span>
      <span class="token string-property property">&#39;w&#39;</span><span class="token operator">:</span> week<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>date<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str
  <span class="token punctuation">}</span>

  <span class="token comment">// 不足10的前面要加0</span>
  <span class="token keyword">const</span> <span class="token function-variable function">ten</span> <span class="token operator">=</span> <span class="token parameter">num</span>  <span class="token operator">=&gt;</span> num <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token operator">?</span> num <span class="token operator">:</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考察知识点：</p><ul><li>获取年月日周时分秒的系统API</li><li>格式统一处理</li><li>字符串替换 (replace)</li></ul><h3 id="_8-获取字符串的长度" tabindex="-1"><a class="header-anchor" href="#_8-获取字符串的长度" aria-hidden="true">#</a> 8. 获取字符串的长度</h3><blockquote><p>题目描述 如果第二个参数 bUnicode255For1 === true，则所有字符长度为 1 否则如果字符 Unicode 编码 &gt; 255 则长度为 2 输入 hello world, 牛客&#39;, false 输出 17</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">strLength</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> bUnicode255For1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>bUnicode255For1<span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">255</span><span class="token punctuation">)</span> len<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> len
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>获取字符的 Unicode 编码 API —— <u>str.charCodeAt()</u></li></ul><h3 id="_9-邮箱字符串判断" tabindex="-1"><a class="header-anchor" href="#_9-邮箱字符串判断" aria-hidden="true">#</a> 9. 邮箱字符串判断</h3><blockquote><p>题目描述 判断输入是否是正确的邮箱格式</p></blockquote><p>考察正则的一道题目，方法也是多种多样，这里只有一种简单的参考。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ^ 表示开头</span>
<span class="token comment">// [] 表示匹配字符的范围</span>
<span class="token comment">// \\w 表示正常符号 [0-9a-zA-Z_]</span>
<span class="token comment">// \\. 是对任意符.进行转义，表示字符.</span>
<span class="token comment">// + 表示前面的表达式，一次到多次</span>
<span class="token keyword">function</span> <span class="token function">isAvailableEmail</span><span class="token punctuation">(</span><span class="token parameter">sEmail</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\w\\.]+@\\w+\\.\\w+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sEmail<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>邮箱格式</li><li>正则表达式的规则和匹配</li></ul><h3 id="_10-颜色字符串转换" tabindex="-1"><a class="header-anchor" href="#_10-颜色字符串转换" aria-hidden="true">#</a> 10. 颜色字符串转换</h3><blockquote><p>题目描述 将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff</p><ol><li>rgb 中每个 , 后面的空格数量不固定</li><li>十六进制表达式使用六位小写字母</li><li>如果输入不符合 rgb 格式，返回原始输入</li></ol><p>输入 ：&#39;rgb(255, 255, 255)&#39; 输出 ：<code>#ffffff</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">rgb2hex</span><span class="token punctuation">(</span><span class="token parameter">sRGB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 正则匹配获取!!三个数值,\\d填充</span>
    <span class="token keyword">let</span> reg <span class="token operator">=</span> sRGB<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">)</span> <span class="token keyword">return</span> sRGB<span class="token punctuation">;</span>
    <span class="token comment">// 字符串拼接</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;#&#39;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> reg<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将字符串转成数字</span>
      <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>reg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 然后转化成16进制</span>
        str <span class="token operator">+=</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;=</span> <span class="token number">16</span> <span class="token operator">?</span> m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sRGB
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>toString的进制转换</li></ul><blockquote><p>颜色是16进制，所以toString(16)可以得到结果</p></blockquote><ul><li>字符串中如何截取数字(不限于正则) match</li></ul><p><strong>注意：一定要理解之后去程序里面运行一遍。</strong></p>`,32);function m(b,y){const p=l("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("查看dom元素包含关系，包含返回true，不包含返回false "),n("a",r,[s("参考MDN"),t(p)])])]),k,n("blockquote",null,[n("p",null,[s("Set存储的成员是唯一的，不是重复的，如果有重复会自动过滤掉. "),n("a",d,[s("ES6（七）—— Set & Map"),t(p)])])]),v])}const h=e(i,[["render",m],["__file","牛客网刷题1-10.html.vue"]]);export{h as default};
