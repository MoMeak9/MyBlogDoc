import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as p,a as n,b as s,d as a,e as o,r as l}from"./app.d7b34baa.js";const i={},r=n("h1",{id:"深入理解jsx",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#深入理解jsx","aria-hidden":"true"},"#"),s(" 深入理解JSX")],-1),d=n("p",null,[n("code",null,"JSX"),s("在编译时会被"),n("code",null,"Babel"),s("编译为"),n("code",null,"React.createElement"),s("方法。这也是为什么在每个使用"),n("code",null,"JSX"),s("的JS文件中，你必须显式的声明。但在React 17 中，已经不需要显式导入React了。")],-1),u={href:"https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154httpsgithubcombabelbabelpull11154",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"提供了一个全新的，重构过的 JSX 转换的版本",-1),m=n("li",null,"使用全新的转换，你可以单独使用 JSX 而无需引入 React。",-1),v=n("li",null,"根据你的配置，JSX 的编译输出可能会略微改善 bundle 的大小。",-1),b={href:"https://zh-hans.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"JSX",-1),_=n("code",null,"React.createElement",-1),f={href:"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"Babel",-1),g=n("code",null,"JSX",-1),E=n("code",null,"React.createElement",-1),w=o(`<h2 id="react-createelement-做了什么" tabindex="-1"><a class="header-anchor" href="#react-createelement-做了什么" aria-hidden="true">#</a> React.createElement 做了什么</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> propName<span class="token punctuation">;</span>

  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 config 处理后赋值给 props</span>
    <span class="token comment">// ...省略</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> childrenLength <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token comment">// 处理 children，会被赋值给props.children</span>
  <span class="token comment">// ...省略</span>

  <span class="token comment">// 处理 defaultProps</span>
  <span class="token comment">// ...省略</span>

  <span class="token keyword">return</span> <span class="token function">ReactElement</span><span class="token punctuation">(</span>
    type<span class="token punctuation">,</span>
    key<span class="token punctuation">,</span>
    ref<span class="token punctuation">,</span>
    self<span class="token punctuation">,</span>
    source<span class="token punctuation">,</span>
    ReactCurrentOwner<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">ReactElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 标记这是个 React Element</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span>

    <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> key<span class="token punctuation">,</span>
    <span class="token literal-property property">ref</span><span class="token operator">:</span> ref<span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> props<span class="token punctuation">,</span>
    <span class="token literal-property property">_owner</span><span class="token operator">:</span> owner<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，<code>React.createElement</code>最终会调用<code>ReactElement</code>方法返回一个包含组件数据的对象，该对象有个参数<code>$$typeof: REACT_ELEMENT_TYPE</code>标记了该对象是个<code>React Element</code>。</p>`,3),R=n("code",null,"React",-1),j=n("code",null,"React Element",-1),x={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react/src/ReactElement.js#L547",target:"_blank",rel:"noopener noreferrer"},C=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isValidElement</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token keyword">typeof</span> object <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
    object <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
    object<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span> <span class="token operator">===</span> <span class="token constant">REACT_ELEMENT_TYPE</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>$$typeof === REACT_ELEMENT_TYPE</code>的非<code>null</code>对象就是一个合法的<code>React Element</code>。换言之，在<code>React</code>中，所有<code>JSX</code>在运行时的返回结果（即<code>React.createElement()</code>的返回值）都是<code>React Element</code>。</p><h2 id="react-component-分类" tabindex="-1"><a class="header-anchor" href="#react-component-分类" aria-hidden="true">#</a> React Component 分类</h2><p><code>ClassComponent</code>对应的<code>Element</code>的<code>type</code>字段为<code>AppClass</code>自身。</p><p><code>FunctionComponent</code>对应的<code>Element</code>的<code>type</code>字段为<code>AppFunc</code>自身。</p><p>同时，AppClass 和 AppFunc 都是函数类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>AppClass <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
AppFunc <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以无法通过引用类型区分<code>ClassComponent</code>和<code>FunctionComponent</code>。<code>React</code>通过<code>ClassComponent</code>实例原型上的<code>isReactComponent</code>变量判断是否是<code>ClassComponent</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">ClassComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="由jsx生成fiber节点" tabindex="-1"><a class="header-anchor" href="#由jsx生成fiber节点" aria-hidden="true">#</a> 由JSX生成Fiber节点</h2><p>从上面的内容我们可以发现，<code>JSX</code>是一种描述当前组件内容的数据结构，他不包含组件<strong>schedule</strong>、<strong>reconcile</strong>、<strong>render</strong>所需的相关信息。</p><p>比如如下信息就不包括在<code>JSX</code>中：</p><ul><li>组件在更新中的<code>优先级</code></li><li>组件的<code>state</code></li><li>组件被打上的用于<strong>Renderer</strong>的<code>标记</code></li></ul><p><strong>这些内容都包含在<code>Fiber节点</code>中。</strong></p><p>所以，在组件<code>mount</code>时，<code>Reconciler</code>根据<code>JSX</code>描述的组件内容生成组件对应的<code>Fiber节点</code>。</p><p>在<code>update</code>时，<code>Reconciler</code> 将<code>JSX</code>与<code>Fiber节点</code>保存的数据对比，生成组件对应的<code>Fiber节点</code>，并根据对比结果为<code>Fiber节点</code>打上<code>标记</code>。</p>`,16);function S(J,X){const e=l("ExternalLinkIcon");return c(),p("div",null,[r,d,n("blockquote",null,[n("p",null,[s("React 17 发布在即，尽管我们想对 JSX 的转换进行改进，但我们不想打破现有的配置。于是我们选择"),n("a",u,[s("与 Babel 合作"),a(e)]),s(" ，为想要升级的开发者"),k,s("。")]),n("ul",null,[m,v,n("li",null,[s("它将减少你需要学习 React 概念的数量，以备未来之需。 来源"),n("a",b,[s("介绍全新的 JSX 转换"),a(e)])])])]),n("p",null,[h,s("并不是只能被编译为"),_,s("方法，你可以通过"),n("a",f,[s("@babel/plugin-transform-react-jsx"),a(e)]),s("插件显式告诉"),y,s("编译时需要将"),g,s("编译为什么函数的调用（默认为"),E,s("）。")]),w,n("p",null,[R,s("提供了验证合法"),j,s("的全局API "),n("a",x,[s("React.isValidElement (opens new window)"),a(e)]),s("：")]),C])}const A=t(i,[["render",S],["__file","深入理解JSX.html.vue"]]);export{A as default};
