import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as s,b as n,d as t,e,r as l}from"./app.d7b34baa.js";const i={},r=e('<h1 id="创建型模式-creation-pattern" tabindex="-1"><a class="header-anchor" href="#创建型模式-creation-pattern" aria-hidden="true">#</a> 创建型模式 Creation Pattern</h1><h2 id="abstract-factory-抽象工厂" tabindex="-1"><a class="header-anchor" href="#abstract-factory-抽象工厂" aria-hidden="true">#</a> Abstract Factory 抽象工厂</h2><p><strong>抽象工厂模式</strong>是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。</p><p>The Abstract factory pattern is a creative design pattern that creates a series of related objects without specifying their concrete classes.</p><img src="https://refactoringguru.cn/images/patterns/diagrams/abstract-factory/structure-indexed.png" alt="抽象工厂设计模式" style="zoom:67%;"><ol><li><strong>抽象产品</strong> （Abstract Product） 为构成系列产品的一组不同但相关的产品声明接口。</li><li><strong>具体产品</strong> （Concrete Product） 是抽象产品的多种不同类型实现。 所有变体 （维多利亚/现代） 都必须实现相应的抽象产品 （椅子/沙发）。</li><li><strong>抽象工厂</strong> （Abstract Factory） 接口声明了一组创建各种抽象产品的方法。</li><li><strong>具体工厂</strong> （Concrete Factory） 实现抽象工厂的构建方法。 每个具体工厂都对应特定产品变体， 且仅创建此种产品变体。</li><li>尽管具体工厂会对具体产品进行初始化， 其构建方法签名必须返回相应的<em>抽象</em>产品。 这样， 使用工厂类的客户端代码就不会与工厂创建的特定产品变体耦合。 <strong>客户端</strong> （Client） 只需通过抽象接口调用工厂和产品对象， 就能与任何具体工厂/产品变体交互。</li></ol><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h3><ul><li>如果代码需要与多个不同系列的相关产品交互， 但是由于无法提前获取相关信息， 或者出于对未来扩展性的考虑， 你不希望代码基于产品的具体类进行构建， 在这种情况下， 你可以使用抽象工厂。</li><li>如果你有一个基于一组抽象方法的类， 且其主要功能因此变得不明确， 那么在这种情况下可以考虑使用抽象工厂模式。</li></ul><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><p><strong>Advantage</strong></p><ul><li>你可以确保同一工厂生成的产品相互匹配。</li><li>你可以避免客户端和具体产品代码的耦合coupling。</li><li><em>单一职责原则</em>。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。</li><li><em>开闭原则</em>。 向应用程序中引入新产品变体时， 你无需修改客户端代码。</li></ul><p><strong>Disadvantage</strong></p><ul><li>由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂。</li></ul><h3 id="关系" tabindex="-1"><a class="header-anchor" href="#关系" aria-hidden="true">#</a> 关系</h3>',14),u={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},d={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},k={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},v={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},b={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},m={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},f=s("em",null,"抽象工厂",-1),g=s("em",null,"生成器",-1),h={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},_={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},y={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},w={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},C={href:"https://refactoringguru.cn/design-patterns/facade",target:"_blank",rel:"noopener noreferrer"},q={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},A={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},P=s("em",null,"桥接",-1),x=s("em",null,"抽象工厂",-1),B={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},N={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},L={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},T={href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"},S=e(`<h3 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> annotations
<span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod


<span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">create_product_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> AbstractProductA<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">create_product_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> AbstractProductB<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">ConcreteFactory1</span><span class="token punctuation">(</span>AbstractFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">create_product_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> AbstractProductA<span class="token punctuation">:</span>
        <span class="token keyword">return</span> ConcreteProductA1<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">create_product_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> AbstractProductB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> ConcreteProductB1<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">ConcreteFactory2</span><span class="token punctuation">(</span>AbstractFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">create_product_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> AbstractProductA<span class="token punctuation">:</span>
        <span class="token keyword">return</span> ConcreteProductA2<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">create_product_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> AbstractProductB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> ConcreteProductB2<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">AbstractProductA</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">useful_function_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    

<span class="token keyword">class</span> <span class="token class-name">ConcreteProductA1</span><span class="token punctuation">(</span>AbstractProductA<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">useful_function_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;The result of the product A1.&quot;</span>


<span class="token keyword">class</span> <span class="token class-name">ConcreteProductA2</span><span class="token punctuation">(</span>AbstractProductA<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">useful_function_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;The result of the product A2.&quot;</span>


<span class="token keyword">class</span> <span class="token class-name">AbstractProductB</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">useful_function_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Product B is able to do its own thing...
        &quot;&quot;&quot;</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">another_useful_function_b</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> collaborator<span class="token punctuation">:</span> AbstractProductA<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    
<span class="token keyword">class</span> <span class="token class-name">ConcreteProductB1</span><span class="token punctuation">(</span>AbstractProductB<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">useful_function_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;The result of the product B1.&quot;</span>

    <span class="token keyword">def</span> <span class="token function">another_useful_function_b</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> collaborator<span class="token punctuation">:</span> AbstractProductA<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> collaborator<span class="token punctuation">.</span>useful_function_a<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;The result of the B1 collaborating with the (</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span>


<span class="token keyword">class</span> <span class="token class-name">ConcreteProductB2</span><span class="token punctuation">(</span>AbstractProductB<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">useful_function_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;The result of the product B2.&quot;</span>

    <span class="token keyword">def</span> <span class="token function">another_useful_function_b</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> collaborator<span class="token punctuation">:</span> AbstractProductA<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> collaborator<span class="token punctuation">.</span>useful_function_a<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;The result of the B2 collaborating with the (</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span>


<span class="token keyword">def</span> <span class="token function">client_code</span><span class="token punctuation">(</span>factory<span class="token punctuation">:</span> AbstractFactory<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    product_a <span class="token operator">=</span> factory<span class="token punctuation">.</span>create_product_a<span class="token punctuation">(</span><span class="token punctuation">)</span>
    product_b <span class="token operator">=</span> factory<span class="token punctuation">.</span>create_product_b<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>product_b<span class="token punctuation">.</span>useful_function_b<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>product_b<span class="token punctuation">.</span>another_useful_function_b<span class="token punctuation">(</span>product_a<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Client: Testing client code with the first factory type:&quot;</span><span class="token punctuation">)</span>
    client_code<span class="token punctuation">(</span>ConcreteFactory1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Client: Testing the same client code with the second factory type:&quot;</span><span class="token punctuation">)</span>
    client_code<span class="token punctuation">(</span>ConcreteFactory2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="factory-method-工厂方法" tabindex="-1"><a class="header-anchor" href="#factory-method-工厂方法" aria-hidden="true">#</a> Factory Method 工厂方法</h2><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><p>The factory method pattern is a creative design pattern that provides a method to create an object in a parent class, allowing subclasses to determine the type of object to instantiate.</p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/structure-indexed.png" alt="工厂方法模式结构" style="zoom:67%;"><ol><li><p><strong>产品</strong> （Product） 将会对接口进行声明。 对于所有由创建者及其子类构建的对象， 这些接口都是通用的。</p></li><li><p><strong>具体产品</strong> （Concrete Products） 是产品接口的不同实现。</p></li><li><p><strong>创建者</strong> （Creator） 类声明返回产品对象的工厂方法。 该方法的返回对象类型必须与产品接口相匹配。</p><p>你可以将工厂方法声明为抽象方法， 强制要求每个子类以不同方式实现该方法。 或者， 你也可以在基础工厂方法中返回默认产品类型。</p><p>注意， 尽管它的名字是创建者， 但它最主要的职责并<strong>不是</strong>创建产品。 一般来说， 创建者类包含一些与产品相关的核心业务逻辑。 工厂方法将这些逻辑处理从具体产品类中分离出来。 打个比方， 大型软件开发公司拥有程序员培训部门。 但是， 这些公司的主要工作还是编写代码， 而非生产程序员。</p></li><li><p><strong>具体创建者</strong> （Concrete Creators） 将会重写基础工厂方法， 使其返回不同类型的产品。</p><p>注意， 并不一定每次调用工厂方法都会<strong>创建</strong>新的实例。 工厂方法也可以返回缓存、 对象池或其他来源的已有对象。</p></li></ol><h3 id="场景-1" tabindex="-1"><a class="header-anchor" href="#场景-1" aria-hidden="true">#</a> 场景</h3><ul><li>当你在编写代码的过程中， 如果无法预知对象确切类别及其依赖关系时， 可使用工厂方法。</li><li>如果你希望用户能扩展你软件库或框架的内部组件， 可使用工厂方法。</li><li>如果你希望复用现有对象来节省系统资源， 而不是每次都重新创建对象， 可使用工厂方法。</li></ul><h3 id="优缺点-1" tabindex="-1"><a class="header-anchor" href="#优缺点-1" aria-hidden="true">#</a> 优缺点</h3><p><strong>Advantage</strong></p><ul><li>你可以避免创建者和具体产品之间的紧密耦合。</li><li><em>单一职责原则</em>。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</li><li>开闭原则。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</li></ul><p><strong>Disadvantage</strong></p><ul><li>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</li></ul><h3 id="关系-1" tabindex="-1"><a class="header-anchor" href="#关系-1" aria-hidden="true">#</a> 关系</h3>`,15),F={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},D={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},I={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},M={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},j={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},z={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},V={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},E={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},W={href:"https://refactoringguru.cn/design-patterns/iterator",target:"_blank",rel:"noopener noreferrer"},R={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},U=s("em",null,"原型",-1),G={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},H={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},J={href:"https://refactoringguru.cn/design-patterns/template-method",target:"_blank",rel:"noopener noreferrer"},K=s("em",null,"工厂方法",-1),O=s("em",null,"模板方法",-1),Q=e(`<h3 id="code-1" tabindex="-1"><a class="header-anchor" href="#code-1" aria-hidden="true">#</a> Code</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod


<span class="token keyword">class</span> <span class="token class-name">Creator</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">factory_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">some_operation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        product <span class="token operator">=</span> self<span class="token punctuation">.</span>factory_method<span class="token punctuation">(</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;Creator: The same creator&#39;s code has just worked with </span><span class="token interpolation"><span class="token punctuation">{</span>product<span class="token punctuation">.</span>operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token keyword">return</span> result

<span class="token keyword">class</span> <span class="token class-name">ConcreteCreator1</span><span class="token punctuation">(</span>Creator<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">factory_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Product<span class="token punctuation">:</span>
        <span class="token keyword">return</span> ConcreteProduct1<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">ConcreteCreator2</span><span class="token punctuation">(</span>Creator<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">factory_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Product<span class="token punctuation">:</span>
        <span class="token keyword">return</span> ConcreteProduct2<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">operation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span>Product<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">operation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;{Result of the ConcreteProduct1}&quot;</span>


<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span>Product<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">operation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;{Result of the ConcreteProduct2}&quot;</span>


<span class="token keyword">def</span> <span class="token function">client_code</span><span class="token punctuation">(</span>creator<span class="token punctuation">:</span> Creator<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Client: I&#39;m not aware of the creator&#39;s class, but it still works.\\n&quot;</span></span>
          <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>creator<span class="token punctuation">.</span>some_operation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;App: Launched with the ConcreteCreator1.&quot;</span><span class="token punctuation">)</span>
    client_code<span class="token punctuation">(</span>ConcreteCreator1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;App: Launched with the ConcreteCreator2.&quot;</span><span class="token punctuation">)</span>
    client_code<span class="token punctuation">(</span>ConcreteCreator2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="builder-生成器" tabindex="-1"><a class="header-anchor" href="#builder-生成器" aria-hidden="true">#</a> Builder 生成器</h2><p><strong>生成器模式</strong>是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p><p>Builder pattern is a creative design pattern that allows you to create complex objects in steps. This pattern allows you to generate objects of different types and forms using the same creation code.</p><img src="https://refactoringguru.cn/images/patterns/diagrams/builder/structure-indexed.png?id=44b3d763ce91dbada5d8" alt="生成器设计模式结构" style="zoom:67%;"><ol><li><strong>生成器</strong> （Builder） 接口声明在所有类型生成器中通用的产品构造步骤。</li><li><strong>具体生成器</strong> （Concrete Builders） 提供构造过程的不同实现。 具体生成器也可以构造不遵循通用接口的产品。</li><li><strong>产品</strong> （Products） 是最终生成的对象。 由不同生成器构造的产品无需属于同一类层次结构或接口。</li><li><strong>主管</strong> （Director） 类定义调用构造步骤的顺序， 这样你就可以创建和复用特定的产品配置。</li><li><strong>客户端</strong> （Client） 必须将某个生成器对象与主管类关联。 一般情况下， 你只需通过主管类构造函数的参数进行一次性关联即可。 此后主管类就能使用生成器对象完成后续所有的构造任务。 但在客户端将生成器对象传递给主管类制造方法时还有另一种方式。 在这种情况下， 你在使用主管类生产产品时每次都可以使用不同的生成器。</li></ol><h3 id="场景-2" tabindex="-1"><a class="header-anchor" href="#场景-2" aria-hidden="true">#</a> 场景</h3><ul><li>使用生成器模式可避免 “重叠构造函数 （telescopic constructor）” 的出现。</li><li>当你希望使用代码创建不同形式的产品 （例如石头或木头房屋） 时， 可使用生成器模式。</li><li>使用生成器构造组合树或其他复杂对象。</li></ul><h3 id="优缺点-2" tabindex="-1"><a class="header-anchor" href="#优缺点-2" aria-hidden="true">#</a> 优缺点</h3><ul><li>你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。</li><li>生成不同形式的产品时， 你可以复用相同的制造代码。</li><li>单一职责原则（Single responsibility principle）。 你可以将复杂构造代码从产品的业务逻辑中分离出来。</li></ul><p><strong>Disadvantage:</strong></p><ul><li>由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。</li></ul><h3 id="关系-2" tabindex="-1"><a class="header-anchor" href="#关系-2" aria-hidden="true">#</a> 关系</h3>`,14),X={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},$={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},an=s("em",null,"抽象工厂",-1),tn=s("em",null,"生成器",-1),en={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},on={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},ln=s("em",null,"主管",-1),rn=s("em",null,"生成器",-1),un=s("em",null,"实现",-1),dn={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"},mn=e(`<h3 id="code-2" tabindex="-1"><a class="header-anchor" href="#code-2" aria-hidden="true">#</a> Code⭐</h3><blockquote><p>Use the Builder Pattern to generate a Mac computer product and an Lenovo computer. (The computer product has CPU, ram, display and keyboard properties). Write a test class to test the properties of the generated product.</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> annotations
<span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any


<span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">product</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">produce_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">produce_ram</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">produce_display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">produce_keyboard</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">MacComputerBuilder</span><span class="token punctuation">(</span>Builder<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product <span class="token operator">=</span> MacComputer<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">product</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> MacComputer<span class="token punctuation">:</span>
        product <span class="token operator">=</span> self<span class="token punctuation">.</span>_product
        self<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> product

    <span class="token keyword">def</span> <span class="token function">produce_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product<span class="token punctuation">.</span>set_cpu<span class="token punctuation">(</span><span class="token string">&#39;A13&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">produce_display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product<span class="token punctuation">.</span>set_display<span class="token punctuation">(</span><span class="token string">&#39;Dell&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">produce_keyboard</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product<span class="token punctuation">.</span>set_keyboard<span class="token punctuation">(</span><span class="token string">&#39;MA887&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">produce_ram</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product<span class="token punctuation">.</span>set_ram<span class="token punctuation">(</span><span class="token string">&#39;9987&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">LenovoComputerBuilder</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product <span class="token operator">=</span> LenovoComputer<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">product</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> LenovoComputer<span class="token punctuation">:</span>
        product <span class="token operator">=</span> self<span class="token punctuation">.</span>_product
        self<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> product

    <span class="token keyword">def</span> <span class="token function">produce_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product<span class="token punctuation">.</span>set_cpu<span class="token punctuation">(</span><span class="token string">&#39;IntelI8&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">produce_display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product<span class="token punctuation">.</span>set_display<span class="token punctuation">(</span><span class="token string">&#39;DellAAA&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">produce_keyboard</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product<span class="token punctuation">.</span>set_keyboard<span class="token punctuation">(</span><span class="token string">&#39;asd&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">produce_ram</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_product<span class="token punctuation">.</span>set_ram<span class="token punctuation">(</span><span class="token string">&#39;asd&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>cpu <span class="token operator">=</span> <span class="token string">&#39;A13&#39;</span>
        self<span class="token punctuation">.</span>ram <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        self<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        self<span class="token punctuation">.</span>keyboard <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

    <span class="token keyword">def</span> <span class="token function">set_ram</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ram<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>ram <span class="token operator">=</span> ram

    <span class="token keyword">def</span> <span class="token function">set_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cpu<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu

    <span class="token keyword">def</span> <span class="token function">set_display</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> display<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>display <span class="token operator">=</span> display

    <span class="token keyword">def</span> <span class="token function">set_keyboard</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> keyboard<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>keyboard <span class="token operator">=</span> keyboard

    <span class="token keyword">def</span> <span class="token function">list_parts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Product parts:\\n</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>cpu<span class="token punctuation">}</span></span><span class="token string">\\n</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>ram<span class="token punctuation">}</span></span><span class="token string">\\n</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>display<span class="token punctuation">}</span></span><span class="token string">\\n</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>keyboard<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">MacComputer</span><span class="token punctuation">(</span>Computer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cpu <span class="token operator">=</span> <span class="token string">&#39;A13&#39;</span>


<span class="token keyword">class</span> <span class="token class-name">LenovoComputer</span><span class="token punctuation">(</span>Computer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cpu <span class="token operator">=</span> <span class="token string">&#39;Intel_i8&#39;</span>


<span class="token keyword">class</span> <span class="token class-name">Director</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_builder <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">builder</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Builder<span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_builder

    <span class="token decorator annotation punctuation">@builder<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">builder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> builder<span class="token punctuation">:</span> Builder<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_builder <span class="token operator">=</span> builder

    <span class="token keyword">def</span> <span class="token function">build_full_computer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>produce_keyboard<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>produce_ram<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>produce_cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>produce_display<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    director <span class="token operator">=</span> Director<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Basic product MacComputer&quot;</span><span class="token punctuation">)</span>
    builder <span class="token operator">=</span> MacComputerBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span>
    director<span class="token punctuation">.</span>builder <span class="token operator">=</span> builder
    director<span class="token punctuation">.</span>build_full_computer<span class="token punctuation">(</span><span class="token punctuation">)</span>
    builder<span class="token punctuation">.</span>product<span class="token punctuation">.</span>list_parts<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Basic product LenovoComputer&quot;</span><span class="token punctuation">)</span>
    builder2 <span class="token operator">=</span> LenovoComputerBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span>
    director<span class="token punctuation">.</span>builder <span class="token operator">=</span> builder2
    director<span class="token punctuation">.</span>build_full_computer<span class="token punctuation">(</span><span class="token punctuation">)</span>
    builder2<span class="token punctuation">.</span>product<span class="token punctuation">.</span>list_parts<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型模式-prototype-clone" tabindex="-1"><a class="header-anchor" href="#原型模式-prototype-clone" aria-hidden="true">#</a> 原型模式 Prototype (Clone)</h2><p><strong>原型模式</strong>是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。</p><p>The prototype pattern is a creative design pattern that allows you to copy existing objects without having to make your code dependent on the class to which they belong.</p><img src="https://refactoringguru.cn/images/patterns/diagrams/prototype/structure-indexed.png?id=0e1c809842f5c43aca05" alt="原型设计模式的结构" style="zoom:67%;"><ol><li><strong>原型</strong> （Prototype） 接口将对克隆方法进行声明。 在绝大多数情况下， 其中只会有一个名为 <code>clone</code>克隆的方法。</li><li><strong>具体原型</strong> （Concrete Prototype） 类将实现克隆方法。 除了将原始对象的数据复制到克隆体中之外， 该方法有时还需处理克隆过程中的极端情况， 例如克隆关联对象和梳理递归依赖等等。</li><li><strong>客户端</strong> （Client） 可以复制实现了原型接口的任何对象。</li></ol><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><ul><li>如果你需要复制一些对象， 同时又希望代码独立于这些对象所属的具体类， 可以使用原型模式。</li><li>如果子类的区别仅在于其对象的初始化方式， 那么你可以使用该模式来减少子类的数量。 别人创建这些子类的目的可能是为了创建特定类型的对象。</li></ul><h3 id="优缺点-3" tabindex="-1"><a class="header-anchor" href="#优缺点-3" aria-hidden="true">#</a> 优缺点</h3><ul><li>你可以克隆对象， 而无需与它们所属的具体类相耦合。</li><li>你可以克隆预生成原型， 避免反复运行初始化代码。</li><li>你可以更方便地生成复杂对象。</li><li>你可以用继承以外的方式来处理复杂对象的不同配置。</li></ul><p><strong>Disadvantage</strong></p><ul><li>克隆包含循环引用的复杂对象可能会非常麻烦。</li></ul><h3 id="关系-3" tabindex="-1"><a class="header-anchor" href="#关系-3" aria-hidden="true">#</a> 关系</h3>`,15),fn={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},wn=s("em",null,"原型",-1),Cn={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},qn=e(`<h3 id="code-3" tabindex="-1"><a class="header-anchor" href="#code-3" aria-hidden="true">#</a> Code⭐</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> copy


<span class="token keyword">class</span> <span class="token class-name">Log</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">clone</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>self<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">WeeklyLog</span><span class="token punctuation">(</span>Log<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    __date <span class="token operator">=</span> <span class="token string">&quot;2000-01-02&quot;</span>
    __content <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> date<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__date <span class="token operator">=</span> date
        self<span class="token punctuation">.</span>__content <span class="token operator">=</span> content

    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__date<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__content<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">set_date</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__date <span class="token operator">=</span> date


<span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        a <span class="token operator">=</span> WeeklyLog<span class="token punctuation">(</span><span class="token string">&#39;log1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2000-02-19&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fail!&#39;</span><span class="token punctuation">)</span>

        b <span class="token operator">=</span> a<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>
        b<span class="token punctuation">.</span>set_date<span class="token punctuation">(</span><span class="token string">&#39;2012-12-21&#39;</span><span class="token punctuation">)</span>

        a<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>
        b<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    clint <span class="token operator">=</span> Client
    clint<span class="token punctuation">.</span>operation<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="singleton-单例模式" tabindex="-1"><a class="header-anchor" href="#singleton-单例模式" aria-hidden="true">#</a> Singleton 单例模式 ！</h2><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p><p>The singleton pattern is a creative design pattern that allows you to ensure that there is only one instance of a class and provide a global node to access that instance.</p><img src="https://refactoringguru.cn/images/patterns/diagrams/singleton/structure-zh-indexed.png?id=3a13ed8879c2a54d0947" alt="单例模式结构" style="zoom:67%;"><ol><li><p><strong>单例</strong> （Singleton） 类声明了一个名为 <code>get­Instance</code>获取实例的静态方法来返回其所属类的一个相同实例。</p><p>单例的构造函数必须对客户端 （Client） 代码隐藏。 调用 <code>获取实例</code>方法必须是获取单例对象的唯一方式。</p></li></ol><h3 id="场景-3" tabindex="-1"><a class="header-anchor" href="#场景-3" aria-hidden="true">#</a> 场景</h3><ul><li>如果程序中的某个类对于所有客户端只有一个可用的实例， 可以使用单例模式。</li><li>如果你需要更加严格地控制全局变量， 可以使用单例模式。</li></ul><h3 id="优缺点-4" tabindex="-1"><a class="header-anchor" href="#优缺点-4" aria-hidden="true">#</a> 优缺点</h3><ul><li>你可以保证一个类只有一个实例。</li><li>你获得了一个指向该实例的全局访问节点。</li><li>仅在首次请求单例对象时对其进行初始化。</li></ul><p><strong>Disadvantage</strong></p><ul><li>违反了单一职责原则。 该模式同时解决了两个问题。</li><li>单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。</li><li>该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。</li><li>单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</li></ul><h3 id="关系-4" tabindex="-1"><a class="header-anchor" href="#关系-4" aria-hidden="true">#</a> 关系</h3>`,14),An={href:"https://refactoringguru.cn/design-patterns/facade",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://refactoringguru.cn/design-patterns/flyweight",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"},Nn=s("ol",null,[s("li",null,[n("只会有一个单例实体， 但是"),s("em",null,"享元"),n("类可以有多个实体， 各实体的内在状态也可以不同。")]),s("li",null,"单例对象可以是可变的。 享元对象是不可变的。")],-1),Ln=e(`<h3 id="code-4" tabindex="-1"><a class="header-anchor" href="#code-4" aria-hidden="true">#</a> Code⭐</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> Singleton<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Singleton <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Singleton<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Singleton<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> Singleton<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">someBusinessLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">clientCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> s1 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> s2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Singleton works, both variables contain the same instance.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Singleton failed, variables contain different instances.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">clientCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Tn(Sn,Fn){const a=l("ExternalLinkIcon");return p(),c("div",null,[r,s("ul",null,[s("li",null,[n("在许多设计工作的初期都会使用"),s("a",u,[n("工厂方法模式"),t(a)]),n(" （较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用"),s("a",d,[n("抽象工厂模式"),t(a)]),n("、 "),s("a",k,[n("原型模式"),t(a)]),n("或"),s("a",v,[n("生成器模式"),t(a)]),n(" （更灵活但更加复杂）。")]),s("li",null,[s("a",b,[n("生成器"),t(a)]),n("重点关注如何分步生成复杂对象。 "),s("a",m,[n("抽象工厂"),t(a)]),n("专门用于生产一系列相关对象。 "),f,n("会马上返回产品， "),g,n("则允许你在获取产品前执行一些额外构造步骤。")]),s("li",null,[s("a",h,[n("抽象工厂模式"),t(a)]),n("通常基于一组"),s("a",_,[n("工厂方法"),t(a)]),n("， 但你也可以使用"),s("a",y,[n("原型模式"),t(a)]),n("来生成这些类的方法。")]),s("li",null,[n("当只需对客户端代码隐藏子系统创建对象的方式时， 你可以使用"),s("a",w,[n("抽象工厂"),t(a)]),n("来代替"),s("a",C,[n("外观模式"),t(a)]),n("。")]),s("li",null,[n("你可以将"),s("a",q,[n("抽象工厂"),t(a)]),n("和"),s("a",A,[n("桥接模式"),t(a)]),n("搭配使用。 如果由"),P,n("定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， "),x,n("可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。")]),s("li",null,[s("a",B,[n("抽象工厂"),t(a)]),n("、 "),s("a",N,[n("生成器"),t(a)]),n("和"),s("a",L,[n("原型"),t(a)]),n("都可以用"),s("a",T,[n("单例模式"),t(a)]),n("来实现。")])]),S,s("ul",null,[s("li",null,[n("在许多设计工作的初期都会使用"),s("a",F,[n("工厂方法模式"),t(a)]),n(" （较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用"),s("a",D,[n("抽象工厂模式"),t(a)]),n("、 "),s("a",I,[n("原型模式"),t(a)]),n("或"),s("a",M,[n("生成器模式"),t(a)]),n(" （更灵活但更加复杂）。")]),s("li",null,[s("a",j,[n("抽象工厂模式"),t(a)]),n("通常基于一组"),s("a",z,[n("工厂方法"),t(a)]),n("， 但你也可以使用"),s("a",V,[n("原型模式"),t(a)]),n("来生成这些类的方法。")]),s("li",null,[n("你可以同时使用"),s("a",E,[n("工厂方法"),t(a)]),n("和"),s("a",W,[n("迭代器模式"),t(a)]),n("来让子类集合返回不同类型的迭代器， 并使得迭代器与集合相匹配。")]),s("li",null,[s("a",R,[n("原型"),t(a)]),n("并不基于继承， 因此没有继承的缺点。 另一方面， "),U,n("需要对被复制对象进行复杂的初始化。 "),s("a",G,[n("工厂方法"),t(a)]),n("基于继承， 但是它不需要初始化步骤。")]),s("li",null,[s("a",H,[n("工厂方法"),t(a)]),n("是"),s("a",J,[n("模板方法模式"),t(a)]),n("的一种特殊形式。 同时， "),K,n("可以作为一个大型"),O,n("中的一个步骤。")])]),Q,s("ul",null,[s("li",null,[n("在许多设计工作的初期都会使用"),s("a",X,[n("工厂方法模式"),t(a)]),n(" （较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用"),s("a",Y,[n("抽象工厂模式"),t(a)]),n("、 "),s("a",Z,[n("原型模式"),t(a)]),n("或"),s("a",$,[n("生成器模式"),t(a)]),n(" （更灵活但更加复杂）。")]),s("li",null,[s("a",nn,[n("生成器"),t(a)]),n("重点关注如何分步生成复杂对象。 "),s("a",sn,[n("抽象工厂"),t(a)]),n("专门用于生产一系列相关对象。 "),an,n("会马上返回产品， "),tn,n("则允许你在获取产品前执行一些额外构造步骤。")]),s("li",null,[n("你可以在创建复杂"),s("a",en,[n("组合模式"),t(a)]),n("树时使用"),s("a",on,[n("生成器"),t(a)]),n("， 因为这可使其构造步骤以递归的方式运行。")]),s("li",null,[n("你可以结合使用"),s("a",pn,[n("生成器"),t(a)]),n("和"),s("a",cn,[n("桥接模式"),t(a)]),n("： "),ln,n("类负责抽象工作， 各种不同的"),rn,n("负责"),un,n("工作。")]),s("li",null,[s("a",dn,[n("抽象工厂"),t(a)]),n("、 "),s("a",kn,[n("生成器"),t(a)]),n("和"),s("a",vn,[n("原型"),t(a)]),n("都可以用"),s("a",bn,[n("单例模式"),t(a)]),n("来实现。")])]),mn,s("ul",null,[s("li",null,[n("在许多设计工作的初期都会使用"),s("a",fn,[n("工厂方法模式"),t(a)]),n(" （较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用"),s("a",gn,[n("抽象工厂模式"),t(a)]),n("、 "),s("a",hn,[n("原型模式"),t(a)]),n("或"),s("a",_n,[n("生成器模式"),t(a)]),n(" （更灵活但更加复杂）。")]),s("li",null,[s("a",yn,[n("原型"),t(a)]),n("并不基于继承， 因此没有继承的缺点。 另一方面， "),wn,n("需要对被复制对象进行复杂的初始化。 "),s("a",Cn,[n("工厂方法"),t(a)]),n("基于继承， 但是它不需要初始化步骤。")])]),qn,s("ul",null,[s("li",null,[s("a",An,[n("外观模式"),t(a)]),n("类通常可以转换为"),s("a",Pn,[n("单例模式"),t(a)]),n("类， 因为在大部分情况下一个外观对象就足够了。")]),s("li",null,[n("如果你能将对象的所有共享状态简化为一个享元对象， 那么"),s("a",xn,[n("享元模式"),t(a)]),n("就和"),s("a",Bn,[n("单例"),t(a)]),n("类似了。 但这两个模式有两个根本性的不同。 "),Nn])]),Ln])}const Mn=o(i,[["render",Tn],["__file","创建型模式 Creation Pattern.html.vue"]]);export{Mn as default};
