import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.d7b34baa.js";const t={},p=e(`<h1 id="iife-立即执行函数表达式" tabindex="-1"><a class="header-anchor" href="#iife-立即执行函数表达式" aria-hidden="true">#</a> IIFE 立即执行函数表达式</h1><p><code>IIFE</code>全称为<code>Immediately Invoked Function Express</code>-立即执行函数（表达式），顾名思义，是在定义之后立即执行的函数。<code>IIFE</code>主要以保护变量范围著称，时候也会被称为“自执行的匿名函数”（self-executing anonymous function）。</p><h2 id="实际使用" tabindex="-1"><a class="header-anchor" href="#实际使用" aria-hidden="true">#</a> 实际使用</h2><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><p>定义在<code>IIFE</code>内部的变量外界是访问不到的。换句话说，当使用<code>let</code>或<code>const</code>声明的变量，在块内部才能访问到。(注：块即为<code>{}</code>定义的范围)</p><p>然而，有时候你会需要修改这些变量，这种情况不可避免。</p><p>怎么修改呢：</p><p>闭包大家都了解吧，闭包提供了在函数内部访问外部函数范围的能力。创建闭包只不过是在另一个函数内部定义一个函数并且对外暴露该函数。</p><p>当闭包跟<code>IIFE</code>结合的时候，会有以下两种优势：</p><ol><li>变量范围得到安全限制，能够避免被意外行为修改；</li><li>你可以在函数外部修改函数内部的变量。这听起来破坏了第一种优势，实际上并没有。因为变量并不能被直接修改，只能通过内部暴露的函数修改。这种方式是安全的。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;anonymous&#39;</span><span class="token punctuation">;</span>  
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token parameter">_</span> <span class="token operator">=&gt;</span> name<span class="token punctuation">,</span>
    <span class="token function-variable function">setName</span><span class="token operator">:</span> <span class="token parameter">newName</span> <span class="token operator">=&gt;</span> name <span class="token operator">=</span> newName
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// anonymous</span>
user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;Amy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Amy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>name</code>是私有变量，只能在立即执行函数<code>user</code>内部修改。但是因为这里我们使用了闭包，我们可以通过暴露<code>setName()</code>方法，在外部修改该变量。</p><h3 id="全局变量的别名" tabindex="-1"><a class="header-anchor" href="#全局变量的别名" aria-hidden="true">#</a> 全局变量的别名</h3><p>使用大量的<code>JavaScript</code>库可能会导致冲突，因为这些库对外暴露的对象可能同名。</p><p>比如果你使用了<code>jQuery</code>。我们都知道它暴露了<code>$</code>作为主要对象。因为，只要在你的项目依赖中有任意库也使用了<code>$</code>符号导出变量，冲突就发生了。</p><p>幸运的是，你可以通过<code>立即执行函数</code>设置别名来解决这个问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// You’re safe to use jQuery here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过将代码包裹在<code>IIFE</code>中，并将<code>jQuery</code>作为参数传入，就能保证<code>$</code>符号只会引用<code>jQuery</code>而不是其他库。</p><h3 id="安全的变量范围" tabindex="-1"><a class="header-anchor" href="#安全的变量范围" aria-hidden="true">#</a> 安全的变量范围</h3><p><code>ES6</code>引入了<code>let</code>和<code>const</code>来以一种更为安全的方式定义变量。使用<code>var</code>可能会导致意外行为，因为<code>var</code>的范围很容易遭到破坏。</p><p>但是如果生产环境不支持<code>ES6</code>怎么办呢？或者在某些情况下你不能使用<code>let</code>和<code>const</code>?</p><p>不用担心。你还有<code>IIFE</code>可以用，<em>Immediately Invoked Function Expression</em>-立即执行函数可以达到相同的目的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> greeting <span class="token operator">=</span> ‘Good morning<span class="token operator">!</span> How are you today<span class="token operator">?</span>’<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Good morning! How are you today?</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: Uncaught ReferenceError: greeting is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如在以上demo中见到的，在立即执行函数内部执行的，仅仅在<code>IIFE</code>内有效。你无法在外部访问<code>IIFE</code>内部定义的变量。</p><h3 id="循环索引" tabindex="-1"><a class="header-anchor" href="#循环索引" aria-hidden="true">#</a> 循环索引</h3><p>我们可以通过将<code>setTimeout</code>放入<code>IIFE</code>中，来解决这个问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">We’re at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，这是<code>ES6</code>的时代，我们可以使用<code>let</code>简化代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">We’re at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="语法分析" tabindex="-1"><a class="header-anchor" href="#语法分析" aria-hidden="true">#</a> 语法分析</h2><h3 id="常见错误写法" tabindex="-1"><a class="header-anchor" href="#常见错误写法" aria-hidden="true">#</a> 常见错误写法</h3><ol><li><p><code>function (){ }()</code></p><p>期望是立即调用一个匿名函数表达式，结果是进行了函数声明，函数声明必须要有标识符做为函数名称。</p></li><li><p><code>function g(){ }()</code></p><p>期望是立即调用一个具名函数表达式，结果是声明了函数 g。末尾的括号作为分组运算符，必须要提供表达式做为参数。</p></li></ol><p>所以那些匿名函数附近使用括号或一些一元运算符的惯用法，就是来<strong>引导解析器</strong>，指明运算符附近是一个表达式。</p><h3 id="写法分类" tabindex="-1"><a class="header-anchor" href="#写法分类" aria-hidden="true">#</a> 写法分类</h3><p>按照这个理解，可以举出五类，超过十几种的让匿名函数表达式立即调用的写法：</p><p><strong>1）使用括号</strong></p><div class="language-delphi line-numbers-mode" data-ext="delphi"><pre class="language-delphi"><code>( function() {}() );
( function() {} )();
[ function() {}() ];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2）使用一元操作符</strong></p><div class="language-delphi line-numbers-mode" data-ext="delphi"><pre class="language-delphi"><code>~ function() {}();
! function() {}();
+ function() {}();
- function() {}();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3）使用void等操作符</strong></p><div class="language-actionscript line-numbers-mode" data-ext="actionscript"><pre class="language-actionscript"><code><span class="token keyword">delete</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4）使用表达式</strong></p><div class="language-delphi line-numbers-mode" data-ext="delphi"><pre class="language-delphi"><code>var i = function(){ return 10; }();
14.true &amp;&amp; function(){ /* code */ }();
15.0, function(){ /* code */ }();
1 ^ function() {}();
1 &gt; function() {}();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5）使用new关键字</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* code */</span> <span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* code */</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//如果没有参数，最后的()就不需要了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是总体来说，比较常见的是如下三种写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Crockford&#39;s preference - parens on the inside</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the Internet. Please follow me.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the Internet. Please follow me.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the Internet. Please follow me.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","IIFE 立即执行函数表达式.html.vue"]]);export{r as default};
