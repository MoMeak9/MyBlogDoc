import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as d,a,b as e,d as o,e as n,r as t}from"./app.d7b34baa.js";const i={},l=n(`<h1 id="npm包打补丁-—-patch-package" tabindex="-1"><a class="header-anchor" href="#npm包打补丁-—-patch-package" aria-hidden="true">#</a> npm包打补丁 — patch-package</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>在开发过程中（尤其是基于第三方平台）遇到 npm 包与当前环境有兼容性问题时，需要改动 npm 包内文件。一种方法是将需要改动的文件复制出来一份放在项目中引用或者每次手动替换；但这也太不 intelligent 了，所以我采用了 patch-package 添加补丁的方式。 （npm &gt;=5 或者 yarn）</p><h1 id="二、给npm包打补丁" tabindex="-1"><a class="header-anchor" href="#二、给npm包打补丁" aria-hidden="true">#</a> 二、给npm包打补丁</h1><h2 id="_1-安装-yarn-add-patch-package-d-g" tabindex="-1"><a class="header-anchor" href="#_1-安装-yarn-add-patch-package-d-g" aria-hidden="true">#</a> 1. 安装，yarn add patch-package -D/-g</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 官方推荐同时安装 postinstall-postinstall</span>
yarn add patch<span class="token operator">-</span><span class="token keyword">package</span> postinstall<span class="token operator">-</span>postinstall
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),r={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fpatch-package%23why-use-postinstall-postinstall-with-yarn",target:"_blank",rel:"noopener noreferrer"},u=n(`<p><strong>简单来说就是在使用 yarn/yarn add 等命令时补丁一定会生效，使用 yarn remove 时不一定生效，postinstall-postinstall 就是用来解决这个问题的。</strong> 下面举个例子，现在有 packageA 的 npm包，此时修改了 packageA。</p><ul><li>a. 没有 postinstall-postinstall 时，运行 yarn/yarn add 会自动运行补丁；运行 yarn remove <strong>except</strong>PackageA 补丁不生效。</li><li>b. 有 postinstall-postinstall 时，运行 yarn/yarn add/yarn remove <strong>except</strong>PackageA 都会自动打补丁。</li></ul><h2 id="_2-修改npm包" tabindex="-1"><a class="header-anchor" href="#_2-修改npm包" aria-hidden="true">#</a> 2.修改npm包</h2><p>为了避免 v4.15.3 版本之前的其他组件存在未知bug，本次补丁我们基于 4.15.3 版本给 upload 组件打补丁。</p><p>打开目标项目代码 <code>node_modules</code> 文件夹，确认是4.15.3版本</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/6b31001de25e4ebf98d3b4465dc2cdbd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><p>打开一个不用的工程，安装 v4.9.4 版本并同样打开antd目录</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/4611557cd5a446b2a22996db7c1e6a2e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><p>使用复制大法将我们要修改的upload组件代码从 4.9.4 copy到 4.15.3 ，然后 <code>npm run dev</code>启动项目，测试upload组件的bug是否被修复。</p><h2 id="_3-生成补丁" tabindex="-1"><a class="header-anchor" href="#_3-生成补丁" aria-hidden="true">#</a> 3.生成补丁</h2><p>经验证效果符合预期，此时<code>cd</code>到根木录下，执行如下命令生成补丁文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx patch-package antd
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时在根目录下会得到如下文件</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/d4f4b67bab2c4ff280869479886fea61~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><p>很好奇<code>.patch</code>文件是个什么东东，打开文件一目了然，其实就是一些<code>git diff</code>记录描述，补丁原理呼之欲出 —— <code>patch-package</code>会将当前<code>node_modules</code>下的源码与原始源码进行<code>git diff</code>，并在项目根目录下生成一个<code>patch</code>补丁文件。</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/c3ca74bc47884af29d82b51201823ad1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><h2 id="_4-加入版本管理" tabindex="-1"><a class="header-anchor" href="#_4-加入版本管理" aria-hidden="true">#</a> 4.加入版本管理</h2><p>至此补丁文件已经生成完毕，我们需要将它提交到<code>git</code>中，直接执行常规git操作即可：</p><div class="language-Shell line-numbers-mode" data-ext="Shell"><pre class="language-Shell"><code>git add patches/antd+4.15.3.patch

git commit -m &quot;feat:添加antd补丁&quot;

git push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-完善npm脚本" tabindex="-1"><a class="header-anchor" href="#_5-完善npm脚本" aria-hidden="true">#</a> 5.完善npm脚本</h2><p>当其他同事拉到代码如何应用补丁呢？基于上述操作我们在<code>npm install</code>后执行<code>patch-package</code>命令即可，这个流程可借助<code>npm script</code>实现，在<code>package.json</code>的<code>script</code>中添加如下字段及内容：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;postinstall&quot;</span><span class="token operator">:</span><span class="token string">&quot;patch-package&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行一次完成的「依赖安装 -&gt; 构建发布」，一切符合预期，大功告成~</p><h1 id="三、其他方式" tabindex="-1"><a class="header-anchor" href="#三、其他方式" aria-hidden="true">#</a> 三、其他方式</h1><p>那其实想要单纯修改 <code>npm</code> 包方法不止本文介绍的patch-package，对比下其他方法，才能感受到为何patch-package是最优解。</p><h2 id="_1、单文件修改法" tabindex="-1"><a class="header-anchor" href="#_1、单文件修改法" aria-hidden="true">#</a> 1、单文件修改法</h2><p>原理是先找到要修改的<code>npm</code>包的文件，先把这个文件拷贝一份到项目目录下，接着修改文件内容并使用</p><ul><li>拷贝覆盖法</li></ul><p>还是用<code>postinstall</code>这个勾子，在这个勾子执行<code>cp </code>修改过的文件 <code>./node_modules/包名/原始文件</code>拷贝过去，最终<code>node_modules</code>下的文件就变成了修改后的文件了，应用在本篇antd例子中如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;postinstall&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cp ./patches/upload/* ./node_modules/antd/lib/&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即在每次install包后执行用修改后文件覆盖原始文件逻辑。</p><ul><li>修改引用法</li></ul><p>配置一个<code>webpack alias</code>别名，如<code>&#39;原始文件的引用路径&#39;: &#39;修改后文件的引用路径&#39;</code>，使得最终修改后的文件被引用，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;antd/upload&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./patched/upload/*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、整体copy项目法" tabindex="-1"><a class="header-anchor" href="#_2、整体copy项目法" aria-hidden="true">#</a> 2、整体copy项目法</h2><p>将需要修改的包的项目源码整个拷贝下来，进行修改，然后使用</p><ul><li><p>直接引用法</p><p>直接使用完成的源码，不再通过npm包方式引用。</p></li><li><p>发布私库法</p><p>适合一个npm包几个项目在用的场景，可以把修改后的源码发布到私有的npm仓库上，供项目使用，这样多个项目就只需要修改一次源码</p></li></ul><h2 id="_3、外部代码修改法" tabindex="-1"><a class="header-anchor" href="#_3、外部代码修改法" aria-hidden="true">#</a> 3、外部代码修改法</h2><p>这个方法就是不直接修改 <code>node_modules</code> 的源码，而是利用js特性，在执行时，修改这个包的内部属性，从而达到目的。</p><p>简单来说就是利用<code>defineProperty</code>、<code>prototype</code>等特性修改包内的类，举个不恰当的例子，如<code>Vue2.0</code>中使用<code>defineProperty</code>给组件实例做<code>数据劫持和代理</code>。在vue项目中我们也经常在<code>main.js</code>中给<code>Vue根实例</code>通过<code>Vue.prototype.xxx=xxxx</code>挂一些全局属性和方法。</p><h2 id="_4、patch-package优势" tabindex="-1"><a class="header-anchor" href="#_4、patch-package优势" aria-hidden="true">#</a> 4、patch-package优势</h2><p>使用上述三种方式虽然能通过一些骚操作解决某些特定场景下的问题，但都无法避免<code>版本升级</code>带来的困扰，如果该npm包升级，可能会导致原先的修改产生错误，所以如果想使用上述三种办法，最好还是要将版本号写死。然而patch-package有如下特性：</p><ul><li><p>版本试错</p><p>如果你装的包版本和你之前生成的补丁中记录的版本不一样，<code>npx patch-package</code>会直接报错<code>**ERROR** Failed to apply patch for package xxxx at path</code>，通过提示你可以更方便的定位问题</p></li><li><p>节省空间</p><p>使用<code>git diff</code>来记录补丁比起重写一份源码的方法更节省空间，<code>即安全</code>，<code>又便捷</code></p></li></ul>`,43);function h(m,g){const s=t("ExternalLinkIcon");return c(),d("div",null,[l,a("p",null,[a("a",r,[e("为什么使用postinstall-postinstall（官方说明）"),o(s)]),e("。")]),u])}const b=p(i,[["render",h],["__file","npm包打补丁 — patch-package.html.vue"]]);export{b as default};
