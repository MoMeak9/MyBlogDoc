import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as n,b as s,d as e,e as c,r as l}from"./app.d7b34baa.js";const i={},d=n("h1",{id:"正则表达式卷起来",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正则表达式卷起来","aria-hidden":"true"},"#"),s(" 正则表达式卷起来！")],-1),r={href:"https://link.juejin.cn/?target=https%3A%2F%2Fjex.im%2Fregulex",target:"_blank",rel:"noopener noreferrer"},u=n("p",null,"参照",-1),k={href:"https://juejin.cn/post/7119242343798013959",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/post/7021672733213720613",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"补充",-1),v=c(`<h2 id="匹配位置" tabindex="-1"><a class="header-anchor" href="#匹配位置" aria-hidden="true">#</a> 匹配位置</h2><blockquote><p>正则表达式是<code>匹配模式</code>，要么<code>匹配字符</code>，要么<code>匹配位置</code></p></blockquote><p><strong>啥是位置？</strong></p><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。那什么是<strong>位置</strong>呢?</p><p>如下图箭头所指，位置可以理解为<strong>相邻字符之间的位置</strong>。</p><p><img src="https://cdn.yihuiblog.top/images/202207142034848.png" alt="image-20220714203353764"></p><p>咱们可以和<strong>空字符串</strong>进行类比, 字符的首尾、间隙都可以用空字符串进行连接。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;hello&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;h&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;e&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;l&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span>  <span class="token string">&#39;l&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;o&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>有哪些位置？</strong></p><p>正则中常用来表示位置的符号主要有：</p><p>^、$、\\b、\\B、?=p、(?!p)、(?&lt;=p)、(?&lt;!p)</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> ^</h3><blockquote><p>脱字符，匹配行的开头</p></blockquote><p>例如要在hello的开头塞一个笑脸(😄 )怎么搞,这个肯定难不倒你</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;😄&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 😄hello</span>


复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a> $</h3><blockquote><p>美元符号，匹配行的结尾</p></blockquote><p>同理想在hello的结尾塞一个笑脸(😄 )呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;😄&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello😄</span>


复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个表示首尾位置的符号，相信大家一定都很熟悉。</p><h3 id="b" tabindex="-1"><a class="header-anchor" href="#b" aria-hidden="true">#</a> \\b</h3><blockquote><p>单词的边界（单词与非单词之间），具体讲有三点规则。</p></blockquote><p>① \\w和\\W之间的位置</p><p>② ^与\\w之间的位置</p><p>③ \\w与$之间的位置</p><p>比如藏在你们电脑上<code>学习教程</code>文件夹中的某一集种子长这样<strong>xxx_love_study_1.mp4</strong>，想要把他变成<code>❤️xxx_love_study_1❤️.❤️mp4❤️</code>怎么搞呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;xxx_love_study_1.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ❤️xxx_love_study_1❤️.❤️mp4❤️</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://cdn.yihuiblog.top/images/202207142105667.png" alt="image-20220714210512597" style="zoom:50%;"><h3 id="b-1" tabindex="-1"><a class="header-anchor" href="#b-1" aria-hidden="true">#</a> \\B</h3><blockquote><p>非单词的边界，也就是\\b反着来的意思（非单词与非单词之间），它的规则如下：</p></blockquote><p>① \\w与\\w之间的位置</p><p>② \\W与\\W之间的位置</p><p>③^与\\W之间的位置</p><p>④\\W与$之间的位置</p><p>同样还是用<code>学习教程</code>文件夹中的种子，稍稍改造一下，当执行这行代码之后，会输出啥？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;[[xxx_love_study_1.mp4]]&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://cdn.yihuiblog.top/images/202207142110484.png" alt="image-20220714211021405" style="zoom:50%;"><h3 id="p" tabindex="-1"><a class="header-anchor" href="#p" aria-hidden="true">#</a> (?=p)</h3><blockquote><p>符合p子模式前面的那个位置。换句话说是，有一个位置，紧跟其后需要满足p子模式。也有一个学名叫<strong>正向先行断言</strong>。</p></blockquote><p>还是这个例子<code>xxx_love_study_1.mp4</code>，要在xxx(xxx可以指代任何你喜欢的那个TA)前面塞一个❤️,怎么写呢？</p><p>是这样吗？ 不是的，这样会导致你的xxx都不见了，那还要❤️做什么呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;xxx_love_study_1.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ❤️_love_study_1.mp4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>利用(?=p)就可以很方便这这件事（可以想想和上面有什么不同？）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;xxx_love_study_1.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=xxx)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ❤️xxx_love_study_1.mp4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://cdn.yihuiblog.top/images/202207142119898.png" alt="image-20220714211957836" style="zoom:50%;"><h3 id="p-1" tabindex="-1"><a class="header-anchor" href="#p-1" aria-hidden="true">#</a> (?!p)</h3><blockquote><p>(?=p)反过来的意思，可以理解为(?=p)匹配到的位置之外的位置都是属于(?!p)的，它也有一个学名叫负向先行断言。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;xxx_love_study_1.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!xxx)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span> 

<span class="token comment">// (?=xxx)的输出</span>
❤️xxx_love_study_1<span class="token punctuation">.</span>mp4
<span class="token comment">// (?!xxx)的输出</span>
x❤️x❤️x❤️_❤️l❤️o❤️v❤️e❤️_❤️s❤️t❤️u❤️d❤️y❤️_❤️<span class="token number">1</span>❤️<span class="token punctuation">.</span>❤️m❤️p❤️<span class="token number">4</span>❤️
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细对比一下，是不是除了(?=xxx)匹配到最前面那个位置，其他位置都是(?!xxx)匹配到的啦。</p><h3 id="p-2" tabindex="-1"><a class="header-anchor" href="#p-2" aria-hidden="true">#</a> (?&lt;=p)</h3><blockquote><p>符合p子模式后面(注意(?=p)表示的是前面)的那个位置。换句话说是，有一个位置，其前面的部分需要满足p子模式。</p></blockquote><p>依然是这个例子：我们要在xxx(xxx可以指代任何你喜欢的那个TA)的后面塞一个❤️,怎么写呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;xxx_love_study_1.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=xxx)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span> <span class="token comment">//xxx❤️_love_study_1.mp4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="p-3" tabindex="-1"><a class="header-anchor" href="#p-3" aria-hidden="true">#</a> (?&lt;!p)</h3><blockquote><p>(?&lt;=p)反过来的意思，可以理解为(?&lt;=p)匹配到的位置之外的位置都是属于(?&lt;!p)的，</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;xxx_love_study_1.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!xxx)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span> 

<span class="token comment">// (?&lt;=xxx)的输出</span>
xxx❤️_love_study_1<span class="token punctuation">.</span>mp4
<span class="token comment">// (?&lt;!xxx)的输出</span>
❤️x❤️x❤️x_❤️l❤️o❤️v❤️e❤️_❤️s❤️t❤️u❤️d❤️y❤️_❤️<span class="token number">1</span>❤️<span class="token punctuation">.</span>❤️m❤️p❤️<span class="token number">4</span>❤️

复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细对比一下，是不是除了(?&lt;=xxx)匹配到后面那个位置，其他位置都是(?&lt;!xxx)匹配到的啦。</p><h2 id="匹配字符串" tabindex="-1"><a class="header-anchor" href="#匹配字符串" aria-hidden="true">#</a> 匹配字符串</h2><h2 id="两种模糊匹配" tabindex="-1"><a class="header-anchor" href="#两种模糊匹配" aria-hidden="true">#</a> 两种模糊匹配</h2><p>正则如果只有精确匹配，那么便完全没有了意义</p><h3 id="横向" tabindex="-1"><a class="header-anchor" href="#横向" aria-hidden="true">#</a> 横向</h3><blockquote><p>一个正则可匹配的字符串的长度不是固定的，可以是多种情况，通过量词+、*、?、{m,n}，可实现横向匹配</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab{2,5}c</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;abc abbc abbbc abbbbc abbbbbc abbbbbbc&#39;</span>

str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token comment">// [ &#39;abbc&#39;, &#39;abbbc&#39;, &#39;abbbbc&#39;, &#39;abbbbbc&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="纵向" tabindex="-1"><a class="header-anchor" href="#纵向" aria-hidden="true">#</a> 纵向</h3><blockquote><p>一个正则匹配的字符串，具体到某一位字符时，可以不是某个确定的字符串，可以有多种可能，实现方式是字符组( 其实多选分支|也可以实现 )</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[123]b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;a0b a1b a2b a3b a4b&#39;</span>

str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token comment">// [ &#39;a1b&#39;, &#39;a2b&#39;, &#39;a3b&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符组" tabindex="-1"><a class="header-anchor" href="#字符组" aria-hidden="true">#</a> 字符组</h2><blockquote><p>不要被名字给糊弄了，虽然他叫做字符组，但其实只是代表一个字符的可能性</p></blockquote><h3 id="范围表示法" tabindex="-1"><a class="header-anchor" href="#范围表示法" aria-hidden="true">#</a> 范围表示法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>123456abcdefABCDEF<span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>6a<span class="token operator">-</span>fA<span class="token operator">-</span><span class="token constant">F</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="排除字符组" tabindex="-1"><a class="header-anchor" href="#排除字符组" aria-hidden="true">#</a> 排除字符组</h3><blockquote><p>某位字符可以是任何东西，但是就是不能是xxx, 使用^符号</p></blockquote><p>问题：如何要表示除了某个单词之外的任意东西呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">^</span>abc<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="常见简写形式" tabindex="-1"><a class="header-anchor" href="#常见简写形式" aria-hidden="true">#</a> 常见简写形式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\\d <span class="token comment">// 数字</span>
\\<span class="token constant">D</span> <span class="token comment">// 非数字</span>
\\w <span class="token comment">// [0-9a-zA-Z_]</span>
\\<span class="token constant">W</span> <span class="token comment">// [^0-9a-zA-Z_]</span>
\\s <span class="token comment">// [\\t\\v\\n\\r\\f]</span>
\\<span class="token constant">S</span> <span class="token comment">// [^\\t\\v\\n\\r\\f]</span>
<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="量词" tabindex="-1"><a class="header-anchor" href="#量词" aria-hidden="true">#</a> 量词</h2><h3 id="量词-简写" tabindex="-1"><a class="header-anchor" href="#量词-简写" aria-hidden="true">#</a> 量词 &amp; 简写</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span> <span class="token punctuation">{</span>m<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token comment">// 至少出现m次</span>
<span class="token number">2.</span> <span class="token punctuation">{</span>m<span class="token punctuation">}</span> <span class="token comment">// 出现m次</span>
<span class="token number">3.</span> <span class="token operator">?</span> <span class="token comment">// 出现0次或者1次，等价于{0,1}    </span>
<span class="token number">4.</span> <span class="token operator">+</span> <span class="token comment">// 至少出现1次,等价于{1,} </span>
<span class="token number">5.</span> <span class="token operator">*</span> <span class="token comment">// 出现人一次,等价于{0,}  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="贪婪匹配-vs-惰性匹配" tabindex="-1"><a class="header-anchor" href="#贪婪匹配-vs-惰性匹配" aria-hidden="true">#</a> 贪婪匹配 VS 惰性匹配 ⭐</h3><blockquote><p>正则本身是贪婪的，会尽可能的多匹配符合模式的字符</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{2,5}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;123 1234 12345 123456&#39;</span>
<span class="token comment">// 贪婪匹配</span>
<span class="token comment">// string.match(regex) // [ 123, 1234, 12345, 12345 ]</span>

<span class="token comment">// 惰性匹配</span>
<span class="token keyword">let</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{2,5}?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// string.match(regex) // [ 12, 12, 34, 12, 34, 12, 34, 56  ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>量词后面加一个？，即变成了惰性匹配</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>贪婪量词        惰性量词
<span class="token punctuation">{</span>m<span class="token punctuation">,</span>n<span class="token punctuation">}</span>            <span class="token punctuation">{</span>m<span class="token punctuation">,</span>n<span class="token punctuation">}</span><span class="token operator">?</span>
<span class="token punctuation">{</span>m<span class="token punctuation">,</span><span class="token punctuation">}</span>             <span class="token punctuation">{</span>m<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">?</span>
<span class="token operator">?</span>                       <span class="token operator">??</span>
<span class="token operator">+</span>                       <span class="token operator">+</span><span class="token operator">?</span>
<span class="token operator">*</span>                   <span class="token operator">*</span><span class="token operator">?</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多选分支" tabindex="-1"><a class="header-anchor" href="#多选分支" aria-hidden="true">#</a> 多选分支</h2><p>一个模式可以实现横向和纵向的模糊匹配，而多选分支可以支持多个子模式任选其一，形式是(p1|p2|p3)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|nice</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;good idea, nice try.&#39;</span>

<span class="token comment">// string.match(regex) // [ &#39;good&#39;, &#39;nice&#39; ]</span>

<span class="token comment">// 注意，用/good|goodbye/去匹配&#39;goodbye&#39; 匹配到的是good</span>
<span class="token comment">// 因为分支结构是惰性的，前面的匹配上了，后面的就不再尝试了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="括号的作用" tabindex="-1"><a class="header-anchor" href="#括号的作用" aria-hidden="true">#</a> 括号的作用</h2><blockquote><p>括号的作用是提供了分组(括号内的正则是一个整体，即提供子表达式)，便于我们引用它</p></blockquote><h3 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h3><p>如何让量词作用于一个整体？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;ababa abbb ababab&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分支结构" tabindex="-1"><a class="header-anchor" href="#分支结构" aria-hidden="true">#</a> 分支结构</h3><p>分支结构有点像编程里面或的概念||</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
匹配 
I love JavaScript
I love Regular Expression
*/</span>

<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">I love (JavaScript|Regular Expression)</span><span class="token regex-delimiter">/</span></span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;I love JavaScript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;I love Regular Expression&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分组引用" tabindex="-1"><a class="header-anchor" href="#分组引用" aria-hidden="true">#</a> 分组引用</h2><p>通过括号创建子表达式，可以进行数据提取和强大的替换操作，也可以通过js来引用分组内容</p><h3 id="提取数据" tabindex="-1"><a class="header-anchor" href="#提取数据" aria-hidden="true">#</a> 提取数据⭐</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
提取年月日
2021-08-14
*/</span>

<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2021-08-14&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//  [&quot;2021-08-14&quot;, &quot;2021&quot;, &quot;08&quot;, &quot;14&quot;, index: 0, input: &quot;2021-08-14&quot;, groups: undefined]</span>

<span class="token comment">// 第二种解法,通过全局的$1...$9读取 引用的括号数据</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;2021-08-14&#39;</span>

reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span> <span class="token comment">// 2021</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">)</span> <span class="token comment">// 08</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$3<span class="token punctuation">)</span> <span class="token comment">// 14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据替换" tabindex="-1"><a class="header-anchor" href="#数据替换" aria-hidden="true">#</a> 数据替换</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
将以下格式替换为mm/dd/yyy
2021-08-14
*/</span>

<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;2021-08-14&#39;</span>
<span class="token comment">// 第一种写法</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;$2/$3/$1&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token comment">// 08/14/2021</span>
<span class="token comment">// 第二种写法</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> RegExp<span class="token punctuation">.</span>$2 <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$3 <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$1
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span> <span class="token comment">// 08/14/2021</span>

<span class="token comment">// 第三种写法</span>
<span class="token keyword">let</span> result3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$0<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> $3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> $2 <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> $3 <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> $1
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// $0 是被匹配成功的整个字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span> <span class="token comment">// 08/14/2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反向引用-很重要" tabindex="-1"><a class="header-anchor" href="#反向引用-很重要" aria-hidden="true">#</a> 反向引用（很重要）</h2><p>除了通过js引用分组的内容，也可以通过正则来引用分组内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
    写一个正则支持以下三种格式
  2016-06-12
  2016/06/12
  2016.06-12
*/</span>
<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})([-/.])\\d{2}\\2\\d{2}</span><span class="token regex-delimiter">/</span></span>

<span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">&quot;2017-06-12&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">&quot;2017/06/12&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">&quot;2017.06.12&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">&quot;2016-06/12&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ol><li>引用不存在的分组会怎样？ <ol><li>即匹配的就是\\1 \\2本身</li></ol></li><li>分组后面有量词会怎样？ <ol><li>分组后面如果有量词，分组最终(注意是分组，不是说整体)捕获的数据是最后一次的匹配</li></ol></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&#39;12345&#39;</span>.match<span class="token punctuation">(</span>/<span class="token punctuation">(</span><span class="token punctuation">\\</span>d<span class="token punctuation">)</span>+/<span class="token punctuation">)</span> // <span class="token punctuation">[</span><span class="token string">&quot;12345&quot;</span>, <span class="token string">&quot;5&quot;</span>, index: <span class="token number">0</span>, input: <span class="token string">&quot;12345&quot;</span>, groups: undefined<span class="token punctuation">]</span>

/<span class="token punctuation">(</span><span class="token punctuation">\\</span>d<span class="token punctuation">)</span>+ <span class="token punctuation">\\</span><span class="token number">1</span>/.test<span class="token punctuation">(</span><span class="token string">&#39;12345 1&#39;</span><span class="token punctuation">)</span> // <span class="token boolean">false</span>
/<span class="token punctuation">(</span><span class="token punctuation">\\</span>d<span class="token punctuation">)</span>+ <span class="token punctuation">\\</span><span class="token number">1</span>/.test<span class="token punctuation">(</span><span class="token string">&#39;12345 5&#39;</span><span class="token punctuation">)</span> // <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非捕获性括号" tabindex="-1"><a class="header-anchor" href="#非捕获性括号" aria-hidden="true">#</a> 非捕获性括号</h2><p>上面使用的括号都会匹配他们匹配到的数据，以便后续引用，所以也可以称为捕获型分组和捕获型分支。</p><p>如果想要括号最原始的功能，但不会引用它，也就是既不会出现在API引用里，也不会出现在正则引用里，可以使用</p><p>非捕获性括号（?:p）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 非捕获型引用</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ababa abbb ababab&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span>
<span class="token comment">// 注意这里，因为是非捕获型分组，所以使用match方法时，不会出现在数组的1位置了</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ab)+</span><span class="token regex-delimiter">/</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ababa abbb ababab&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;abab&quot;, index: 0, input: &quot;ababa abbb ababab&quot;, groups: undefined]</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ababa abbb ababab&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;abab&quot;, &quot;ab&quot;, index: 0, input: &quot;ababa abbb ababab&quot;, groups: undefined]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用正则" tabindex="-1"><a class="header-anchor" href="#常用正则" aria-hidden="true">#</a> 常用正则~ 🎧</h2><h3 id="📞号码相关" tabindex="-1"><a class="header-anchor" href="#📞号码相关" aria-hidden="true">#</a> 📞号码相关</h3><ul><li>手机号（以 1 开头）：<code>/^(?:(?:\\+|00)86)?1\\d{10}$/</code></li><li>手机号（以 13 至19 开头）：<code>/^(?:(?:\\+|00)86)?1[3-9]\\d{9}$/</code></li><li>手机号（以工信部公布的手机号段开头）：<code>/^(?:(?:\\+|00)86)?1(?:(?:3[\\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\\d])|(?:9[189]))\\d{8}$/</code></li><li>国内固话号码：<code>/\\d{3}-\\d{8}|\\d{4}-\\d{7}/</code></li><li>邮箱号：<code>/^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/</code></li><li>邮政编码：<code>/[1-9]\\d{5}(?!\\d)/</code></li><li>身份证号：<code>/^[1-9]\\d{5}(?:18|19|20)\\d{2}(?:0[1-9]|10|11|12)(?:0[1-9]|[1-2]\\d|30|31)\\d{3}[\\dXx]$/</code></li><li>银行卡号（公、私账户）：<code>/^[1-9]\\d{9,29}$/</code></li><li>车牌号：<code>/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z][A-HJ-NP-Z0-9]{4,5}[A-HJ-NP-Z0-9挂学警港澳]$/</code></li><li>QQ 号：<code>/^[1-9][0-9]{4,10}$/</code></li><li>微信号：<code>/^[a-zA-Z][-_a-zA-Z0-9]{5,19}$/</code></li><li>版本号（ x.y.z ）：<code>/^\\d+(?:\\.\\d+){2}$/</code></li><li>合法账号1（字母开头，5-16位，允许字母数字下划线）：<code>/^[a-zA-Z][a-zA-Z0-9_]{4,15}$/</code></li><li>合法账号2（4-16位，允许字母，数字，下划线，减号）：<code>/^[a-zA-Z0-9_-]{4,16}$/</code></li><li>强密码1（必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间）：<code>/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$/</code></li><li>强密码2（必须包含字母、数字、特殊字符：*<em>@#$%^&amp; <em>\`~()-+=</em></em> ）：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\\W_!@#$%^&amp;* ~()-+=]+$)(?![a-z0-9]+$)(?![a-z\\\\W_!@#$%^&amp; *~()-+=]+$)(?![0-9\\W_!@#$%^&amp;* ~()-+=]+$)[a-zA-Z0-9\\\\W_!@#$%^&amp;*~()-+=]/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>网址：<code>/^(((ht|f)tps?):\\/\\/)?(^!@#$%^&amp;*?.\\s-?\\.)+[a-z]{2,6}\\/?/</code></li><li>网址带端口号：<code>/^((ht|f)tps?:\\/\\/)?[\\w-]+(\\.[\\w-]+)+:\\d{1,5}\\/?$/</code></li><li>ip-v4：<code>/\\\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\b/</code></li><li>ip-v6：<code>/(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/</code></li></ul><h3 id="🔢数字相关" tabindex="-1"><a class="header-anchor" href="#🔢数字相关" aria-hidden="true">#</a> 🔢数字相关</h3><ul><li>只有数字：<code>/^[0-9]*$/</code> 或 <code>/^\\d{1,}$/</code></li><li>整数：<code>/^-?[0-9]\\d*$/</code></li><li>正整数：<code>/^\\+?[1-9]\\d*$/</code></li><li>非正整数：<code>/^-[1-9]\\d*|0$/</code></li><li>负整数：<code>/^-[1-9]\\d*$/</code></li><li>非负整数：<code>/^\\d+$/</code></li><li>浮点数：<code>/^(-?\\d+)(\\.\\d+)?$/</code></li><li>正浮点数：<code>/^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$/</code></li><li>负浮点数：<code>/^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)/</code></li><li>小数：<code>/^-?\\d+\\.\\d+$/</code></li><li>正数/负数/小数：<code>/^(\\-|\\+)?\\d+(\\.\\d+)?$/</code></li><li>正实数保留小数点后 2 位：<code>/^[0-9]+(.[0-9]{2})?$/</code></li><li>正实数保留小数点后 1 到 3 位：<code>/^[0-9]+(.[0-9]{1,3})?$/</code></li><li>n 位数字：<code>/^\\d{n}$/</code></li><li>至少 n 位数字：<code>/^\\d{n,}$/</code></li><li>m 至 n 位的数字：<code>/^\\d{m,n}$/</code></li><li>数字和字母至少包含其一：<code>/^[A-Za-z0-9]+$/</code></li><li>必须包含数字和字母：<code>/^(?=.*[a-zA-Z])(?=.*\\d).+$/</code></li><li>md5 值 ：<code>/^([a-f\\d]{32}|[A-F\\d]{32})$/</code></li><li>base64 值：<code>/^\\s*data:(?:[a-z]+\\/[a-z0-9-+.]+(?:;[a-z-]+=[a-z0-9-]+)?)?(?:;base64)?,([a-z0-9!$&amp;&#39;,()*+;=\\-._~:@/?%\\s]*?)\\s*$/i</code></li></ul><h3 id="🔣字符相关" tabindex="-1"><a class="header-anchor" href="#🔣字符相关" aria-hidden="true">#</a> 🔣字符相关</h3><ul><li>m 至 n 位的字符：<code>/^.{3,20}$/</code></li><li>英文字母字符：<code>/^[A-Za-z]+$/</code></li><li>大写英文字母字符：<code>/^[A-Z]+$/</code></li><li>小写英文字母字符：<code>/^[a-z]+$/</code></li><li>汉字：<code>/^[\\u4e00-\\u9fa5]{0,}$/</code></li><li>全角符号：<code>/[\\uFF00-\\uFFFF]/</code></li><li>半角符号：<code>/[\\u0000-\\u00FF]/</code></li><li>汉字、英文、数字、下划线至少其一：<code>/^[\\u4E00-\\u9FA5A-Za-z0-9_]+$/</code></li><li>不包含字符 “~” ：<code>/[^~\\x22]+/</code></li><li>字符连续重复：<code>/(.)\\1+/</code></li></ul><h3 id="⌚时间相关" tabindex="-1"><a class="header-anchor" href="#⌚时间相关" aria-hidden="true">#</a> ⌚时间相关</h3><ul><li>24小时制时间（HH:mm:ss）：<code>/^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$/</code></li><li>12小时制时间（hh:mm:ss）：<code>/^(?:1[0-2]|0?[1-9]):[0-5]\\d:[0-5]\\d$/</code></li><li>24小时制时间（HHmmss）：<code>/([0-1]?[0-9]|2[0-3])([0-5][0-9])([0-5][0-9])$/</code></li><li>日期1（yyyy-MM-dd，如 2222-01-01，年份必为4位）：<code>/^\\d{4}-\\d{1,2}-\\d{1,2}/</code></li><li>日期2（如 333-01-01，年份可小于4位）：<code>/^\\d{1,4}(-)(1[0-2]|0?[1-9])\\1(0?[1-9]|[1-2]\\d|30|31)$/</code></li><li>日期3（yyyyMMdd，如 20220202）：<code>/^((([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})(((0[13578]|1[02])(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)(0[1-9]|[12][0-9]|30))|(02(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))0229))$/</code></li><li>日期+时间1（YYYYMMDD HH:mm:ss）：<code>/^\\d{4}([/:-\\S])(1[0-2]|0?[1-9])\\1(0?[1-9]|[1-2]\\d|30|31) (?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$/</code></li><li>日期+时间2：<code> /^[1-9]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\\s+(20|21|22|23|[0-1]\\d):[0-5]\\d:[0-5]\\d$/</code></li><li>一年 12 个月（(01～09 或 1～12)）：<code>/^(0?[1-9]|1[0-2])$/</code></li><li>一个月 31 天（01～09 或 1～31）：<code>/^((0?[1-9])|((1|2)[0-9])|30|31)$/</code></li><li>有 31 天的月份：<code>/^(0?[13578]|1[02])$/</code></li><li>有 30 天月的份：<code>/(0[469]|11)-(0[1-9]|[12][0-9]|30)/</code></li><li>2 月 28 天（&quot;02-28&quot;）：<code>/^02-(0[1-9]|[1][0-9]|2[0-8])$/</code></li><li>闰年：<code>/^(((19|20)([13579][26]|[2468][048]|0[48]))|(2000))$/</code></li><li>闰年 2 月（比如 2008-02-01）：<code>/^(((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2-(0?[1-9]|[12]\\d)$/</code></li><li>日期（包括闰年、大小月的判断）：<code>/((((19|20)\\d{2})-(0?(1|[3-9])|1[012])-(0?[1-9]|[12]\\d|30))|(((19|20)\\d{2})-(0?[13578]|1[02])-31)|(((19|20)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|((((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2-29))$/</code></li><li>年份区间-年（比如 19 年至 20 年）：<code>/^((19|20)\\d{2})$/</code></li><li>年份区间-年月（比如 1999-01）：<code>/^((((19|20)\\d{2})-(0?[13-9]|1[012]))|(((19|20)\\d{2})-(0?[13578]|1[02]))|(((19|20)\\d{2})-0?2)|((((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2))$/</code></li><li>年份区间-年月日（比如 1999-01-01）：<code>/^((((19|20)\\d{2})-(0?[13-9]|1[012])-(0?[1-9]|[12]\\d|30))|(((19|20)\\d{2})-(0?[13578]|1[02])-31)|(((19|20)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|((((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2-29))$/.test(&#39;2021-02-21&#39;)$/</code></li><li>年份区间-年月日（间隔符号可为 - / 或空）：<code>/^(?:(?:1[6-9]|[2-9][0-9])[0-9]{2}([-/.]?)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:(?:1[6-9]|[2-9][0-9])(?:0[48]|[2468][048]|[13579][26])|(?:16|[2468][048]|[3579][26])00)([-/.]?)0?2\\2(?:29))$/</code></li></ul><h3 id="💻编程相关" tabindex="-1"><a class="header-anchor" href="#💻编程相关" aria-hidden="true">#</a> 💻编程相关</h3><ul><li>16进制颜色：<code>/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/</code></li><li>提取网页颜色代码：<code>/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/</code></li><li>视频链接地址：<code>/^https?:\\/\\/(.+\\/)+.+(\\.(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4))$/i</code></li><li>图片链接地址：<code>/^https?:\\/\\/(.+\\/)+.+(\\.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$/i</code></li><li>mac 地址：<code>/^((([a-f0-9]{2}:){5})|(([a-f0-9]{2}-){5}))[a-f0-9]{2}$/i</code></li><li>子网掩码：<code>/^((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))$/</code></li><li>文件扩展名效验：<code>/^([a-zA-Z]\\\\:|\\\\\\\\)\\\\\\\\([^\\\\\\\\]+\\\\\\\\)*[^\\\\/:*?&quot;&lt;&gt;|]+\\\\.txt(l)?$/</code></li><li>java包名（x.x.x）：<code>/^([a-zA-Z_]\\w*)+([.][a-zA-Z_]\\w*)+$/</code></li><li>xml文件：<code>/^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$/</code></li><li>html 注释：<code>/&lt;!--[\\s\\S]*?--&gt;/g</code></li><li>html 标签1：<code>/&lt;(\\w+)[^&gt;]*&gt;(.*?&lt;\\/\\1&gt;)?/</code></li><li>html 标签2：<code>/&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt;/</code></li><li>首尾空白字符：<code>/^\\s*|\\s*$/</code></li><li>查找CSS属性:<code>/^\\\\s*[a-zA-Z\\\\-]+\\\\s*[:]{1}\\\\s[a-zA-Z0-9\\\\s.#]+[;]{1}/</code></li><li>提取页面超链接:<code>/(&lt;a\\\\s*(?!.*\\\\brel=)[^&gt;]*)(href=&quot;https?:\\\\/\\\\/)((?!(?:(?:www\\\\.)?&#39;.implode(&#39;|(?:www\\\\.)?&#39;, $follow_list).&#39;))[^&quot; rel=&quot;external nofollow&quot; ]+)&quot;((?!.*\\\\brel=)[^&gt;]*)(?:[^&gt;]*)&gt;/</code></li><li>提取网页图片：<code>/\\\\&lt; *[img][^\\\\\\\\&gt;]*[src] *= *[\\\\&quot;\\\\&#39;]{0,1}([^\\\\&quot;\\\\&#39;\\\\ &gt;]*)/</code></li><li>迅雷链接：<code>/^thunder:\\/\\/[a-zA-Z0-9]+=$/</code></li><li>ed2k链接：<code>/^ed2k:\\/\\/|file|.+|\\/$/</code></li><li>linux&quot;文件&quot;路径：<code>/^\\/(\\w+\\/)+\\w+\\.\\w+$/</code></li><li>window下&quot;文件&quot;路径：<code>/^[a-zA-Z]:\\\\(?:\\w+\\\\)*\\w+\\.\\w+$/</code></li></ul><h3 id="🍕生活相关" tabindex="-1"><a class="header-anchor" href="#🍕生活相关" aria-hidden="true">#</a> 🍕生活相关</h3><ul><li>金额（宽松，可为负、首位可为0，支持千分位分隔）：<code>/^-?\\d+(,\\d{3})*(\\.\\d{1,2})?$/</code></li><li>金额（大于 0 ，两位小数）：<code>/(^[1-9]{1}[0-9]*$)|(^[0-9]*\\.[0-9]{2}$)/</code></li><li>金额（严格，不为负、小数点后最多两位，首位不为0）：<code>/(^[1-9]([0-9]+)?(\\.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9]\\.[0-9]([0-9])?$)/</code></li><li>护照：<code>/(^[EeKkGgDdSsPpHh]\\d{8}$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\\d{7}$)/</code></li><li>香港身份证：<code>/^[a-zA-Z]\\d{6}\\([\\dA]\\)$/</code></li><li>澳门身份证：<code>/^[1|5|7]\\d{6}\\(\\d\\)$/</code></li><li>湾湾身份证：<code>/^[a-zA-Z][0-9]{9}$/</code></li><li>股票代码：<code>/^(s[hz]|S[HZ])(000[\\d]{3}|002[\\d]{3}|300[\\d]{3}|600[\\d]{3}|60[\\d]{4})$/</code></li><li>不含 abc 的单词：<code>/\\b((?!abc)\\w)+\\b/</code></li></ul>`,127);function b(x,h){const a=l("ExternalLinkIcon");return p(),o("div",null,[d,n("blockquote",null,[n("p",null,[n("a",r,[s("jex.im/regulex"),e(a)]),s("/，正则可视化网站")]),u,n("p",null,[n("a",k,[s("想要白嫖正则是吧？这一次给你个够！"),e(a)])]),n("p",null,[n("a",g,[s("就因为这三个知识点，我彻底学废了”正则表达式“"),e(a)])]),m]),v])}const _=t(i,[["render",b],["__file","正则表达式卷起来！.html.vue"]]);export{_ as default};
