import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as e,d as a,e as o,r as i}from"./app.d7b34baa.js";const l={},u=o(`<h1 id="vuebus-总线传参数" tabindex="-1"><a class="header-anchor" href="#vuebus-总线传参数" aria-hidden="true">#</a> VueBus 总线传参数</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>vue组件非常常见的有父子组件通信，兄弟组件通信。而父子组件通信就很简单，父组件会通过 <code>props</code> 向下传数据给子组件，当子组件有事情要告诉父组件时会通过 <code>$emit</code> 事件告诉父组件。今天就来说说如果两个页面没有任何引入和被引入关系，该如何通信了？</p><p>如果咱们的应用程序不需要类似Vuex这样的库来处理组件之间的数据通信，就可以考虑Vue中的 <code>事件总线</code> ，即 **<code>EventBus</code>**来通信。</p><h2 id="什么是eventbus" tabindex="-1"><a class="header-anchor" href="#什么是eventbus" aria-hidden="true">#</a> 什么是EventBus</h2><p><code>EventBus</code> 又称为事件总线。在Vue中可以使用 <code>EventBus</code> 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的“灾难”，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。</p><h2 id="如何使用eventbus" tabindex="-1"><a class="header-anchor" href="#如何使用eventbus" aria-hidden="true">#</a> 如何使用EventBus</h2><h3 id="一、初始化" tabindex="-1"><a class="header-anchor" href="#一、初始化" aria-hidden="true">#</a> 一、初始化</h3><p><strong>首先需要创建事件总线并将其导出，以便其它模块可以使用或者监听它</strong>。我们可以通过两种方式来处理。先来看第一种，新创建一个 .js 文件，比如 <code>event-bus.js</code>or<code>Bus.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// event-bus.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实质上<code>EventBus</code>是一个不具备 <code>DOM</code> 的组件，它具有的仅仅只是它实例方法而已，因此它非常的轻便。</p><p>另外一种方式，可以直接在项目中的 <code>main.js</code> 初始化 <code>EventBus</code> :</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，这种方式初始化的 <code>EventBus</code> 是一个 <code>全局的事件总线</code> 。稍后再来聊一聊全局的事件总线。</p></blockquote><p>现在我们已经创建了 <code>EventBus</code> ，接下来你需要做到的就是在你的组件中加载它，并且调用同一个方法，就如你在父子组件中互相传递消息一样。</p><h3 id="二、发送和接受事件" tabindex="-1"><a class="header-anchor" href="#二、发送和接受事件" aria-hidden="true">#</a> 二、发送和接受事件</h3><p>其实和父子组件的通信差不多,用 <code>EventBus.$emit(&#39;emit事件名&#39;，数据) </code>发送， <code>EventBus.$on(&quot;emit事件名&quot;, callback(payload1,…))</code> 接受</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 发送消息
EventBus.$emit(channel: string, callback(payload1,…))

// 监听接收消息
EventBus.$on(channel: string, callback(payload1,…))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在假设 A 组件与 B 组件通信</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- A.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{msgB}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendMsgA()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> 
<span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../Bus.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;bMsg&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// a组件接受 b发送来的消息</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">sendMsgA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;aMsg&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;来自A页面的消息&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 发送数据</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!-- B.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{msgA}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendMsgB()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> 
<span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../event-bus.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;aMsg&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// b组件接受 a发送来的消息</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">sendMsgB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;bMsg&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;来自b页面的消息&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b发送数据</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只监听(接受)一次数据可以使用 <code>EventBus.$once(&#39;事件名&#39;, callback(payload1,…)</code></p><p>前面提到过，如果使用不善，<code>EventBus</code> 会是一种灾难，到底是什么样的<code>“灾难”</code>了？大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的<code>EventBus</code>会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，<code>EventBus</code> 在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理 <code>EventBus</code> 在项目中的关系。通常会用到，在vue页面销毁时，同时移除<code>EventBus</code> 事件监听</p><h3 id="三、移除移除事件监听者" tabindex="-1"><a class="header-anchor" href="#三、移除移除事件监听者" aria-hidden="true">#</a> 三、移除移除事件监听者</h3><p>EventBus.$off(&#39;事件名&#39;, 回调函数)</p><ul><li><code>EventBus.$off(&#39;事件名&#39;, callback)</code>，只移除这个回调的监听器。</li><li><code>EventBus.$off(&#39;事件名&#39;)</code>，移除该事件所有的监听器。</li><li><code>EventBus.$off()</code>， 移除所有的事件监听器，注意不需要添加任何参数。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 导入我们刚刚创建的 EventBus
import { EventBus } from &#39;../Bus.js&#39;

// 事件监听函数
const clickHandler = function(clickCount) {
  console.log(\`Oh, hello)\`)
}

// 开始监听事件
EventBus.$on(&#39;i-got-clicked&#39;, clickHandler);

// 停止监听
EventBus.$off(&#39;i-got-clicked&#39;, clickHandler);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、全局eventbus" tabindex="-1"><a class="header-anchor" href="#四、全局eventbus" aria-hidden="true">#</a> 四、全局EventBus</h3><p>全局EventBus，虽然在某些示例中不提倡使用，但它是一种非常漂亮且简单的方法，可以跨组件之间共享数据。</p><p>它的工作原理是发布/订阅方法，通常称为 Pub/Sub 。</p><p>由于是全局的，必然所有事件都订阅它, 所有组件也发布到它，订阅组件获得更新。也就是说所有组件都能够将事件发布到总线，然后总线由另一个组件订阅，然后订阅它的组件将得到更新。</p><h4 id="创建全局eventbus" tabindex="-1"><a class="header-anchor" href="#创建全局eventbus" aria-hidden="true">#</a> 创建全局EventBus</h4><p>全局事件总线只不过是一个简单的 vue 组件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var EventBus = new Vue();

Object.defineProperties(Vue.prototype, {
  $bus: {
    get: function () {
      return EventBus
    }
  }
})
// 这个初始化的第一种方法，个人感觉区别不大
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-on和-emit" tabindex="-1"><a class="header-anchor" href="#使用-on和-emit" aria-hidden="true">#</a> 使用 <code>$on</code>和<code>$emit</code></h4><p>在这个特定的总线中使用两个方法。一个用于创建发出的事件，它就是<code>$emit</code>；另一个用于订阅<code>$on</code>：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>this.$bus.$emit(&#39;nameOfEvent&#39;,{ ... pass some event data ...});

this.$bus.$on(&#39;nameOfEvent&#39;,($event) =&gt; {
    // ...
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eventbus的优缺点" tabindex="-1"><a class="header-anchor" href="#eventbus的优缺点" aria-hidden="true">#</a> EventBus的优缺点</h3><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ul><li>大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。</li><li>如果业务有反复操作的页面，EventBus在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理EventBus在项目中的关系。通常会用到，在vue页面销毁时，同时移除EventBus事件监听。</li><li>由于是都使用一个Vue实例，所以容易出现重复触发的情景，两个页面都定义了同一个事件名，并且没有用$off销毁（常出现在路由切换时）。</li></ul><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>解决了多层组件之间繁琐的事件传播。</li><li>使用原理十分简单，代码量少。</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,42),d={href:"https://learnku.com/vuejs/t/23292/creating-a-global-event-bus-using-vuejs",target:"_blank",rel:"noopener noreferrer"},r={href:"http://www.imooc.com/article/289043",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"Vue事件总线（EventBus）使用详细介绍",-1),k={href:"https://zhuanlan.zhihu.com/p/72777951",target:"_blank",rel:"noopener noreferrer"},m={href:"https://segmentfault.com/a/1190000021707081",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,'{ "title": "RG-RAP1200(FE)产品说明书", "type: "images", "tabs": [ { "name": "产品信息", "key": "xinxi"， index‘：“1’ }, { "name": "产品安装", "key": "anzhuang" }, { "name": "接口及组网方式", "key": "wangkoulianjie" }, { "name": "网络配置", "key": "peizhi" }, { "name": "指示灯说明", "key": "zhishideng" }, { "name": "售后服务", "key": "shouhou" } ], "contents":{ “ xinxi”: [ " sadasda","aasdasdasdasd"],"anzhuang":[]',-1),g=n("p",null,"} }",-1);function h(f,B){const s=i("ExternalLinkIcon");return p(),c("div",null,[u,n("blockquote",null,[n("p",null,[n("a",d,[e("使用 Vue.js 创建全局事件总线"),a(s)])]),n("p",null,[n("a",r,[v,a(s)])]),n("p",null,[n("a",k,[e("Vue事件总线（EventBus）使用详细介绍"),a(s)])]),n("p",null,[n("a",m,[e("vue -- 事件总线 EventBus"),a(s)])])]),b,g])}const _=t(l,[["render",h],["__file","VueBus 总线传参数.html.vue"]]);export{_ as default};
