import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as l,a as e,b as o,d as r,e as p,r as s}from"./app.d7b34baa.js";const i={},h=p('<h1 id="为什么是-pnpm-我们为何使用monorepo" tabindex="-1"><a class="header-anchor" href="#为什么是-pnpm-我们为何使用monorepo" aria-hidden="true">#</a> 为什么是 pnpm？我们为何使用monorepo？</h1><h2 id="pnpm-是什么" tabindex="-1"><a class="header-anchor" href="#pnpm-是什么" aria-hidden="true">#</a> pnpm 是什么？</h2><blockquote><p>Fast, disk space efficient package manager.</p></blockquote><p>pnpm 是新一代 node 包管理器。它由 npm/yarn 衍生而来，但却解决了 npm/yarn 内部潜在的 bug，并且极大了地优化了性能，扩展了使用场景，相比 yarn、npm，pnpm安装包更快速，对包的依赖管理更偏平，对磁盘占用更少。</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><p><strong>快速</strong>：pnpm 比其他包管理器快 2 倍</p>',6),d={href:"https://r.pnpm.io/benchmarks",target:"_blank",rel:"noopener noreferrer"},c=e("p",null,[e("img",{src:"https://camo.githubusercontent.com/83b108abddef5c40f6afc985fa8214edc92b6f2226a83d577074a720907463c8/68747470733a2f2f706e706d2e696f2f696d672f62656e63686d61726b732f616c6f7474612d66696c65732e737667",alt:"img"})],-1),m=e("p",null,[e("strong",null,"高效利用磁盘空间"),o("：node_modules中的文件是从单个内容寻址存储中的克隆或硬链接 。")],-1),u=e("p",null,[o("⭐"),e("strong",null,"支持 monorepos"),o("：pnpm 内置支持单仓多包。(接下来要讲)")],-1),_=e("p",null,[e("strong",null,"严格"),o("：pnpm 默认创建了一个非平铺的 node_modules，因此代码无法访问任意包。")],-1),f={href:"https://pnpm.io/blog/2020/05/27/flat-node-modules-is-not-the-only-way",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"关于monorepo",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#关于monorepo","aria-hidden":"true"},"#"),o(" 关于monorepo")],-1),g=e("p",null,"前文提到pnpm支持monorepo，我们来说一下什么是monorepo，以及其的可用性：",-1),k={href:"https://juejin.cn/post/7011024137707585544",target:"_blank",rel:"noopener noreferrer"},y=p('<p>monorepo 是把多个项目的所有代码放到一个 git 仓库中进行管理，多个项目中会有共享的代码则可以分包引用。整个项目就是有 root 管理的 dependencies 加上多个 packages，每个 package 也可以在自己的作用域引入自己的 dependencies。</p><h3 id="为什么要使用-monorepo" tabindex="-1"><a class="header-anchor" href="#为什么要使用-monorepo" aria-hidden="true">#</a> 为什么要使用 monorepo</h3><p>使用 monorepo 可以把原本一个项目的多个模块拆分成多个 packages，在 packages 之间相互引用，也可以单独发布成包，极大地解决了项目之间代码无法重用的痛点。在项目打包或者编译操作时也可重用一套配置，通吃所有 packages。</p><h3 id="monorepo-与-multirepo" tabindex="-1"><a class="header-anchor" href="#monorepo-与-multirepo" aria-hidden="true">#</a> Monorepo 与 Multirepo</h3><blockquote><p>A monorepo keeps everything in one repository. A multirepo (multiple repositories) typically has one repository for each project. The more projects, the more repositories. A multirepo is also known as polyrepo.</p><p>monorepo 将所有内容保存在一个存储库中。一个 multirepo（multiple repositories）通常为每个项目都提供一个存储库。项目越多，存储库就越多。multirepo 也称为 polyrepo。</p></blockquote><h4 id="monorepo-通常最适合" tabindex="-1"><a class="header-anchor" href="#monorepo-通常最适合" aria-hidden="true">#</a> Monorepo 通常最适合……</h4><ul><li><p>使用单个存储库可以查看每个项目的代码和资源，这可以帮助我们管理依赖项。</p></li><li><p>单个存储库使协作更容易。这是因为每个人都可以访问全部代码、文件和资源。因此，开发人员可以共享和重用资源。</p></li><li><p>使用单个存储库可以帮助加速开发。例如，我们可以进行原子更改（一个操作可以跨多个项目进行更改）。</p></li></ul><h4 id="multirepo-通常最适合" tabindex="-1"><a class="header-anchor" href="#multirepo-通常最适合" aria-hidden="true">#</a> Multirepo 通常最适合……</h4><ul><li><p><strong>需要使用 Git 的大型项目</strong>。使用 Git 管理的大规模 monorepo 不会永远高效，并不适合将团队项目全部梭哈，而是根据业务、依赖性选择性使用Multirepo。</p></li><li><p><strong>开源或第三方库</strong> 。在某些版本控制系统中，需要多个存储库才能使用的开源项目或与第三方团队合作，并且需要确保第三方开发人员只能访问他们正在处理的项目。</p></li></ul><h2 id="留下讨论问题" tabindex="-1"><a class="header-anchor" href="#留下讨论问题" aria-hidden="true">#</a> 留下讨论问题</h2><ul><li><p>为什么不是全部进行软/硬连接？</p></li><li><p>什么是“幽灵依赖”？</p></li><li><p>这种思路很难想吗？为什么pnpm这么长时间才出现</p></li></ul>',11),x=e("p",null,[e("strong",null,"参考：")],-1),w={href:"https://github.com/pnpm/pnpm",target:"_blank",rel:"noopener noreferrer"},M={href:"https://pnpm.io/blog/2020/05/27/flat-node-modules-is-not-the-only-way",target:"_blank",rel:"noopener noreferrer"},v={href:"https://ssoor.github.io/2020/03/24/mono-repo-vs-multi-repo/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.perforce.com/blog/vcs/what-monorepo",target:"_blank",rel:"noopener noreferrer"};function j(N,V){const n=s("ExternalLinkIcon");return a(),l("div",null,[h,e("p",null,[o("pnpm 比 传统的 npm 和 Yarn 快 2 倍。"),e("a",d,[o("查看所有基准"),r(n)]),o("，是具有大量依赖项的应用程序的基准测试：")]),c,m,u,_,e("p",null,[o("关于pnpm如何高效利用磁盘空间以及为何选择创建非扁平化的node_modules，可以查看文章"),e("a",f,[o("扁平 node_modules 不是唯一的方法"),r(n)]),o("。")]),b,g,e("p",null,[o("**⭐注意：monorepo不是pnpm专属，yarn 也可以通过 workspace 管理 monorepo，可以看"),e("a",k,[o("Monorepo最佳实践之Yarn Workspaces"),r(n)]),o("了解 **")]),y,e("blockquote",null,[x,e("p",null,[e("a",w,[o("Github pnpm"),r(n)])]),e("p",null,[e("a",M,[o("Flat node_modules is not the only way"),r(n)])]),e("p",null,[e("a",v,[o("单体仓库与多仓库都有哪些优势劣势"),r(n)])]),e("p",null,[e("a",q,[o("What Is a Monorepo?"),r(n)])])])])}const E=t(i,[["render",j],["__file","为什么是 pnpm？我们为何使用monorepo？.html.vue"]]);export{E as default};
