import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as i,e as t}from"./app.d7b34baa.js";const o={},r=t('<h1 id="mobx-教程" tabindex="-1"><a class="header-anchor" href="#mobx-教程" aria-hidden="true">#</a> Mobx 教程</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501165700622.png" alt="image-20220501165700622" style="zoom:25%;"><p>一个可以和React良好配合的集中状态管理工具，</p><p>mobx和react的关系，相当于vuex和vue</p><p>同类工具还有：</p><ol><li><p>redux</p></li><li><p>dva</p></li><li><p>recoil</p></li></ol><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h3><ol><li><p>简单</p><p>编写无模板的极简代码来精准描述你的意图（原生js）</p></li><li><p>轻松实现最优渲染</p><p>依赖自动追踪最小渲染优化</p></li><li><p>架构自由</p><p>可移植，可测试</p></li></ol><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><h3 id="配置说明" tabindex="-1"><a class="header-anchor" href="#配置说明" aria-hidden="true">#</a> 配置说明</h3><p>Mobx是一个独立的响应式的库，可以独立于任何UI框架而存在，但是通常人们把它和React 来绑定使使用，用Mobx来做响应式数据建模，React作为UI视图框架渲染内容</p><p>所以配置方面我们需要三个部分：</p><ol><li>一个通过create-react-app 创建好的react项目环境</li><li>mobx本身</li><li>一个链接mobx和react的中间部件</li></ol><h3 id="如何配置" tabindex="-1"><a class="header-anchor" href="#如何配置" aria-hidden="true">#</a> 如何配置</h3><ol><li><p>使用 create-react-app初始化react项目</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501165845564.png" alt="image-20220501165845564"></p></li><li><p>安装mobx和mobx-react-lite</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501165859457.png" alt="image-20220501165859457"></p></li></ol><h2 id="第一个store" tabindex="-1"><a class="header-anchor" href="#第一个store" aria-hidden="true">#</a> 第一个store</h2><p>需求：使用Mobx实现计数器案例，mobx负责计数逻辑，react负责渲染和事件触发</p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501165935639.png" alt="image-20220501165935639" style="zoom:67%;"><h3 id="初始化mobx" tabindex="-1"><a class="header-anchor" href="#初始化mobx" aria-hidden="true">#</a> 初始化mobx</h3><p>实现步骤</p><ol><li>定义数据状态（state）</li><li>数据响应式处理</li><li>定义action函数 （修改数据）</li><li>实例化并导出实例</li></ol><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501170023292.png" alt="image-20220501170023292"></p><h3 id="连接react" tabindex="-1"><a class="header-anchor" href="#连接react" aria-hidden="true">#</a> 连接react</h3><p>实现步骤</p><ol><li>导入store实例</li><li>使用store中的数据</li><li>修改store中的数据</li><li>让组件视图响应数据变化</li></ol><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501170325716.png" alt="image-20220501170325716"></p><h2 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> computed</h2><p>**概念：**基于现有的数据做计算得到新的数据，并且可以在依赖的数据发生变化时立刻进行计算（与Vue同理）</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501170441549.png" alt="image-20220501170441549"></p><p>实现步骤</p><ol><li>声明一个存在的数据</li><li>定义get 计算属性 ( 定义计算公式 )</li><li>在makeAutoObservable方法中标记</li></ol><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501173035448.png" alt="image-20220501173035448"></p><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h2><p>一个项目有很多业务模块，我们不能把所有的代码都写到一起，这样很难维护，为了提供可维护性，需要引入模块化</p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501173146255.png" alt="image-20220501173146255"><h3 id="怎么做" tabindex="-1"><a class="header-anchor" href="#怎么做" aria-hidden="true">#</a> 怎么做？</h3><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501174752747.png" alt="image-20220501174752747"></p><ol><li>拆分Count和List模块，每个模块定义自己独立的state/actions</li><li>在store/index.js中导入拆分之后的模块，进行模块组合</li><li>使用React的 useContext机制导出统一的useStore方法，供业务组件使用</li></ol><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501174855195.png" alt="image-20220501174855195"></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><strong>1. 初始化mobx的过程是怎样的 ？</strong></p><p>声明数据 -&gt; 响应式处理 -&gt; 定义action函数 -&gt; 实例化导出</p><p><strong>2. mobx如何配合react, 需要依赖什么包 ？</strong></p><p>mobx-react-lite作为链接包，导出observer方法，包裹组件（只能和函数组件配合）</p><p><strong>3. 模块化解决了什么问题 ？</strong></p><p>维护性问题</p><p><strong>4. 如何实现mobx的模块化 ？</strong></p><p>按照功能拆分store模块，根模块中组合子模块，利用context机制依赖注入</p><h2 id="职责划分" tabindex="-1"><a class="header-anchor" href="#职责划分" aria-hidden="true">#</a> 职责划分</h2><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501175110210.png" alt="image-20220501175110210"></p>',51),l=[r];function c(p,m){return a(),i("div",null,l)}const h=e(o,[["render",c],["__file","Mobx 教程.html.vue"]]);export{h as default};
