import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as p,a,b as s,d as l,e as o,r as c}from"./app.d7b34baa.js";const i={},r=o(`<h1 id="伪类与伪元素的区别" tabindex="-1"><a class="header-anchor" href="#伪类与伪元素的区别" aria-hidden="true">#</a> 伪类与伪元素的区别</h1><h3 id="伪类-pseudo-classes" tabindex="-1"><a class="header-anchor" href="#伪类-pseudo-classes" aria-hidden="true">#</a> <strong>伪类(pseudo-classes)</strong></h3><p>其核心就是用来选择那些不能够被普通选择器选择的文档之外的元素，比如:hover。</p><h3 id="伪元素-pseudo-elements" tabindex="-1"><a class="header-anchor" href="#伪元素-pseudo-elements" aria-hidden="true">#</a> <strong>伪元素(Pseudo-elements)</strong></h3><p>其核心就是需要创建通常不存在于文档中的元素，比如::before。</p><h3 id="伪类与伪元素的区别-1" tabindex="-1"><a class="header-anchor" href="#伪类与伪元素的区别-1" aria-hidden="true">#</a> <strong>伪类与伪元素的区别</strong></h3><ul><li><p>表示方法</p><p>CSS2 中伪类、伪元素都是以单冒号<code>:</code>表示，CSS2.1 后规定伪类用单冒号表示，伪元素用双冒号<code>::</code>表示，浏览器同样接受 CSS2 时代已经存在的伪元素(:before, :after, :first-line, :first-letter 等)的单冒号写法。对于 CSS2 之后所有新增的伪元素(如::selection)，应该采用双冒号的写法。但是因为兼容性问题，大部分还是用的单冒号。</p></li><li><p>定义不同</p><p>伪类即假的类，通常可以添加类来达到效果，伪元素即假元素，需要通过添加元素才能达到效果。来看下面的例子</p><p><strong>例 1:将一行字符串的首字母变成红色</strong></p><p>现在不用伪元素应该如何实现？用 CSS slector 选择？想了一晚上也没想出来，既然没法选择也就没法添加一个类来改变首字母的颜色。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>I am snow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加元素试试，如下，创建一个元素 span 将首字母包裹起来，进而改变其颜色，成功了。这里，关键点在于我们创建了新的元素达到了<code>::first-letter</code>的作用，且不能通过添加其他类来实现这一效果，因此将<code>::first-letter</code>叫做伪元素而不是伪类。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value css language-css"><span class="token punctuation">{</span><span class="token punctuation">{</span></span></span></span> <span class="token attr-name"><span class="token namespace">color:</span></span> <span class="token attr-name">red</span> <span class="token attr-name">}}</span><span class="token punctuation">&gt;</span></span>I<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">/&gt;</span></span> am snow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>例 2: 如下要将 I am snow 这句话变为红色</strong></p><p>很简单用<code>:first-child</code>，同样添加一个类试试，显然很容易达到同样效果，我们并没有创建新的元素只是添加了一个类<code>.red-line</code>，因此将<code>:first-child</code>叫做伪类而不是伪元素，尽管它和<code>::first-letter</code>在语义上十分相似。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>div:first-child {
 color: red;
}
或
.red-line {
   color: red;
}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>red-line<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>I am snow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> <strong>结论</strong></h3><ul><li>伪类和伪元素都是用来表示文档树以外的&quot;元素&quot;。</li><li>伪类和伪元素分别用单冒号<code>:</code>和双冒号<code>::</code>来表示。</li><li>伪类和伪元素的区别，最关键的点在于如果没有伪元素(或伪类)，是否需要添加元素才能达到目的，如果是则是伪元素，反之则是伪类。</li></ul>`,9),d={href:"https://juejin.cn/post/6844903807386648583",target:"_blank",rel:"noopener noreferrer"};function u(k,g){const n=c("ExternalLinkIcon");return t(),p("div",null,[r,a("p",null,[s("关于常用的伪类与伪元素选择器可以查看"),a("a",d,[s("CSS选择器"),l(n)]),s("一文。")])])}const v=e(i,[["render",u],["__file","伪类与伪元素的区别.html.vue"]]);export{v as default};
