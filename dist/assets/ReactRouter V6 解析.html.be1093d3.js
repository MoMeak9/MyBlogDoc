import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as t,e}from"./app.d7b34baa.js";const n={},o=e(`<h1 id="reactrouter-v6-解析" tabindex="-1"><a class="header-anchor" href="#reactrouter-v6-解析" aria-hidden="true">#</a> ReactRouter V6 解析</h1><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h2><p>基于项目模板安装react-router-dom</p><p><code> yarn add react-router-dom@6</code></p><h2 id="核心组件" tabindex="-1"><a class="header-anchor" href="#核心组件" aria-hidden="true">#</a> 核心组件</h2><h3 id="browerrouter" tabindex="-1"><a class="header-anchor" href="#browerrouter" aria-hidden="true">#</a> BrowerRouter</h3><p>**作用：**包裹整个应用，一个 React 应用只需要使用一次</p><p><strong>两种常用 Router</strong> <strong>:</strong> HashRouter 和 BrowserRouter</p><p><strong>HashRouter</strong></p><p>使用 URL 的哈希值实现（http://localhost:3000/#/first）</p><p><strong>BrowserRouter</strong> <strong>(</strong> <strong>推荐</strong> <strong>)</strong></p><p>使用 H5 的 history.pushState API 实现（http://localhost:3000/first）</p><h3 id="link" tabindex="-1"><a class="header-anchor" href="#link" aria-hidden="true">#</a> Link</h3><p><strong>作用</strong> **：**用于指定导航链接，完成路由跳转</p><p><strong>语法说明：</strong> 组件通过to属性指定路由地址，最终会渲染为a链接元素</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">&lt;</span>Link to <span class="token operator">=</span> <span class="token string">&quot;/path&quot;</span><span class="token operator">&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="routes" tabindex="-1"><a class="header-anchor" href="#routes" aria-hidden="true">#</a> Routes</h3><p><strong>作用</strong> **：**提供一个路由出口，满足条件的路由组件会渲染到组件内部，定义path和组件的对应关系。用于指定导航链接，完成路由匹配</p><p><strong>语法说明：</strong> path属性指定匹配的路径地址，element属性指定要渲染的组件。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">About</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**说明：**当url路径为 ‘/about’ 时，会渲染<code>&lt;About/&gt;</code>组件</p><h2 id="编程式导航" tabindex="-1"><a class="header-anchor" href="#编程式导航" aria-hidden="true">#</a> 编程式导航</h2><h3 id="跳转" tabindex="-1"><a class="header-anchor" href="#跳转" aria-hidden="true">#</a> 跳转</h3><p><strong>作用</strong> **：**通过js编程的方式进行路由页面跳转，比如从登录页跳转到关于页</p><p><strong>语法说明：</strong></p><ol><li><p>导入useNavigate钩子函数</p></li><li><p>执行钩子函数得到跳转函数</p></li><li><p>执行跳转函数完成跳转</p></li></ol><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501164235089.png" alt="image-20220501164235089"></p><p><strong>注意</strong>：如果在跳转时不想加历史记录，可以添加额外参数replace为true</p><h3 id="跳转携带参数" tabindex="-1"><a class="header-anchor" href="#跳转携带参数" aria-hidden="true">#</a> 跳转携带参数</h3><p><strong>场景</strong> **：**有些时候不光需要跳转路由还需要传递参数</p><p><strong>俩种方式：</strong></p><ol><li><p>searchParams传参</p><p>传参：</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501163904592.png" alt="image-20220501163904592"></p><p>取参：</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501163925464.png" alt="image-20220501163925464"></p></li><li><p>params传参（path配合：/：id）</p><p>传参：</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501163948813.png" alt="image-20220501163948813"></p><p>取参：</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501164004751.png" alt="image-20220501164004751"></p></li></ol><h2 id="嵌套路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由" aria-hidden="true">#</a> 嵌套路由</h2><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><ol><li><p>App.js: 定义嵌套路由声明</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501164359039.png" alt="image-20220501164359039"></p></li><li><p>Layout.js: 使用 <code>&lt;Outlet /&gt;</code>指定二级路由出口</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501164447292.png" alt="image-20220501164447292"></p></li></ol><h3 id="默认二级路由" tabindex="-1"><a class="header-anchor" href="#默认二级路由" aria-hidden="true">#</a> 默认二级路由</h3><p><strong>场景：</strong> 应用首次渲染完毕就需要显示的二级路由</p><p><strong>怎么做：</strong> 1. 给默认路由标记index 2. 修改跳转路径path</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501164516536.png" alt="image-20220501164516536"></p><h2 id="_404页配置" tabindex="-1"><a class="header-anchor" href="#_404页配置" aria-hidden="true">#</a> 404页配置</h2><p>**场景：**当所有的路径都没有匹配的时候显示</p><p><strong>语法说明：</strong> 在各级路由的最后添加 * 号路由 作为兜底</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/image-20220501164630342.png" alt="image-20220501164630342"></p>`,43),p=[o];function r(i,c){return s(),t("div",null,p)}const h=a(n,[["render",r],["__file","ReactRouter V6 解析.html.vue"]]);export{h as default};
