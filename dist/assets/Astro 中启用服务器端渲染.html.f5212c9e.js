import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as i,a as n,b as a,d as e,e as t,r}from"./app.d7b34baa.js";const c={},l=t('<h1 id="astro-中通过-node-js-启用服务器端渲染" tabindex="-1"><a class="header-anchor" href="#astro-中通过-node-js-启用服务器端渲染" aria-hidden="true">#</a> Astro 中通过 Node.js 启用服务器端渲染</h1><p>在 Astro 中启用服务端渲染（SSR, Server Side Rendering）非常简单，而且启用后可以使用新的特性：</p><ul><li>在应用程序中实现登录状态会话。</li><li>用 <code>fetch</code> 动态调用 API 来渲染数据。</li><li>通过<strong>适配器</strong>部署你的网站。</li></ul><h2 id="适配器" tabindex="-1"><a class="header-anchor" href="#适配器" aria-hidden="true">#</a> 适配器</h2><p>为了启用 SSR，你需要使用适配器（Adapter)。这是因为 SSR 需要服务器<strong>运行时</strong>环境运行服务端代码。服务端代码可以调用该运行时提供的 API。</p><p>安装一个适配器可以让 Astro 访问相应的 API，并允许 Astro 输出一个脚本（server脚本），在服务器上运行我们项目。</p><p>现有以下适配器，未来将会有更多适配器支持：</p>',7),d={href:"https://github.com/withastro/astro/tree/main/packages/integrations/cloudflare",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/withastro/astro/tree/main/packages/integrations/deno",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/withastro/astro/tree/main/packages/integrations/netlify",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/withastro/astro/tree/main/packages/integrations/node",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/withastro/astro/tree/main/packages/integrations/vercel",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>我们主要介绍Node.js 适配器</p><h2 id="安装node-js适配器" tabindex="-1"><a class="header-anchor" href="#安装node-js适配器" aria-hidden="true">#</a> 安装Node.js适配器</h2><p>使用以下 astro add 命令添加适配器，以在 Astro 项目中启用 SSR。这将安装适配器并一步对项目的 <code>astro.config.mjs</code> 文件进行适当的更改。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Using NPM</span>
npx astro <span class="token function">add</span> <span class="token function">node</span>
<span class="token comment"># Using Yarn</span>
<span class="token function">yarn</span> astro <span class="token function">add</span> <span class="token function">node</span>
<span class="token comment"># Using PNPM</span>
<span class="token function">pnpm</span> astro <span class="token function">add</span> <span class="token function">node</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手动安装：</strong></p><ol><li><p>在终端中安装Node.js适配器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @astrojs/node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 <code>astro.config.mjs</code> 项目配置文件中添加两行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// astro.config.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;astro/config&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> node <span class="token keyword">from</span> <span class="token string">&#39;@astrojs/node&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;server&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;standalone&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="配置项参数" tabindex="-1"><a class="header-anchor" href="#配置项参数" aria-hidden="true">#</a> 配置项参数</h2><p><code>@astrojs/node</code> 可以通过将选项参数传递给适配器函数来配置：</p><h3 id="mode-模式设置" tabindex="-1"><a class="header-anchor" href="#mode-模式设置" aria-hidden="true">#</a> Mode 模式设置</h3><p>控制适配器是构建为中间件<code>middleware</code>模式还是独立<code>standalone</code>模式。</p><ul><li><p>中间件模式允许将构建的输出用作另一个 Node.js 服务器的中间件，例如 Express.js 或 Fastify。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;astro/config&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> node <span class="token keyword">from</span> <span class="token string">&#39;@astrojs/node&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;server&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;middleware&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>独立模式构建的服务器脚本，随着入口模块的运行自动启动。这使得我们可以更轻松地将构建部署到主机，而无需任何其他代码。</p></li></ul><h2 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h2><p>根据两种不同的模式，有着不同的启动和使用方法</p><h3 id="中间件模式" tabindex="-1"><a class="header-anchor" href="#中间件模式" aria-hidden="true">#</a> 中间件模式</h3><p>服务器入口点默认构建为 <code>./dist/server/entry.mjs</code>。该模块导出一个处理函数，可以与任何支持 Node 请求和响应对象的框架一起使用，比如Express：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> handler <span class="token keyword">as</span> ssrHandler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dist/server/entry.mjs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;dist/client/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 静态资源文件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ssrHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 中间件模式不提供文件服务，需要配置 HTTP 框架，如上代码所示。默认情况下，客户端输出在<code> ./dist/client/</code></p><h3 id="独立模式" tabindex="-1"><a class="header-anchor" href="#独立模式" aria-hidden="true">#</a> 独立模式</h3><p>独立模式启动很简单，只要执行构建的入口文件<code>./dist/server/entry.mjs</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> ./dist/server/entry.mjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于独立模式，服务端除了处理页面和 API 路由之外还具有文件服务。</p><h4 id="自定义主机和端口" tabindex="-1"><a class="header-anchor" href="#自定义主机和端口" aria-hidden="true">#</a> 自定义主机和端口</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">HOST</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">3000</span> <span class="token function">node</span> ./dist/server/entry.mjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23),g=n("p",null,[n("strong",null,"参考：")],-1),b={href:"https://github.com/withastro/astro/tree/main/packages/integrations/node",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.astro.build/zh-cn/guides/server-side-rendering/",target:"_blank",rel:"noopener noreferrer"};function _(y,j){const s=r("ExternalLinkIcon");return p(),i("div",null,[l,n("ul",null,[n("li",null,[n("a",d,[a("Cloudflare"),e(s)])]),n("li",null,[n("a",u,[a("Deno"),e(s)])]),n("li",null,[n("a",k,[a("Netlify"),e(s)])]),n("li",null,[n("a",v,[a("Node.js"),e(s)])]),n("li",null,[n("a",m,[a("Vercel"),e(s)])])]),h,n("blockquote",null,[g,n("p",null,[n("a",b,[a("astro/packages/integrations/node at main · withastro/astro"),e(s)])]),n("p",null,[n("a",f,[a("服务端渲染 🚀 Astro 文档"),e(s)])])])])}const N=o(c,[["render",_],["__file","Astro 中启用服务器端渲染.html.vue"]]);export{N as default};
