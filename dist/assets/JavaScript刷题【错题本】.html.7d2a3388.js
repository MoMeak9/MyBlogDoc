import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as p}from"./app.d7b34baa.js";const e={},t=p(`<h1 id="javascript刷题【错题本】" tabindex="-1"><a class="header-anchor" href="#javascript刷题【错题本】" aria-hidden="true">#</a> JavaScript刷题【错题本】</h1><ol><li><p>AMD和CMD都是浏览器端的js模块化规范，分别由require.js和sea.js实现。 CommonJS是服务器端的js模块化规范，由NodeJS实现。</p></li><li><p>(()=&gt;{}).length; 获取方法形参个数，形参为0</p></li><li><p>+[] 隐式类型转换，因为[]是对象，所以toPrimitive-&gt;valueOf-&gt;toString为&#39;&#39;，结果就是+&#39;&#39;===0</p></li><li><p>阻止默认事件：</p><p>e.preventDefault()</p><p>e.returnValue = false (IE)</p><p>阻止冒泡：</p><p>e.stopPropagation()</p><p>e.cancelBubble = true (IE)</p></li><li><p>虽然在绝大多数编程语言中，0是不能作为分母，但在js中，0是可以作分母的，0/0的结果为NaN，并不会抛出异常，因此会执行try块中所有代码</p></li><li><p>readystatechange 读取状态变化</p><p>pageshow 页面展示</p><p>beforeunload 页面退出</p><p>DOMContentLoaded dom内容加载完成</p></li><li><p><strong>模块查找顺序：</strong></p><p>(1):首先，Node在当前目录下查找package.json(CommonJS包规范定义的包描述文件)，通过JSON.parse()解析出包描述对象，从中取出main属性指定的文件名进行定位。如果文件缺少扩展名，将会进入扩展名分析的步骤。</p><p>(2):而如果main属性制定的文件名错误，或者压根没有package.json文件，Node会将index当做默认文件名，然后依次查找index.js、index.node、index.json.</p><p>(3):如果在目录分析的过程中没有定位成功任何文件，则自定义模块进入下一个模块路径进行查找。如果模块路径数组都被遍历完毕，依然没有查找到目标文件，则会抛出查找失败异常。</p><p>按照上面的思路，首先应该查找package.json文件，看看里面有没有核心模块，应该是C最先，othermodule不是核心模块，那么接着应该进入扩展名分析的步骤，就应该是查找othermodule. js，对应B，紧接着就是以index为默认文件名，也就是A，再接下来就是上一个文件目录D了，</p></li><li><p>JavaScript的全局函数:</p><p>decodeURI() 解码某个编码的 URI。</p><p>decodeURIComponent() 解码一个编码的 URI 组件。</p><p>encodeURI() 把字符串编码为 URI。</p><p>encodeURIComponent() 把字符串编码为 URI 组件。</p><p>escape() 对字符串进行编码。</p><p>eval() 计算 JavaScript 字符串，并把它作为脚本代码来执行。</p><p>isFinite() 检查某个值是否为有穷大的数。</p><p>isNaN() 检查某个值是否是数字。</p><p>Number() 把对象的值转换为数字。</p><p>parseFloat() 解析一个字符串并返回一个浮点数。</p><p>parseInt() 解析一个字符串并返回一个整数。</p><p>String() 把对象的值转换为字符串。</p><p>unescape() 对由 escape() 编码的字符串进行解码</p><p><strong>setTimeout 是 DOM 提供的函数</strong></p></li><li><p>document对象方法</p></li><li><p>window对象方法</p></li><li><p>parseInt() 函数可解析一个字符串，并返回一个整数。所以说，number类型的12.34发生隐式转换为string。</p></li><li><p>关于立即执行函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    add <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//此行代码作废，无效，因为此行代码的意思是要修改函数名，此处是立即执行函数，不允许被修改！</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 此时的a成为全局变量，挂在到window上！</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    add <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">=</span><span class="token number">2</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2  这地方的a在预解析变量声明提升处理完成后，最后一步会把同名的参数a的值2，赋值给变量a</span>
   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>

<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//1 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ES6中的类可以视为ES5中构造函数的另一种写法，所以<code>typeof</code> <code>Phone</code>的输出结果为function而不是Object</p></li><li><p>下面哪些方法可以用于JavaScript 异步模式的编程？</p><p>回调函数，这是异步编程最基本的方法。 事件监听，另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。 发布/订阅，上一节的&quot;事件&quot;，完全可以理解成&quot;信号&quot;。 Promises对象，Promises 对象是CommonJS 工作组提出的一种规范，目的是为异步编程提供统一接口。</p></li><li><p><strong>ES5:</strong></p><p>orEach(), filter(), reduce(), every() 和some()都会跳过空位。</p><p>map()会跳过空位，但会保留这个值</p><p>join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。</p><p><strong>ES6 中都会将空位当做undefined</strong></p></li><li><p>类型隐式转换：</p><p>参照左侧转换为右侧</p></li><li><p>Referer是request Header里的内容，不是response header里的内容</p></li><li><p>preventDefault() 取消事件默认行为，如阻止点击提交按钮时对表单的提交（本题中click并没有什么默认行为） stopImmediatePropagation() 取消事件冒泡同时阻止当前节点上的事件处理程序被调用，影响当前的事件</p><p>stopPropagation() 取消事件冒泡，不影响事件</p><p>cancelBubbe() 取消事件冒泡</p><p>returnValue() 取消事件默认行为</p></li><li><p>a标签不能套a标签，p标签不能套块标签</p></li><li><p>B选项输出值为0是因为forEach方法在数组元素为空时会跳过执行回调函数，相当于此选项回调函数并未执行，所以还是输出0。</p></li><li><p>行内js——javascript:return void(0)或javascript:return confirm(&quot;……&quot;);</p></li><li><p>JavaScript高级程序设计上面的原话：RegExp 对象的主要方法是 exec()，该方法是专门为捕获组而设计的。 exec()接受一个参数，即要应用模式的字符串，然后返回包含第一个匹配项信息的数组；或者在没有匹配项的情况下返回 null。</p></li><li><p><img src="https://cdn.yihuiblog.top/images/202207162018415.png" alt="img"></p></li><li><p>d.setDate(n);</p><p>n表示一个月中的一天的一个数值（1 ~ 31）:</p><p>0 为上一个月的最后一天 -1 为上一个月最后一天之前的一天 如果当月有 31 天: 32 为下个月的第一天 如果当月有 30 天:</p><p>32 为下一个月的第二天;</p><p>40 为下一个月的第9天;</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在预解析下，函数和变量都会发生提升，且函数提升在变量提升之前，故在全局作用域下，a首先被定义为函数变量，接着又被覆盖为一个数值型，然后再调用函数a，显然会抛出异常，原因是a已经不再是函数。在函数内部，还存在着局部变量a，但它对函数外部的变量不会产生影响。</p></li><li></li></ol>`,2),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","JavaScript刷题【错题本】.html.vue"]]);export{d as default};
