import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as p,a,b as s,d as c,e as o,r as l}from"./app.d7b34baa.js";const d={},i=o(`<blockquote><p>关于写公司项目的时候因为没有给组件的<code>&lt;style&gt;</code>加上<code>scoped</code> 属性，导致影响了整个项目的样式，而且还<code>push</code>上了<code>gitlab</code>，特别写了此篇避坑，希望大家引以为戒。</p></blockquote><h1 id="scoped属性的用途和工作原理" tabindex="-1"><a class="header-anchor" href="#scoped属性的用途和工作原理" aria-hidden="true">#</a> scoped属性的用途和工作原理</h1><h2 id="style加scoped的用途和原理" tabindex="-1"><a class="header-anchor" href="#style加scoped的用途和原理" aria-hidden="true">#</a> style加scoped的用途和原理</h2><blockquote><p>在标签上绑定了自定义属性，防止css全局污染 但是很多时候使用ui框架如果加scope就不能覆盖，这个时候一般写sass 会在最外层包裹该组件名的id 就可以不使用scoped 了, 不过用/deep/也可以对组件内的样式进行覆盖</p></blockquote><p>用途：防止全局同名CSS污染</p><p>原理：在标签加上v-data-something属性，再在选择器时加上对应[v-data-something]，即CSS带属性选择器，以此完成类似作用域的选择方式</p><p><img src="https://pic2.zhimg.com/80/v2-75d8c9a12c8b3049677f09fdf72a14dd_720w.png" alt="img"></p><p><strong>一、scoped会在元素上添加唯一的属性（data-v-x形式），css编译后也会加上属性选择器，从而达到限制作用域的目的。</strong></p><p>缺点：</p><p>（1）由于只是通过属性限制，类还是原来的类，所以在其他地方对类设置样式还是可以造成污染。</p><p>（2）添加了属性选择器，对于CSS选择器的权重加重了。</p><p>（3）外层组件包裹子组件，会给子组件的根节点添加data属性。在外层组件中无法修改子组件中除了根节点以外的节点的样式。比如子组件中有box类，在父节点中设置样式，会被编译为</p><p>.box[data-v-x]的形式，但是box类所在的节点上没有添加data属性，因此无法修改样式。</p><p>可以使用/deep/或者&gt;&gt;&gt;穿透CSS，这样外层组件设置的box类编译后的就为[data-v-x] .box了，就可以进行修改。</p><p><strong>二、可以使用CSS Module</strong></p><p>CSS Module没有添加唯一属性，而是通过修改类名限制作用域。这样类发生了变化，在其他地方设置样式无法造成污染，也没有使CSS选择器的权重增加。</p><p>这里给大家排个坑，这里虽然设置了scoped 如果我们使用bootstrap的话，因为bootstrap是设置的全局属性，可能会有冲突，</p><h2 id="scoped-css" tabindex="-1"><a class="header-anchor" href="#scoped-css" aria-hidden="true">#</a> Scoped CSS</h2><p>当 <code>&lt;style&gt;</code> 标签有 <code>scoped</code> 属性时，它的 CSS 只作用于当前组件中的元素。这类似于 Shadow DOM 中的样式封装。它有一些注意事项，但不需要任何 polyfill。它通过使用 PostCSS 来实现以下转换：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.example</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换结果：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.example[data-v-f3f3eg9]</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-v-f3f3eg9</span><span class="token punctuation">&gt;</span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于css作用域" tabindex="-1"><a class="header-anchor" href="#关于css作用域" aria-hidden="true">#</a> 关于css作用域</h3><p>之前一直很困扰css的作用域问题，即使是模块化编程下，在对应的模块的js中import css进来，这个css仍然是全局的。导致在css中需要加上对应模块的html的id/class 使用css选择器 保证css的作用域不会变成全局 而被其它模块的css污染。</p><p>在vue中引入了scoped这个概念，scoped的设计思想就是让当前组件的样式不会修改到其它地方的样式，使用了data-v-hash的方式来使css有了它对应模块的标识，这样写css的时候不需要加太多额外的选择器，方便很多。</p><p>但是要注意scoped的作用域，因为权重的问题，如果是在子组件使用了scoped，那么在父组件中是不能直接修改子组件的样式的，需要在父组件中使用vue的深度作用选择器。</p><h3 id="scoped坑点" tabindex="-1"><a class="header-anchor" href="#scoped坑点" aria-hidden="true">#</a> scoped坑点</h3><p>在覆盖iview组件样式的时候发现一个问题，就是无法覆盖组件原有的样式，最后在github的<code>issue</code>中找到了答案： 不要使用<code>scoped</code>属性。于是我查找了下关于<code>scoped</code>的文章。</p><p>我们假设把这种组件叫做模块私有组件，其他的未加scoped的叫做模块一般组件。通过查看DOM结构发现：vue通过在DOM结构以及css样式上加唯一不重复的标记，以保证唯一，达到样式私有化模块化的目的。</p><p><strong><code>scoped</code>三条渲染规则：</strong></p><ol><li><p>给HTML的DOM节点加一个不重复data属性(形如：<code>data-v-19fca230</code>)来表示他的唯一性</p></li><li><p>在每句css选择器的末尾（编译后的生成的css语句）加一个当前组件的<code>data</code>属性选择器（如<code>[data-v-19fca230]</code>）来私有化样式</p></li><li><p>如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性</p></li></ol><h2 id="混用本地和全局样式" tabindex="-1"><a class="header-anchor" href="#混用本地和全局样式" aria-hidden="true">#</a> 混用本地和全局样式</h2><p>你可以在一个组件中同时使用有 scoped 和非 scoped 样式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token comment">/* 全局样式 */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token comment">/* 本地样式 */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子组件的根元素" tabindex="-1"><a class="header-anchor" href="#子组件的根元素" aria-hidden="true">#</a> 子组件的根元素</h3><p>使用 <code>scoped</code> 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件的 scoped CSS 和子组件的 scoped CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。</p><h3 id="深度作用选择器" tabindex="-1"><a class="header-anchor" href="#深度作用选择器" aria-hidden="true">#</a> 深度作用选择器</h3><p>如果你希望 <code>scoped</code> 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 <code>&gt;&gt;&gt;</code> 操作符：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.a &gt;&gt;&gt; .b</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将会编译成：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.a[data-v-f3f3eg9] .b</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有些像 Sass 之类的预处理器无法正确解析 <code>&gt;&gt;&gt;</code>。这种情况下你可以使用 <code>/deep/</code> 或 <code>::v-deep</code> 操作符取而代之——两者都是 <code>&gt;&gt;&gt;</code> 的别名，同样可以正常工作。</p><h3 id="动态生成的内容" tabindex="-1"><a class="header-anchor" href="#动态生成的内容" aria-hidden="true">#</a> 动态生成的内容</h3><p>通过 <code>v-html</code> 创建的 DOM 内容不受 scoped 样式影响，但是你仍然可以通过深度作用选择器来为他们设置样式。</p><h3 id="还有一些要留意" tabindex="-1"><a class="header-anchor" href="#还有一些要留意" aria-hidden="true">#</a> 还有一些要留意</h3><ul><li><strong>Scoped 样式不能代替 class</strong>。考虑到浏览器渲染各种 CSS 选择器的方式，当 <code>p { color: red }</code> 是 scoped 时 (即与特性选择器组合使用时) 会慢很多倍。如果你使用 class 或者 id 取而代之，比如 <code>.example { color: red }</code>，性能影响就会消除。</li><li><strong>在递归组件中小心使用后代选择器!</strong> 对选择器 <code>.a .b</code> 中的 CSS 规则来说，如果匹配 <code>.a</code> 的元素包含一个递归子组件，则所有的子组件中的 <code>.b</code> 都将被这个规则匹配。</li></ul><h2 id="问题补充" tabindex="-1"><a class="header-anchor" href="#问题补充" aria-hidden="true">#</a> <strong>问题补充：</strong></h2><h3 id="如果不使用scoped-如何解决样式全局污染" tabindex="-1"><a class="header-anchor" href="#如果不使用scoped-如何解决样式全局污染" aria-hidden="true">#</a> 如果不使用<code>scoped，</code>如何解决样式全局污染？</h3><p>推荐使用<code>scoped</code>推动组件私有化，文章所提到的不使用仅出现在已有UI库的样式覆盖上（当然人家用了<code>scoped</code> 那就很难办了）。</p><p>首先，解决<strong>组件样式全局污染</strong>，也就是我们在这里不使用<code>scoped</code> 覆盖了样式，那么我们在其他地方调用该组件就会被覆盖。那么我们在使用组件的时候对组件给一个<strong>类名</strong> 或者其他甄别属性（id），覆盖样式就针对该类名进行重写样式。</p><p>其次，解决<strong>其他样式全局污染</strong>，如果我们通过：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>less<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;./test.less&quot;</span><span class="token punctuation">;</span></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引进样式，那么不使用<code>scoped</code> ，<code>&quot;./test.less&quot;</code> 中的其他类名样式可能会污染全局，我这里用一个比较笨的方法处理：在模板中使用两次<code>&lt;style&gt;&lt;/style&gt;</code> 标签：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>less<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;./test.less&quot;</span><span class="token punctuation">;</span></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>less<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
//你的覆盖样式
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样既覆盖了样式，其他样式不会被覆盖到全局，感兴趣的同学可以自己试一试。（注意两个标签的顺序）。</p>`,55),u={href:"https://vue-loader.vuejs.org/zh/guide/scoped-css.html",target:"_blank",rel:"noopener noreferrer"},r=a("code",null,"<style></style>",-1);function k(g,v){const n=l("ExternalLinkIcon");return t(),p("div",null,[i,a("p",null,[s("官网 "),a("a",u,[s("vue-loader"),c(n)]),s(" 中提到每个vue模板中可以有多个"),r,s(" 标签，所以上面的写法是没有问题的。")])])}const b=e(d,[["render",k],["__file","Vue scoped属性的用途和工作原理.html.vue"]]);export{b as default};
