import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as e,b as n,d as s,e as r,r as i}from"./app.d7b34baa.js";const d={},l=r(`<h1 id="react-源码文件结构" tabindex="-1"><a class="header-anchor" href="#react-源码文件结构" aria-hidden="true">#</a> React 源码文件结构</h1><h2 id="顶层目录" tabindex="-1"><a class="header-anchor" href="#顶层目录" aria-hidden="true">#</a> 顶层目录</h2><p>除去配置文件和隐藏文件夹，根目录的文件夹包括三个：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>根目录
├── fixtures        # 包含一些给贡献者准备的小型 React 测试项目
├── packages        # 包含元数据（比如 package.json）和 React 仓库中所有 package 的源码（子目录 src）
├── scripts         # 各种工具链的脚本，比如git、jest、eslint等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>^5cfbe9</p><p>这里我们关注<strong>packages</strong>目录</p><h2 id="packages目录" tabindex="-1"><a class="header-anchor" href="#packages目录" aria-hidden="true">#</a> packages目录</h2>`,7),p={id:"react-opens-new-window-文件夹",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#react-opens-new-window-文件夹","aria-hidden":"true"},"#",-1),_={href:"https://github.com/facebook/react/tree/master/packages/react",target:"_blank",rel:"noopener noreferrer"},u=e("p",null,"React的核心，包含所有全局 React API，如：",-1),m=e("ul",null,[e("li",null,"React.createElement"),e("li",null,"React.Component"),e("li",null,"React.Children")],-1),b=e("code",null,"ReactDOM",-1),v=e("code",null,"ReactNative",-1),g={href:"https://www.npmjs.com/package/react",target:"_blank",rel:"noopener noreferrer"},k={id:"scheduler-opens-new-window-文件夹",tabindex:"-1"},f=e("a",{class:"header-anchor",href:"#scheduler-opens-new-window-文件夹","aria-hidden":"true"},"#",-1),w={href:"https://react.iamkasong.com/preparation/file.html#scheduler%E6%96%87%E4%BB%B6%E5%A4%B9",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/facebook/react/tree/master/packages/scheduler",target:"_blank",rel:"noopener noreferrer"},x=e("p",null,"Scheduler（调度器）的实现。",-1),R={id:"shared-opens-new-window-文件夹",tabindex:"-1"},B=e("a",{class:"header-anchor",href:"#shared-opens-new-window-文件夹","aria-hidden":"true"},"#",-1),A={href:"https://react.iamkasong.com/preparation/file.html#shared%E6%96%87%E4%BB%B6%E5%A4%B9",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/facebook/react/tree/master/packages/shared",target:"_blank",rel:"noopener noreferrer"},C=e("strong",null,"方法",-1),S=e("strong",null,"全局变量",-1),j={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/shared/ReactSymbols.js",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"React",-1),N=r(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token constant">REACT_ELEMENT_TYPE</span> <span class="token operator">=</span> <span class="token number">0xeac7</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token constant">REACT_PORTAL_TYPE</span> <span class="token operator">=</span> <span class="token number">0xeaca</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token constant">REACT_FRAGMENT_TYPE</span> <span class="token operator">=</span> <span class="token number">0xeacb</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P={id:"renderer相关的文件夹",tabindex:"-1"},M=e("a",{class:"header-anchor",href:"#renderer相关的文件夹","aria-hidden":"true"},"#",-1),I={href:"https://react.iamkasong.com/preparation/file.html#renderer%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9",target:"_blank",rel:"noopener noreferrer"},L=r(`<p>如下几个文件夹为对应的<strong>Renderer</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- react-art
- react-dom                 # 注意这同时是DOM和SSR（服务端渲染）的入口
- react-native-renderer
- react-noop-renderer       # 用于debug fiber（后面会介绍fiber）
- react-test-renderer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),V={id:"试验性包的文件夹",tabindex:"-1"},O=e("a",{class:"header-anchor",href:"#试验性包的文件夹","aria-hidden":"true"},"#",-1),Y={href:"https://react.iamkasong.com/preparation/file.html#%E8%AF%95%E9%AA%8C%E6%80%A7%E5%8C%85%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9",target:"_blank",rel:"noopener noreferrer"},D=r(`<p><code>React</code>将自己流程中的一部分抽离出来，形成可以独立使用的包，由于他们是试验性质的，所以不被建议在生产环境使用。包括如下文件夹：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- react-server        # 创建自定义SSR流
- react-client        # 创建自定义的流
- react-fetch         # 用于数据请求
- react-interactions  # 用于测试交互相关的内部特性，比如React的事件模型
- react-reconciler    # Reconciler的实现，你可以用他构建自己的Renderer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),F={id:"辅助包的文件夹",tabindex:"-1"},G=e("a",{class:"header-anchor",href:"#辅助包的文件夹","aria-hidden":"true"},"#",-1),q={href:"https://react.iamkasong.com/preparation/file.html#%E8%BE%85%E5%8A%A9%E5%8C%85%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9",target:"_blank",rel:"noopener noreferrer"},z=r(`<p><code>React</code>将一些辅助功能形成单独的包。包括如下文件夹：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- react-is       # 用于测试组件是否是某类型
- react-client   # 创建自定义的流
- react-fetch    # 用于数据请求
- react-refresh  # “热重载”的React官方实现
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react-reconciler-文件夹" tabindex="-1"><a class="header-anchor" href="#react-reconciler-文件夹" aria-hidden="true">#</a> react-reconciler 文件夹</h3><p>我们需要重点关注<strong>react-reconciler</strong>，在接下来源码学习中 80%的代码量都来自这个包。</p><p>虽然他是一个实验性的包，内部的很多功能在正式版本中还未开放。但是他一边对接<strong>Scheduler</strong>，一边对接不同平台的<strong>Renderer</strong>，构成了整个 React16 的架构体系。</p>`,5);function H(J,K){const a=i("ExternalLinkIcon");return o(),c("div",null,[l,e("h3",p,[h,n(),e("a",_,[n("react (opens new window)"),s(a)]),n("文件夹")]),u,m,e("p",null,[n("这些 API 是全平台通用的，它不包含"),b,n("、"),v,n("等平台特定的代码。在 NPM 上作为"),e("a",g,[n("单独的一个包 (opens new window)"),s(a)]),n("发布。")]),e("h3",k,[f,n(),e("a",w,[n("#"),s(a)]),e("a",E,[n("scheduler (opens new window)"),s(a)]),n("文件夹")]),x,e("h3",R,[B,n(),e("a",A,[n("#"),s(a)]),e("a",T,[n("shared (opens new window)"),s(a)]),n("文件夹")]),e("p",null,[n("源码中其他模块公用的"),C,n("和"),S,n("，比如在"),e("a",j,[n("shared/ReactSymbols.js (opens new window)"),s(a)]),n("中保存"),y,n("不同组件类型的定义。")]),N,e("h3",P,[M,n(),e("a",I,[n("#"),s(a)]),n("Renderer相关的文件夹")]),L,e("h3",V,[O,n(),e("a",Y,[n("#"),s(a)]),n("试验性包的文件夹")]),D,e("h3",F,[G,n(),e("a",q,[n("#"),s(a)]),n("辅助包的文件夹")]),z])}const W=t(d,[["render",H],["__file","React 源码文件结构.html.vue"]]);export{W as default};
