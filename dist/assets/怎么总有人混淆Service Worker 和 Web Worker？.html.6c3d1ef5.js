import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as t,a as e,b as n,d as a,e as c,r as i}from"./app.d7b34baa.js";const p={},l=c(`<h1 id="怎么总有人混淆service-worker-和-web-worker" tabindex="-1"><a class="header-anchor" href="#怎么总有人混淆service-worker-和-web-worker" aria-hidden="true">#</a> 怎么总有人混淆Service Worker 和 Web Worker？</h1><p>Web技术日新月异，我们可以发现21世纪初和现在的网页之间的巨大差异。随着我们对性能提升的体验越好，浏览器或应用程序所需处理的多线程任务就越多。</p><h2 id="service-worker-是如何工作的" tabindex="-1"><a class="header-anchor" href="#service-worker-是如何工作的" aria-hidden="true">#</a> Service Worker 是如何工作的?</h2><p>在Service Worker的帮助下，你的浏览器在后台工作，但令人惊讶的是，它不会将当前网页捆绑到后台任务中。Service Worker通常被安装到JavaScript 中，作为脚本在后台运行，并且在脱机时执行。它帮助浏览器处理缓存，并部署从缓存中检索到的合适函数。例如，加载离线博客改善用户体验。</p><p>Service Worker 基本上是用于充当代理服务器，位于web应用程序、浏览器和网络之间。它们的目的是创建有效的离线应用体验和拦截网络请求，并根据网络是否可用和更新来自服务器上的新资源而采取适当的操作。它们还被允许访问推送通知和后台同步API。</p><p><img src="https://cdn.yihuiblog.top/images/202210221551702.png" alt="image-20221022155138648"></p><p>在概述了Service Worker之后，让我们来看看Web Worker及其工作方式。</p><h2 id="web-worker-是如何工作的" tabindex="-1"><a class="header-anchor" href="#web-worker-是如何工作的" aria-hidden="true">#</a> Web Worker 是如何工作的?</h2><p>Web Worker 和 Service Worker 的工作流程完全不同，但类似的是，它们都有助于卸载复杂的任务，并帮助平稳地运行主线程。</p><p>Web Worker，也被称为“Dedicated Workers”（专用工作者），是在应用程序中用JavaScript进行的多线程操作。</p><p>Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。Web Worker可以在不干扰用户界面的情况下执行任务。此外，它们可以使用<code>XMLHttpRequest</code>执行I/O（尽管<code>responseXML</code>和通道属性总是空的）。一旦创建，Worker就可以将消息发送到创建它的JavaScript代码（线程），方法是将<code>message</code>发送到代码指定的事件处理程序(反之亦然)。</p><p><img src="https://cdn.yihuiblog.top/images/202210221558354.jpeg" alt="Diagram of web worker as separate to main thread, with postMessage as communication"></p><p>这使得Web Worker将它与主线程完全隔离开来。JavaScript中的<code>postMessage()</code>允许JavaScript应用程序用我们提供的值的副本在另一个作用域中触发事件，基本上是用结构化克隆算法完成的。</p><p><img src="https://cdn.yihuiblog.top/images/202210221553655.png" alt="image-20221022155321596"></p><h2 id="总结一下" tabindex="-1"><a class="header-anchor" href="#总结一下" aria-hidden="true">#</a> 总结一下：</h2><p><strong>Web Workers :</strong></p><ul><li>主要用于运行沉重而复杂的脚本</li><li>可以安装在脚本中使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webworker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>‘worker<span class="token punctuation">.</span>js’<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Service Workers :</strong></p><ul><li>处理网络请求及其响应，更像一个代理。</li><li>主要用于在应用程序或网页中创建离线操作。</li><li>Service Workers 必须注册才能使用它。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;serviceWorker&#39;</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;/service-worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),k=e("p",null,[e("strong",null,"参考：")],-1),d={href:"https://bitsofco.de/web-workers-vs-service-workers-vs-worklets/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://stackoverflow.com/questions/38632723/what-can-service-workers-do-that-web-workers-cannot",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.jianshu.com/p/e2cdc78ff47c",target:"_blank",rel:"noopener noreferrer"};function h(b,w){const s=i("ExternalLinkIcon");return o(),t("div",null,[l,e("blockquote",null,[k,e("p",null,[e("a",d,[n("Web workers vs Service workers vs Worklets"),a(s)])]),e("p",null,[e("a",u,[n("What can service workers do that web workers cannot?"),a(s)])]),e("p",null,[e("a",v,[n("深入分析Web worker, Service worker, Worklet"),a(s)])])])])}const _=r(p,[["render",h],["__file","怎么总有人混淆Service Worker 和 Web Worker？.html.vue"]]);export{_ as default};
