import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as s,b as n,d as e,e as t,r as l}from"./app.d7b34baa.js";const r={},i=t(`<h1 id="ts中的内置条件类型-returntype" tabindex="-1"><a class="header-anchor" href="#ts中的内置条件类型-returntype" aria-hidden="true">#</a> TS中的内置条件类型：ReturnType</h1><h2 id="先说一下条件类型是什么" tabindex="-1"><a class="header-anchor" href="#先说一下条件类型是什么" aria-hidden="true">#</a> 先说一下条件类型是什么</h2><ol><li><p>条件类型是一种由条件表达式所决定的类型。</p></li><li><p>条件类型使类型具有了不唯一性,同样增加了语言的灵活性。</p></li></ol><p>总言之，条件类型就是在类型中添加条件分支，以支持更加灵活的泛型，满足更多的使用场景。</p><p>例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token operator">:</span> <span class="token constant">Y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示若类型T可被赋值给类型U,那么结果类型就是X类型,否则就是Y类型。</p><p>而<strong>内置条件类型</strong>则是TS内部封装好的一些类型处理，使用起来更加便利。</p><h2 id="内置条件类型-returntype-type" tabindex="-1"><a class="header-anchor" href="#内置条件类型-returntype-type" aria-hidden="true">#</a> 内置条件类型：ReturnType&lt;Type&gt;</h2><p>在 2.8 版本中，TypeScript 内置了一些与 <code>infer</code> 有关的映射类型，就比如说我们今天的主角：<code>ReturnType&lt;Type&gt;</code></p><p>其用于提取函数的返回值类型：</p><blockquote><p>Constructs a type consisting of the return type of function <code>Type</code>.</p></blockquote><p>手撕示例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">P</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>ReturnType&lt;T&gt;</code> 只是将 <code>infer P</code> 从参数位置移动到返回值位置，因此此时 <code>P</code> 即是表示待推断的返回值类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 比如</span>
<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> User<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Test = User</span>

<span class="token comment">// 其他例子</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// unknown</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// number[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非法的例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span>
<span class="token comment">// Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上均不满足<code>(...args: any): any&#39;.</code>,type T 将被视为<code>any</code>处理。</p><p>其他内置的条件类型还有：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">--</span> 从<span class="token constant">T</span>中剔除可以赋值给<span class="token constant">U</span>的类型。
Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">--</span> 提取<span class="token constant">T</span>中可以赋值给<span class="token constant">U</span>的类型。
NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">--</span> 从<span class="token constant">T</span>中剔除<span class="token keyword">null</span>和<span class="token keyword">undefined</span>。
InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">--</span> 获取构造函数类型的实例类型。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="讲回infer" tabindex="-1"><a class="header-anchor" href="#讲回infer" aria-hidden="true">#</a> 讲回infer</h2>`,23),d=s("code",null,"infer",-1),k={href:"https://github.com/Microsoft/TypeScript/pull/21496",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"extends",-1),m=t(`<p>示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type ParamType&lt;T&gt; = T extends (arg: infer P) =&gt; any ? P : T;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个条件语句 <code>T extends (arg: infer P) =&gt; any ? P : T</code> 中，<code>infer P</code> 表示待推断的函数参数。</p><p>整句表示为：如果 <code>T</code> 能赋值给 <code>(arg: infer P) =&gt; any</code>，则结果是 <code>(arg: infer P) =&gt; any</code> 类型中的参数 <code>P</code>，否则返回为 <code>T</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Param</span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Param = User</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AA</span></span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),y=s("p",null,[s("strong",null,"参考：")],-1),v={href:"https://jkchao.github.io/typescript-book-chinese/tips/infer.html#%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.typescriptlang.org/docs/handbook/utility-types.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://tehub.com/a/8K0Iqc8vej",target:"_blank",rel:"noopener noreferrer"};function h(T,_){const a=l("ExternalLinkIcon");return o(),c("div",null,[i,s("p",null,[d,n(" 最早出现在此 "),s("a",k,[n("PR"),e(a)]),n(" 中，表示在 "),u,n(" 条件语句中待推断的类型变量。")]),m,s("blockquote",null,[y,s("p",null,[s("a",v,[n("深入浅出TS"),e(a)])]),s("p",null,[s("a",g,[n("Utility Types TS文档"),e(a)])]),s("p",null,[s("a",b,[n("大厂手撕"),e(a)])])])])}const w=p(r,[["render",h],["__file","TS中的内置条件类型：ReturnType.html.vue"]]);export{w as default};
