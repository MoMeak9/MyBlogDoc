import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as p,a as n,b as o,d as c,e as s,r as i}from"./app.d7b34baa.js";const l={},r=s('<h1 id="typescript-面试专题" tabindex="-1"><a class="header-anchor" href="#typescript-面试专题" aria-hidden="true">#</a> TypeScript 面试专题</h1><h2 id="interface-与-type-异同点" tabindex="-1"><a class="header-anchor" href="#interface-与-type-异同点" aria-hidden="true">#</a> interface 与 type 异同点</h2><p>这可能是最经典的一道 TS 面试题了，因此这里我们放在第一个知识点来讲解。</p><h3 id="及格线" tabindex="-1"><a class="header-anchor" href="#及格线" aria-hidden="true">#</a> 及格线</h3><p>不论如何，以下这些概念是你需要基本了解的，否则很容易被怀疑是否真的深入使用过 TypeScript 。</p><ul><li>在对象扩展情况下，interface 使用 extends 关键字，而 type 使用交叉类型（<code>&amp;</code>）。</li><li>同名的 interface 会自动合并，并且在合并时会要求兼容原接口的结构。</li><li>interface 与 type 都可以描述对象类型、函数类型、Class 类型，但 interface 无法像 type 那样表达元组、一组联合类型等等。</li><li>interface 无法使用映射类型等类型工具，也就意味着在类型编程场景中我们还是应该使用 type 。</li></ul><h3 id="优秀回答" tabindex="-1"><a class="header-anchor" href="#优秀回答" aria-hidden="true">#</a> 优秀回答</h3><p>只是回答这些概念定义显得过于枯燥，而且很容易被认为像是在背书，因此你可以穿插自己在工程中的实践， 比如小册中提过的，使用 interface 来定义对象类型，使用类型别名来处理函数签名、联合类型、工具类型等等。这同样也代表了你对这两个工具的理解：<strong>interface 就是描述对象对外暴露的接口，其不应该具有过于复杂的类型逻辑，最多局限于泛型约束与索引类型这个层面。而 type alias 就是用于将一组类型的重命名，或是对类型进行复杂编程。</strong></p><p>另外，你也可以提到在官方的 Wiki 中，特别说明了在对象扩展的情况下，使用接口继承要比交叉类型的性能更好。</p><h2 id="类型兼容性比较" tabindex="-1"><a class="header-anchor" href="#类型兼容性比较" aria-hidden="true">#</a> 类型兼容性比较</h2><p>这一问题主要考察你是否了解 TypeScript 类型系统的基本工作原理，以及使用的深入程度。因为通常来说，只有具有一定经验的使用者才会开始了解类型兼容性的相关规则，而了解这部分规则也就意味着你至少能够独立解决相当一部分类型报错。</p><h3 id="及格线-1" tabindex="-1"><a class="header-anchor" href="#及格线-1" aria-hidden="true">#</a> 及格线</h3><p>TypeScript 使用鸭子类型，也即结构化类型系统进行类型兼容性的比较，即对于两个属性完全一致的类型，就认为它们属于同一种类型。而对于 A 类型、A + B 类型，认为后者属于前者的子类型。另外 TypeScript 类型中还存在着一部分特殊的规则，如 object、{} 以及 Top Type 等。</p><h3 id="优秀回答-1" tabindex="-1"><a class="header-anchor" href="#优秀回答-1" aria-hidden="true">#</a> 优秀回答</h3><p>能回答出上面这些内容已经不错了，但你可是阅读完了这本小册的同学，怎么能轻易止步。如果想进一步升华回答，还可以从以下方面进行扩展。</p><ul><li><strong>结构化类型系统到标称类型系统</strong>，你可以表达你不仅了解结构化类型系统，还了解与其可以作为对比的标称类型系统，包括存在意义与比较方式，以及如何在 TS 中实现标称类型系统。</li><li><strong>类型层级</strong>，类型兼容性的比较本质上其实也就是在类型层级中进行比较，一个类型能够兼容其子类型，就这么回事，因此，不妨扩展地讲一讲 TS 的类型层级是怎么样的。</li></ul><h2 id="any、unknown-与-never" tabindex="-1"><a class="header-anchor" href="#any、unknown-与-never" aria-hidden="true">#</a> any、unknown 与 never</h2><p>这一部分主要考察你对内置 Top Type、Bottom Type 的理解，属于相对少见的考察，因此通常也不会要求过高。</p><h3 id="及格线-2" tabindex="-1"><a class="header-anchor" href="#及格线-2" aria-hidden="true">#</a> 及格线</h3><p>具体内容已经在小册中详细描述，这里只做简单叙述。any 与 unknown 在 TypeScript 类型层级中属于最顶层的 Top Type，也就意味所有类型都是它俩的子类型。而 never 则相反，作为 Bottom Type 的它是所有类型的子类型。</p><h3 id="优秀回答-2" tabindex="-1"><a class="header-anchor" href="#优秀回答-2" aria-hidden="true">#</a> 优秀回答</h3><p>面试的重要原则之一就是 WHY，在回答一个知识点的同时，如果能把这个知识点背后的存在原因也讲述清楚，很难不让面试官暗暗点头为你折服，因此你可以考虑从以下这么几个角度出发来进行扩展。</p><ul><li><strong>为什么需要 Top Type 与 Bottom Type ？</strong> 在实际开发中，我们不可能确保对所有地方的类型都进行精确的描述，因此就需要 Top Type 来表示一个包含任意类型的类型。而在类型编程中，如果对两个不存在交集的类型强行进行交集运算，也需要一个类型表示这个不存在的类型。这就是 Top Type 与 Bottom Type 的存在意义。</li><li><strong>类型层级</strong>，Top 与 Bottom 本身就是在描述它们在类型层级中的位置，因此，如果你能给面试官讲一遍从 Bottom 向上到 Top 的类型链，我觉得起码在 TypeScript 这个技能点上你已经基本得到肯定了。</li><li><strong>条件类型</strong>，Top Type 与 Bottom Type 带来的底层规则还不止表现在类型兼容性方面，在条件类型中同样存在对它们的特殊逻辑，请回想 any 与 never 在条件类型中的表现。</li></ul><h2 id="工具类型实现" tabindex="-1"><a class="header-anchor" href="#工具类型实现" aria-hidden="true">#</a> 工具类型实现</h2><p>这一部分有可能需要你进行手写，但对于完成了整本小册阅读的你来说，肯定不是难事，这一部分就不做过多叙述了。</p><h3 id="及格线-3" tabindex="-1"><a class="header-anchor" href="#及格线-3" aria-hidden="true">#</a> 及格线</h3><p>比较简单的工具类型手写可能包括 Partial（Require）、Pick（Omit）、ReturnType（ParameterType），小册中均已介绍了相关实现与原理，这里就不再赘述。</p><h3 id="优秀回答-3" tabindex="-1"><a class="header-anchor" href="#优秀回答-3" aria-hidden="true">#</a> 优秀回答</h3><p>在完成手写的基础上，其实你也可以主动进行扩展。</p><ul><li>我不仅能写出这些基础实现，还能写出其在实际应用场景中的增强版，比如 DeepPartial 与 MarkAsPartial，PickByType 与 PickByStrictType 等等。</li><li>我不仅了解这些工具类型的实现，还了解它们可以被归纳为访问性修饰工具类型、结构处理工具类型、集合工具类型与模式匹配工具类型等等，同时对它们实现过程中使用到的类型工具也有较为深入的了解。</li></ul><h2 id="场景题题问" tabindex="-1"><a class="header-anchor" href="#场景题题问" aria-hidden="true">#</a> 场景题题问：</h2>',31),u={href:"https://vue3js.cn/interview/typescript/typescript_javascript.html#%E4%BA%8C%E3%80%81%E7%89%B9%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},d=s(`<h3 id="typescript-的数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#typescript-的数据类型有哪些" aria-hidden="true">#</a> Typescript 的数据类型有哪些？</h3><p><code>typescript</code> 的数据类型主要有如下：</p><ul><li>boolean（布尔类型）</li><li>number（数字类型）</li><li>string（字符串类型）</li><li>array（数组类型）</li><li>tuple（元组类型）</li><li>enum（枚举类型）</li><li>any（任意类型）</li><li>null 和 undefined 类型</li><li>void 类型</li><li>never 类型</li><li>object 对象类型</li></ul><h3 id="typescript-中函数的理解-与-javascript-函数的区别" tabindex="-1"><a class="header-anchor" href="#typescript-中函数的理解-与-javascript-函数的区别" aria-hidden="true">#</a> TypeScript 中函数的理解？与 JavaScript 函数的区别？</h3><p>函数是<code>JavaScript</code> 应用程序的基础，帮助我们实现抽象层、模拟类、信息隐藏和模块</p><p>在<code>TypeScript</code> 里，虽然已经支持类、命名空间和模块，但函数仍然是主要定义行为的方式，<code>TypeScript</code> 为 <code>JavaScript</code> 函数添加了额外的功能，丰富了更多的应用场景</p><h3 id="对-typescript-中泛型的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#对-typescript-中泛型的理解-应用场景" aria-hidden="true">#</a> 对 TypeScript 中泛型的理解？应用场景？</h3><p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式</p><p>泛型允许我们在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。</p><p>在<code>typescript</code>中，定义函数，接口或者类的时候，不预先定义好具体的类型，而在使用的时候在指定类型的一种特性。</p><h3 id="对-typescript-中高级类型的理解-有哪些" tabindex="-1"><a class="header-anchor" href="#对-typescript-中高级类型的理解-有哪些" aria-hidden="true">#</a> 对 TypeScript 中高级类型的理解？有哪些？</h3><p>除了<code>string</code>、<code>number</code>、<code>boolean</code> 这种基础类型外，在 <code>typescript</code> 类型声明中还存在一些高级的类型应用</p><p>这些高级类型，是<code>typescript</code>为了保证语言的灵活性，所使用的一些语言特性。这些特性有助于我们应对复杂多变的开发场景</p><h3 id="有哪些" tabindex="-1"><a class="header-anchor" href="#有哪些" aria-hidden="true">#</a> 有哪些？</h3><ul><li><p>交叉类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>联合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">U</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>类型别名</p><p>type：类型别名会给一个类型起个新名字，类型别名有时和接口很像，但是可以作用于原始值、联合类型、元组以及其它任何你需要手写的类型</p><p>可以使用类型别名来在属性里引用自己（也可以是泛型）：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
    left<span class="token operator">:</span> Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    right<span class="token operator">:</span> Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>类型索引</p><p><code>keyof</code> 类似于 <code>Object.keys</code> ，用于获取一个接口中 Key 结果作为联合类型返回。</p></li><li><p>类型约束</p><p>通过关键字 <code>extend</code> 进行约束，不同于在 <code>class</code> 后使用 <code>extends</code> 的继承作用，泛型内使用的主要作用是对泛型加以约束（表示该泛型是xxx的子类）</p></li><li><p>映射类型</p><p>通过 <code>in</code> 关键字做类型的映射，遍历已有接口的 <code>key</code> 或者是遍历联合类型，如下例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Obj</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span>
  b<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">ReadOnlyObj</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Obj<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终<code>ReadOnlyObj</code>的接口为下述：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ReadOnlyObj</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token keyword">readonly</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>条件类型</p><p>条件类型的语法规则和三元表达式一致，经常用于一些类型不确定的情况。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token operator">:</span> <span class="token constant">Y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的意思就是，如果 T 是 U 的子集，就是类型 X，否则为类型 Y</p></li></ul><h3 id="对-typescript-装饰器-的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#对-typescript-装饰器-的理解-应用场景" aria-hidden="true">#</a> 对 TypeScript 装饰器@的理解？应用场景？</h3><blockquote><p>装饰器是一种包装代码的简单方法，它也是一种设计模式，能够扩展包装代码的功能而不修改它。</p><p>尽管装饰器在 TypeScript 和 Python 等语言中被广泛使用，但是 JavaScript 装饰器的支持仍处于第 2 阶段提案中。但是，我们可以借助 Babel 和 TypeScript 编译器使用 JavaScript 装饰器。</p></blockquote><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上</p><p>是一种在不改变原类和使用继承的情况下，动态地扩展对象功能</p><p>同样的，本质也不是什么高大上的结构，就是一个普通的函数，<code>@expression</code> 的形式其实是<code>Object.defineProperty</code>的语法糖</p><p><code>expression</code>求值后必须也是一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入</p><h4 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h4><p>由于<code>typescript</code>是一个实验性特性，若要使用，需要在<code>tsconfig.json</code>文件启动，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES5&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>typescript</code>装饰器的使用和<code>javascript</code>基本一致</p><p>类的装饰器可以装饰：</p><h4 id="类装饰" tabindex="-1"><a class="header-anchor" href="#类装饰" aria-hidden="true">#</a> 类装饰</h4><blockquote><p>接收参数：构造器函数</p></blockquote><p>例如声明一个函数 <code>addAge</code> 去给 Class 的属性 <code>age</code> 添加年龄</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">addAge</span><span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">addAge</span></span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;huihui&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码，实际等同于以下形式：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Person <span class="token operator">=</span> <span class="token function">addAge</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述可以看到，当装饰器作为修饰类的时候，会把构造器传递进去。 <code>constructor.prototype.age</code> 就是在每一个实例化对象上面添加一个 <code>age</code> 属性</p><h4 id="方法-属性装饰" tabindex="-1"><a class="header-anchor" href="#方法-属性装饰" aria-hidden="true">#</a> 方法/属性装饰</h4><blockquote><p>target：对象的原型 propertyKey：方法的名称 descriptor：方法的属性描述符</p></blockquote><p>可以看到，这三个属性实际就是<code>Object.defineProperty</code>的三个参数，如果是类的属性，则没有传递第三个参数</p><p>如下例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 声明装饰器修饰方法/属性</span>
<span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;prop &quot;</span> <span class="token operator">+</span> propertyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;desc &quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  descriptor<span class="token punctuation">.</span>writable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">property</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;propertyKey&quot;</span><span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
 <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span>
 name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
 <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;huihui&#39;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token decorator"><span class="token at operator">@</span><span class="token function">method</span></span>
 <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token string">&#39;instance method&#39;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token decorator"><span class="token at operator">@</span><span class="token function">method</span></span>
 <span class="token keyword">static</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token string">&#39;static method&#39;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> xmz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 修改实例方法say</span>
xmz<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token string">&#39;edit&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数装饰" tabindex="-1"><a class="header-anchor" href="#参数装饰" aria-hidden="true">#</a> 参数装饰</h4><blockquote><p>target ：当前对象的原型 propertyKey ：参数的名称 index：参数数组中的位置</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">logParameter</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">logParameter</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emp<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问器装饰" tabindex="-1"><a class="header-anchor" href="#访问器装饰" aria-hidden="true">#</a> 访问器装饰</h4><blockquote><p>使用起来方式与方法装饰一致，如下：</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">modification</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;prop &quot;</span> <span class="token operator">+</span> propertyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;desc &quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
 _name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
 <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> <span class="token string">&#39;huihui&#39;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token decorator"><span class="token at operator">@</span><span class="token function">modification</span></span>
 <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="装饰器工厂" tabindex="-1"><a class="header-anchor" href="#装饰器工厂" aria-hidden="true">#</a> 装饰器工厂</h4><p>如果想要传递参数，使装饰器变成类似工厂函数，只需要在装饰器函数内部再构造一个函数即可，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">addAge</span><span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">addAge</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;huihui&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> 执行顺序</h4><p>当多个装饰器应用于一个声明上，将由上至下依次对装饰器表达式求值，求值的结果会被当作函数，由下至上依次调用，例如如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;f(): evaluated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;f(): called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;g(): evaluated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;g(): called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">f</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">g</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> evaluated
<span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> evaluated
<span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> called
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> called
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><p>可以看到，使用装饰器存在两个显著的优点：</p><ul><li>代码可读性变强了，装饰器命名相当于一个注释</li><li>在不改变原有代码情况下，对原来功能进行扩展</li></ul><p>后面的使用场景中，借助装饰器的特性，除了提高可读性之后，针对已经存在的类，可以通过装饰器的特性，在不改变原有代码情况下，对原来功能进行扩展</p><h3 id="对-typescript-中命名空间与模块的理解-区别" tabindex="-1"><a class="header-anchor" href="#对-typescript-中命名空间与模块的理解-区别" aria-hidden="true">#</a> 对 TypeScript 中命名空间与模块的理解？区别？</h3><p><code>TypeScript</code> 与<code>ECMAScript</code> 2015 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块</p><p>相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的</p><p>其他模块特性与ES6无异</p><h4 id="命名空间-namespace" tabindex="-1"><a class="header-anchor" href="#命名空间-namespace" aria-hidden="true">#</a> 命名空间 namespace</h4><p>命名空间一个最明确的目的就是解决重名问题</p><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的</p><p>这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中</p><p><code>TypeScript</code> 中命名空间使用 <code>namespace</code> 来定义，语法格式如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> SomeNameSpaceName <span class="token punctuation">{</span>
   <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISomeInterfaceName</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>
   <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SomeClassName</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上定义了一个命名空间 <code>SomeNameSpaceName</code>，如果我们需要在外部可以调用 <code>SomeNameSpaceName</code> 中的类和接口，则需要在类和接口添加 <code>export</code> 关键字</p><p>使用方式如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>SomeNameSpaceName<span class="token punctuation">.</span>SomeClassName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**命名空间本质上是一个对象，作用是将一系列相关的全局变量组织到一个对象的属性，**如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> Letter <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译成<code>js</code>如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Letter<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Letter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Letter<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    Letter<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    Letter<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    Letter<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Letter <span class="token operator">||</span> <span class="token punctuation">(</span>Letter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h4><ul><li>命名空间是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象，使用起来十分容易。但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中</li><li>像命名空间一样，模块可以包含代码和声明。 不同的是模块可以声明它的依赖</li><li><strong>在正常的TS项目开发过程中并不建议用命名空间</strong>，但通常在通过 <strong>d.ts 文件标记 js 库</strong>类型的时候使用命名空间，<strong>主要作用是给编译器编写代码的时候参考使用</strong></li></ul><h3 id="说说如何在-react-项目中应用-typescript" tabindex="-1"><a class="header-anchor" href="#说说如何在-react-项目中应用-typescript" aria-hidden="true">#</a> 说说如何在 React 项目中应用 TypeScript？</h3><h4 id="函数组件" tabindex="-1"><a class="header-anchor" href="#函数组件" aria-hidden="true">#</a> <strong>函数组件：</strong></h4><p>更加规范的写法是使用 <code>React</code> 里面定义好的 <code>FC</code> 属性，里面已经定义好 <code>children</code> 类型，如下：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> Logo<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>IProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> logo<span class="token punctuation">,</span> className<span class="token punctuation">,</span> alt <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>className<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>alt<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>React.FC 显式地定义了返回类型，其他方式是隐式推导的</li><li>React.FC 对静态属性：displayName、propTypes、defaultProps 提供了类型检查和自动补全</li><li>React.FC 为 children 提供了隐式的类型（ReactElement | null）</li></ul><h4 id="有状态的类式组件" tabindex="-1"><a class="header-anchor" href="#有状态的类式组件" aria-hidden="true">#</a> <strong>有状态的类式组件：</strong></h4><p>可以是一个类组件且存在 <code>props</code> 和 <code>state</code> 属性</p><p>如果使用 <code>TypeScript</code> 声明则如下所示：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&quot;React&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>
  color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  size<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">IState</span> <span class="token punctuation">{</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>IProps<span class="token punctuation">,</span> IState<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
    count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述通过泛型对 <code>props</code>、<code>state</code> 进行类型定义，然后在使用的时候就可以在编译器中获取更好的智能提示</p><p>关于 <code>Component</code> 泛型类的定义，可以参考下 React 的类型定义文件 <code>node_modules/@types/React/index.d.ts</code>，如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Component<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> props<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span> children<span class="token operator">?</span><span class="token operator">:</span> ReactNode <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> Readonly<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

  state<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述可以看到，<code>state</code> 属性也定义了可读类型，目的是为了防止直接调用 <code>this.state</code> 更新状态</p><h4 id="受控组件" tabindex="-1"><a class="header-anchor" href="#受控组件" aria-hidden="true">#</a> <strong>受控组件：</strong></h4><p>受控组件的特性在于元素的内容通过组件的状态 <code>state</code> 进行控制</p><p>由于组件内部的事件是合成事件，不等同于原生事件，</p><p>例如一个 <code>input</code> 组件修改内部的状态，常见的定义的时候如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token function">updateValue</span><span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> itemText<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用 <code>Event</code> 事件对象类型：</p><ul><li>ClipboardEvent&lt;T = Element&gt; 剪贴板事件对象</li><li>DragEvent&lt;T = Element&gt; 拖拽事件对象</li><li>ChangeEvent&lt;T = Element&gt; Change 事件对象</li><li>KeyboardEvent&lt;T = Element&gt; 键盘事件对象</li><li>MouseEvent&lt;T = Element&gt; 鼠标事件对象</li><li>TouchEvent&lt;T = Element&gt; 触摸事件对象</li><li>WheelEvent&lt;T = Element&gt; 滚轮事件对象</li><li>AnimationEvent&lt;T = Element&gt; 动画事件对象</li><li>TransitionEvent&lt;T = Element&gt; 过渡事件对象</li></ul><p><code>T</code> 接收一个 <code>DOM</code> 元素类型</p><h3 id="说说如何在vue2项目中应用typescript" tabindex="-1"><a class="header-anchor" href="#说说如何在vue2项目中应用typescript" aria-hidden="true">#</a> 说说如何在Vue2项目中应用TypeScript？</h3><p>在<code>Vue2</code>项目中应用<code>typescript</code>，我们需要引入一个库<code>vue-property-decorator</code>，</p><p>其是基于<code>vue-class-component</code>库而来，这个库<code>vue</code>官方推出的一个支持使用<code>class</code>方式来开发<code>vue</code>单文件组件的库</p><p>主要的功能如下：</p><ul><li>methods 可以直接声明为类的成员方法</li><li>计算属性可以被声明为类的属性访问器</li><li>初始化的 data 可以被声明为类属性</li><li>data、render 以及所有的 Vue 生命周期钩子可以直接作为类的成员方法</li><li>所有其他属性，需要放在装饰器中</li></ul><h1 id="高频面试题" tabindex="-1"><a class="header-anchor" href="#高频面试题" aria-hidden="true">#</a> 高频面试题</h1><h2 id="_1-为什么推荐使用typescript" tabindex="-1"><a class="header-anchor" href="#_1-为什么推荐使用typescript" aria-hidden="true">#</a> 1. 为什么推荐使用TypeScript？</h2><p>TypeScript是微软公司开发和维护的一种面向对象的编程语言。它是JavaScript的超集，包含其所有元素。</p><p>其中，强类型和弱类型、静态类型和动态类型是两组不同的概念。</p><p>类型强弱是针对类型转换是否显示来区分，静态和动态类型是针对类型检查的时机来区分。</p><p>TS对JS的改进主要是静态类型检查，静态类型检查有何意义？标准答案是“静态类型更有利于构建大型应用”。</p><p>推荐使用TypeScript的原因有：</p><ul><li>TypeScript是开源的。</li><li>TypeScript为JavaScript ide和实践（如静态检查）提供了高效的开发工具。</li><li>TypeScript使代码更易于阅读和理解。</li><li>使用TypeScript，我们可以大大改进普通的JavaScript。</li><li>TypeScript为我们提供了ES6（ECMAScript 6）的所有优点，以及更高的生产率。</li><li>TypeScript通过对代码进行类型检查，可以帮助我们避免在编写JavaScript时经常遇到的令人痛苦的错误。</li><li>强大的类型系统，包括泛型。</li><li>TypeScript只不过是带有一些附加功能的JavaScript。</li><li>TypeScript代码可以按照ES5和ES6标准编译，以支持最新的浏览器。</li><li>与ECMAScript对齐以实现兼容性。</li><li>以JavaScript开始和结束。</li><li>支持静态类型。</li><li>TypeScript将节省开发人员的时间。</li><li>TypeScript是ES3、ES5和ES6的超集。</li></ul><h2 id="_2-说说typescript中命名空间与模块的理解和区别" tabindex="-1"><a class="header-anchor" href="#_2-说说typescript中命名空间与模块的理解和区别" aria-hidden="true">#</a> 2. 说说TypeScript中命名空间与模块的理解和区别</h2><p><strong>命名空间</strong>：命名空间一个最明确的目的就是解决重名问题</p><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的</p><p>这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中</p><p><strong>模块</strong>：<code>TypeScript</code> 与<code> ECMAScript</code> 2015 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块</p><p>相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的</p><p><strong>它们之间的区别</strong>：</p><ul><li>命名空间是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象，使用起来十分容易。但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中</li><li>像命名空间一样，模块可以包含代码和声明。 不同的是模块可以声明它的依赖</li><li>在正常的TS项目开发过程中并不建议用命名空间，但通常在通过 d.ts 文件标记 js 库类型的时候使用命名空间，主要作用是给编译器编写代码的时候参考使用</li></ul><h2 id="_3-typescript支持的访问修饰符有哪些" tabindex="-1"><a class="header-anchor" href="#_3-typescript支持的访问修饰符有哪些" aria-hidden="true">#</a> 3. TypeScript支持的访问修饰符有哪些？</h2><p>TypeScript支持访问修饰符 public，private 和 protected，它们决定了类成员的可访问性。</p><ul><li>公共（public），类的所有成员，其子类以及该类的实例都可以访问。</li><li>受保护（protected），该类及其子类的所有成员都可以访问它们。 但是该类的实例无法访问。</li><li>私有（private），只有类的成员可以访问它们。</li></ul><p>如果未指定访问修饰符，则它是隐式公共的，因为它符合 JavaScript 的便利性。</p><h2 id="_4-typescript中有哪些声明变量的方式" tabindex="-1"><a class="header-anchor" href="#_4-typescript中有哪些声明变量的方式" aria-hidden="true">#</a> 4. TypeScript中有哪些声明变量的方式？</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 声明类型和值，Declaring type and value in a single statement</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>identifier<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>type<span class="token operator">-</span>annotation<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span> 

<span class="token comment">// 只声明类型，Declaring type without value</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>identifier<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>type<span class="token operator">-</span>annotation<span class="token punctuation">]</span><span class="token punctuation">;</span> 

<span class="token comment">// 只声明值，Declaring its value without type</span>
<span class="token class-name"><span class="token keyword">let</span></span> <span class="token punctuation">[</span>identifier<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span> 

<span class="token comment">// 声明变量无类型和值，Declaring without value and type</span>
<span class="token class-name"><span class="token keyword">let</span></span> <span class="token punctuation">[</span>identifier<span class="token punctuation">]</span><span class="token punctuation">;</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-typescript和javascript的区别是什么" tabindex="-1"><a class="header-anchor" href="#_5-typescript和javascript的区别是什么" aria-hidden="true">#</a> 5. TypeScript和JavaScript的区别是什么？</h2><p>Typescript 是 JavaScript 的超集，可以被编译成 JavaScript 代码。用 JavaScript 编写的代码，在 TypeScript 中依然有效。Typescript 是纯面向对象的编程语言，包含类和接口的概念。 程序员可以用它来编写面向对象的服务端或客户端程序，并将它们编译成 JavaScript 代码。</p><h2 id="_6-typescript中的declare关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#_6-typescript中的declare关键字有什么作用" aria-hidden="true">#</a> 6. TypeScript中的Declare关键字有什么作用？</h2><p>我们知道所有的JavaScript库/框架都没有TypeScript声明文件，但是我们希望在TypeScript文件中使用它们时不会出现编译错误。为此，我们使用declare关键字。在我们希望定义可能存在于其他地方的变量的环境声明和方法中，可以使用declare关键字。</p><p>例如，假设我们有一个名为myLibrary的库，它没有TypeScript声明文件，在全局命名空间中有一个名为myLibrary的命名空间。如果我们想在TypeScript代码中使用这个库，我们可以使用以下代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">let</span> myLibrary<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript运行时将把myLibrary变量赋值为任意类型(any)。这是一个问题，我们不会得到智能感知在设计时，但我们将能够使用库在我们的代码。</p><h2 id="_7-解释一下typescript中的枚举" tabindex="-1"><a class="header-anchor" href="#_7-解释一下typescript中的枚举" aria-hidden="true">#</a> 7. 解释一下TypeScript中的枚举</h2><p>枚举是TypeScipt数据类型，它允许我们定义一组命名常量。 使用枚举去创建一组不同的案例变得更加容易。 它是相关值的集合，可以是数字值或字符串值。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Gender <span class="token punctuation">{</span>
  Male<span class="token punctuation">,</span>
  Female<span class="token punctuation">,</span>
  Other
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Gender<span class="token punctuation">.</span>Male<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 0</span>

<span class="token comment">//We can also access an enum value by it&#39;s number value.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Gender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: Female</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-typescript中什么是装饰器" tabindex="-1"><a class="header-anchor" href="#_8-typescript中什么是装饰器" aria-hidden="true">#</a> 8. TypeScript中什么是装饰器？</h2><p>装饰器是一种特殊类型的声明，它能过被附加到类声明，方法，属性或者参数上，可以修改类的行为</p><p>通俗的来说就是一个方法，可以注入到类，方法，属性参数上来扩展类，属性，方法，参数的功能</p><p><strong>装饰器的分类</strong>: 类装饰器、属性装饰器、方法装饰器、参数装饰器</p><h2 id="_9-typescript中的模块是什么" tabindex="-1"><a class="header-anchor" href="#_9-typescript中的模块是什么" aria-hidden="true">#</a> 9. TypeScript中的模块是什么？</h2><p>TypeScript 中的模块是相关变量、函数、类和接口的集合。 你可以将模块视为包含执行任务所需的一切的容器。可以导入模块以轻松地在项目之间共享代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">module</span> module_name<span class="token punctuation">{</span>
  <span class="token keyword">class</span> <span class="token class-name">xyz</span><span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-typescript的内置数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#_10-typescript的内置数据类型有哪些" aria-hidden="true">#</a> 10. TypeScript的内置数据类型有哪些？</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 数字类型：用于表示数字类型的值。TypeScript 中的所有数字都存储为浮点值。</span>

<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 布尔类型：一个逻辑二进制开关，包含true或false</span>

<span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;CoderBin&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Null 类型： Null 表示值未定义的变量。</span>

<span class="token keyword">let</span> flag<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token comment">// void 类型：分配给没有返回值的方法的类型。</span>

<span class="token keyword">let</span> unusable<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-typescript的主要特点是什么" tabindex="-1"><a class="header-anchor" href="#_11-typescript的主要特点是什么" aria-hidden="true">#</a> 11. TypeScript的主要特点是什么？</h2><ul><li><strong>跨平台</strong>：TypeScript 编译器可以安装在任何操作系统上，包括 Windows、macOS 和 Linux。</li><li><strong>ES6 特性</strong>：TypeScript 包含计划中的 ECMAScript 2015 (ES6) 的大部分特性，例如箭头函数。</li><li><strong>面向对象的语言</strong>：TypeScript 提供所有标准的 OOP 功能，如类、接口和模块。</li><li><strong>静态类型检查</strong>：TypeScript 使用静态类型并帮助在编译时进行类型检查。因此，你可以在编写代码时发现编译时错误，而无需运行脚本。</li><li><strong>可选的静态类型</strong>：如果你习惯了 JavaScript 的动态类型，TypeScript 还允许可选的静态类型。</li></ul><h2 id="_12-typescript中never和void的区别" tabindex="-1"><a class="header-anchor" href="#_12-typescript中never和void的区别" aria-hidden="true">#</a> 12. TypeScript中never和void的区别？</h2><ul><li>void 表示没有任何类型（可以被赋值为 null 和 undefined）。</li><li>never 表示一个不包含值的类型，即表示永远不存在的值。</li><li>拥有 void 返回值类型的函数能正常运行。拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常。</li></ul><h2 id="_13-typescript中的类型断言是什么" tabindex="-1"><a class="header-anchor" href="#_13-typescript中的类型断言是什么" aria-hidden="true">#</a> 13. TypeScript中的类型断言是什么？</h2><p>类型断言可以用来手动指定一个值具体的类型，即允许变量从一种类型更改为另一种类型。</p><p>当你比 TS 更了解某个值的类型，并且需要指定更具体的类型时，我们可以使用<strong>类型断言</strong>。</p><h2 id="_14-ts中any和unknown有什么区别" tabindex="-1"><a class="header-anchor" href="#_14-ts中any和unknown有什么区别" aria-hidden="true">#</a> 14. TS中any和unknown有什么区别？</h2><p>unknown 和 any 的主要区别是 unknown 类型会更加严格：在对 unknown 类型的值执行大多数操作之前，我们必须进行某种形式的检查。而在对 any 类型的值执行操作之前，我们不必进行任何检查。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 符合TS的语法</span>
<span class="token keyword">let</span> a_value1<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>   <span class="token comment">// OK</span>
<span class="token keyword">let</span> a_value2<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>      <span class="token comment">// OK</span>
<span class="token keyword">let</span> a_value3<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>   <span class="token comment">// OK</span>

<span class="token keyword">let</span> bar<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span> <span class="token comment">// OK </span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
<span class="token keyword">let</span> k_value1<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> bar<span class="token punctuation">;</span>   <span class="token comment">// OK</span>
<span class="token keyword">let</span> K_value2<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> bar<span class="token punctuation">;</span>      <span class="token comment">// OK</span>
<span class="token keyword">let</span> K_value3<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> bar<span class="token punctuation">;</span>   <span class="token comment">// Error</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为bar是一个未知类型(任何类型的数据都可以赋给 <code>unknown</code> 类型)，所以不能确定是否有msg属性。不能通过TS语法检测；而 unknown 类型的值也不能将值赋给 any 和 unknown 之外的类型变量</p><p><strong>总结</strong>: any 和 unknown 都是顶级类型，但是 unknown 更加严格，不像 any 那样不做类型检查，反而 unknown 因为未知性质，不允许访问属性，不允许赋值给其他有明确类型的变量。</p><h2 id="_15-使用ts实现一个判断传入参数是否是数组类型的方法" tabindex="-1"><a class="header-anchor" href="#_15-使用ts实现一个判断传入参数是否是数组类型的方法" aria-hidden="true">#</a> 15. 使用TS实现一个判断传入参数是否是数组类型的方法？</h2><p>unknown 用于变量类型不确定，但肯定可以确定的情形下，比如下面这个示例中，参数总归会有个值，根据这个值的类型进行不同的处理，这里使用 unknown 替代 any 则会更加类型安全。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-tsconfig-json有什么作用" tabindex="-1"><a class="header-anchor" href="#_16-tsconfig-json有什么作用" aria-hidden="true">#</a> 16. tsconfig.json有什么作用？</h2><p>tsconfig.json文件是JSON格式的文件。</p><p>在tsconfig.json文件中，可以指定不同的选项来告诉编译器如何编译当前项目。</p><p>目录中包含tsconfig.json文件，表明该目录是TypeScript项目的根目录。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 常用配置</span>
<span class="token punctuation">{</span>
  <span class="token comment">/*
      tsconfig.json是ts编译器的配置文件，ts可以根据它的信息来对待吗进行编译 可以再tsconfig中写注释
      include : 用来指定哪些文件需要被编译
      exclude : 用来指定哪些文件不需要被编译 ：默认node_module
      extends : 用来指定继承的配置文件
      files   : 用来指定被编译的文件列表，只有编译少量文件才使用
      compilerOptions : 编译器的选项是配置文件中非常重要也是非常复杂的配置选项
  */</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token comment">// ** : 任意目录 ， * : 任意文件</span>
    <span class="token string">&quot;./src/**/*&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;./src/hello/**/*&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// &quot;extends&quot;: &quot;./configs/base&quot;,</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;1.ts&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// &quot;2.ts&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用来指定 ES 版本 ESNext : 最新版。 &#39;ES3&#39;, &#39;ES5&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, &#39;ES2018&#39;, &#39;ES2019&#39;, &#39;ES2020&#39;, &#39;ESNext&#39;</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES2020&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 指定要使用模块化的规范 : &#39;None&#39;, &#39;CommonJS&#39;, &#39;AMD&#39;, &#39;System&#39;, &#39;UMD&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2020&#39; or &#39;ESNext&#39;</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 用来指定项目中要使用的库 &#39;ES5&#39;, &#39;ES6&#39;, &#39;ES2015&#39;, &#39;ES7&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, &#39;ES2018&#39;, &#39;ESNext&#39;, &#39;DOM&#39;, &#39;DOM.Iterable&#39;,</span>
    <span class="token comment">//                          &#39;WebWorker&#39;, &#39;ScriptHost&#39;, &#39;ES2015.Core&#39;, &#39;ES2015.Collection&#39;, &#39;ES2015.Generator&#39;, &#39;ES2015.Iterable&#39;, </span>
    <span class="token comment">//                          &#39;ES2015.Promise&#39;, &#39;ES2015.Proxy&#39;, &#39;ES2015.Reflect&#39;, &#39;ES2015.Symbol&#39;, &#39;ES2015.Symbol.WellKnown&#39;, </span>
    <span class="token comment">//                          &#39;ES2016.Array.Include&#39;, &#39;ES2017.object&#39;, &#39;ES2017.Intl&#39;, &#39;ES2017.SharedMemory&#39;, &#39;ES2017.String&#39;, </span>
    <span class="token comment">//                          &#39;ES2017.TypedArrays&#39;, &#39;ES2018.Intl&#39;, &#39;ES2018.Promise&#39;, &#39;ES2018.RegExp&#39;, &#39;ESNext.AsyncIterable&#39;, </span>
    <span class="token comment">//                          &#39;ESNext.Array&#39;, &#39;ESNext.Intl&#39;, &#39;ESNext.Symbol&#39;</span>
    <span class="token comment">// 运行在浏览器中不用设置，运行在node或其他中才需要设置</span>
    <span class="token comment">// &quot;lib&quot;:[]，</span>
    <span class="token comment">// 用来指定编译后文件的存放位置</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span><span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 将代码合并为一个文件,设置之后所有的全局作用域中的代码会合并到同一个文件中 但是只能在  &#39;amd&#39; and &#39;system&#39; 中才能使用</span>
    <span class="token comment">// &quot;outFile&quot;: &quot;./dist/app.js&quot;,</span>
    <span class="token comment">// 是否对js文件进行编译，默认false</span>
    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否检查js代码是否符合语法规范，默认false</span>
    <span class="token property">&quot;checkJs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否移除注释，默认false</span>
    <span class="token property">&quot;removeComments&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否不生成编译后文件，默认false</span>
    <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 当有错误时是否生成文件，默认false</span>
    <span class="token property">&quot;noEmitOnError&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否生成sourceMap，默认false  这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。有了它，出错的时候，通过断点工具可以直接显示原始代码，而不是转换后的代码。</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token comment">// 所有的严格检查的总开关，默认false</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 编译后的文件是否开启严格模式，默认false</span>
    <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 不允许隐式的any，默认false(允许)</span>
    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 不允许隐式的this，默认false(允许)</span>
    <span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否严格的检查空值，默认false 检查有可能为null的地方</span>
    <span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否严格检查bind、call和apply的参数列表，默认false  检查是否有多余参数</span>
    <span class="token property">&quot;strictBindCallApply&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否严格检查函数的类型，</span>
    <span class="token property">&quot;strictFunctionTypes&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否严格检查属性是否初始化，默认false</span>
    <span class="token property">&quot;strictPropertyInitialization&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token comment">// 是否检查switch语句包含正确的break，默认false</span>
    <span class="token property">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 检查函数没有隐式的返回值，默认false</span>
    <span class="token property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否检查检查未使用的局部变量，默认false</span>
    <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否检查未使用的参数，默认false</span>
    <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token comment">// 是否检查不可达代码报错，默认false   true，忽略不可达代码 false，不可达代码将引起错误</span>
    <span class="token property">&quot;allowUnreachableCode&quot;</span><span class="token operator">:</span><span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-typescript中什么是类类型接口" tabindex="-1"><a class="header-anchor" href="#_17-typescript中什么是类类型接口" aria-hidden="true">#</a> 17. TypeScript中什么是类类型接口？</h2><ul><li>如果接口用于一个类的话，那么接口会表示“行为的抽象”</li><li>对类的约束，让类去实现接口，类可以实现多个接口</li><li>接口只能约束类的公有成员（实例属性/方法），无法约束私有成员、构造函数、静态属性/方法</li></ul><h2 id="_18-ts中什么是方法重载" tabindex="-1"><a class="header-anchor" href="#_18-ts中什么是方法重载" aria-hidden="true">#</a> 18. TS中什么是方法重载？</h2><p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。 基本上，它在派生类或子类中重新定义了基类方法。</p><p>方法覆盖规则：</p><ul><li>该方法必须与父类中的名称相同。</li><li>它必须具有与父类相同的参数。</li><li>必须存在IS-A关系或继承。</li></ul><h2 id="_19-ts中的类是什么-如何定义" tabindex="-1"><a class="header-anchor" href="#_19-ts中的类是什么-如何定义" aria-hidden="true">#</a> 19. TS中的类是什么，如何定义？</h2><p>类表示一组相关对象的共享行为和属性。</p><p>例如，我们的类可能是Student，其所有对象都具有该attendClass方法。另一方面，John是一个单独的 type 实例，Student可能有额外的独特行为，比如attendExtracurricular.</p><p>你使用关键字声明类class：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    
  studCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    
  studName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    
  <span class="token function">constructor</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    
      <span class="token keyword">this</span><span class="token punctuation">.</span>studName <span class="token operator">=</span> name<span class="token punctuation">;</span>    
      <span class="token keyword">this</span><span class="token punctuation">.</span>studCode <span class="token operator">=</span> code<span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_20-如何在ts中实现继承" tabindex="-1"><a class="header-anchor" href="#_20-如何在ts中实现继承" aria-hidden="true">#</a> 20. 如何在TS中实现继承？</h2><p>继承是一种从另一个类获取一个类的属性和行为的机制。它是面向对象编程的一个重要方面，并且具有从现有类创建新类的能力，继承成员的类称为基类，继承这些成员的类称为派生类。</p><p>继承可以通过使用extend关键字来实现。我们可以通过下面的例子来理解它。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>     
  Area<span class="token operator">:</span><span class="token builtin">number</span>     
  <span class="token function">constructor</span><span class="token punctuation">(</span>area<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     
     <span class="token keyword">this</span><span class="token punctuation">.</span>Area <span class="token operator">=</span> area    
  <span class="token punctuation">}</span>     
<span class="token punctuation">}</span>     
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>     
  <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>     
     <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;圆的面积: &quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>Area<span class="token punctuation">)</span>     
  <span class="token punctuation">}</span>     
<span class="token punctuation">}</span>    
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
obj<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-ts中的泛型是什么" tabindex="-1"><a class="header-anchor" href="#_21-ts中的泛型是什么" aria-hidden="true">#</a> 21. TS中的泛型是什么？</h2><p>TypeScript Generics是提供创建可重用组件的方法的工具。 它能够创建可以使用多种数据类型而不是单一数据类型的组件。 而且，它在不影响性能或生产率的情况下提供了类型安全性。 泛型允许我们创建泛型类，泛型函数，泛型方法和泛型接口。</p><p>在泛型中，类型参数写在左括号（&lt;）和右括号（&gt;）之间，这使它成为强类型集合。 它使用一种特殊的类型变量来表示类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> output1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;CoderBin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> output2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span> <span class="token number">117</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-说说ts中的类及其特性" tabindex="-1"><a class="header-anchor" href="#_22-说说ts中的类及其特性" aria-hidden="true">#</a> 22. 说说TS中的类及其特性</h2><p>TypeScript 引入了类，以便它们可以利用诸如封装和抽象之类的面向对象技术的好处。</p><p>TypeScript 编译器将 TypeScript 中的类编译为普通的 JavaScript 函数，以跨平台和浏览器工作。</p><p>一个类包括以下内容：</p><ul><li>构造器（Constructor）</li><li>属性（Properties）</li><li>方法（Methods）</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  empID<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  empName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token constant">ID</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>empName <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>empID <span class="token operator">=</span> <span class="token constant">ID</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">40000</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类的其他特性有：</p><ul><li>继承（Inheritance）</li><li>封装（Encapsulation）</li><li>多态（Polymorphism）</li><li>抽象（Abstraction）</li></ul><h2 id="_23-解释如何使用typescript-mixin" tabindex="-1"><a class="header-anchor" href="#_23-解释如何使用typescript-mixin" aria-hidden="true">#</a> 23. 解释如何使用TypeScript mixin</h2><p>Mixin 本质上是在相反方向上工作的继承。Mixins 允许你通过组合以前类中更简单的部分类来设置构建新类。</p><p>相反，类A继承类B来获得它的功能，类B从类A需要返回一个新类的附加功能。</p><h2 id="_24-什么是typescript映射文件" tabindex="-1"><a class="header-anchor" href="#_24-什么是typescript映射文件" aria-hidden="true">#</a> 24. 什么是TypeScript映射文件？</h2><ul><li>TypeScript Map文件是一个源映射文件，其中包含有关我们原始文件的信息。</li><li>.map文件是源映射文件，可让工具在发出的JavaScript代码和创建它的TypeScript源文件之间进行映射。</li><li>许多调试器可以使用这些文件，因此我们可以调试TypeScript文件而不是JavaScript文件。</li></ul><h2 id="_25-ts中的类型有哪些" tabindex="-1"><a class="header-anchor" href="#_25-ts中的类型有哪些" aria-hidden="true">#</a> 25. TS中的类型有哪些？</h2><p>类型系统表示语言支持的不同类型的值。它在程序存储或操作所提供的值之前检查其有效性。</p><p>它可以分为两种类型，</p><ul><li>内置：包括数字(number)，字符串(string)，布尔值(boolean)，无效(void)，空值(null)和未定义(undefined)。</li><li>用户定义的：它包括枚举(enums)，类(classes)，接口(interfaces)，数组(arrays)和元组(tuple)。</li></ul><h2 id="_26-ts中的interface和type有什么区别" tabindex="-1"><a class="header-anchor" href="#_26-ts中的interface和type有什么区别" aria-hidden="true">#</a> 26. TS中的interface和type有什么区别？</h2><p><strong>相同点：</strong></p><ol><li>都可以描述一个对象或者函数</li></ol><p><strong>interface</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">SetUser</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>type</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">SetUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>都允许拓展（extends）</li></ol><p>interface 和 type 都可以拓展，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 extends interface 。 虽然效果差不多，但是两者语法不同。</p><p><strong>不同点</strong></p><ul><li>type 可以而 interface 不行</li></ul><p><strong>type 可以声明基本类型别名，联合类型，元组等类型</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 基本类型别名</span>
<span class="token keyword">type</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token builtin">string</span>

<span class="token comment">// 联合类型</span>
<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token function">wong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token function">miao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Pet</span> <span class="token operator">=</span> Dog <span class="token operator">|</span> Cat

<span class="token comment">// 具体定义数组每个位置的类型</span>
<span class="token keyword">type</span> <span class="token class-name">PetList</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Dog<span class="token punctuation">,</span> Pet<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>type 语句中还可以使用 typeof 获取实例的类型进行赋值</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 当你想获取一个变量的类型时，使用 typeof</span>
<span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> div

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其他骚操作</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">StringOrNumber</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  
<span class="token keyword">type</span> <span class="token class-name">Text</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  
<span class="token keyword">type</span> <span class="token class-name">NameLookup</span> <span class="token operator">=</span> Dictionary<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Person<span class="token operator">&gt;</span><span class="token punctuation">;</span>  
<span class="token keyword">type</span> <span class="token class-name">Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  
<span class="token keyword">type</span> <span class="token class-name">Pair<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">type</span> <span class="token class-name">Coordinates</span> <span class="token operator">=</span> Pair<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  
<span class="token keyword">type</span> <span class="token class-name">Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">{</span> left<span class="token operator">:</span> Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> right<span class="token operator">:</span> Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>interface 可以而 type 不行</li></ul><p><strong>interface 能够声明合并</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  sex<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
User 接口为 {
  name: string
  age: number
  sex: string 
}
*/</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，如果不清楚什么时候用interface/type，能用 interface 实现，就用 interface , 如果不能就用 type 。</p><h2 id="_27-ts中的getter-setter是什么-你如何使用它们" tabindex="-1"><a class="header-anchor" href="#_27-ts中的getter-setter是什么-你如何使用它们" aria-hidden="true">#</a> 27. TS中的getter/setter是什么？你如何使用它们？</h2><p>Getter 和 setter 是特殊类型的方法，可帮助你根据程序的需要委派对私有变量的不同级别的访问。</p><p>Getters 允许你引用一个值但不能编辑它。Setter 允许你更改变量的值，但不能查看其当前值。这些对于实现封装是必不可少的。</p><p>例如，新雇主可能能够了解get公司的员工人数，但无权set了解员工人数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> fullNameMaxLength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> _fullName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_fullName<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span>newName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newName <span class="token operator">&amp;&amp;</span> newName<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> fullNameMaxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;fullName has a max length of &quot;</span> <span class="token operator">+</span> fullNameMaxLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_fullName <span class="token operator">=</span> newName<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
employee<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">&quot;Bin Coder&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_28-如何检查ts中的null和undefiend" tabindex="-1"><a class="header-anchor" href="#_28-如何检查ts中的null和undefiend" aria-hidden="true">#</a> 28. 如何检查TS中的null和undefiend？</h2><p>通过使用一个缓冲检查，我们可以检查空和未定义:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们使用严格的检查，它将总是对设置为null的值为真，而对未定义的变量不为真。</p><p>例子</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
<span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39; == null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39; === null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39; is undefined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token function">check</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token string">&quot;a == null&quot;</span>
<span class="token string">&quot;a is undefined&quot;</span>
<span class="token string">&quot;b == null&quot;</span>
<span class="token string">&quot;b === null&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_29-typescript中const和readonly的区别是什么" tabindex="-1"><a class="header-anchor" href="#_29-typescript中const和readonly的区别是什么" aria-hidden="true">#</a> 29. TypeScript中const和readonly的区别是什么？</h2><ul><li>const用于变量，readonly用于属性</li><li>const在运行时检查，readonly在编译时检查</li><li>使用const变量保存的数组，可以使用push，pop等方法。但是如果使用Readonly Array声明的数组不能使用push，pop等方法</li></ul><h2 id="_30-omit-类型有什么作用" tabindex="-1"><a class="header-anchor" href="#_30-omit-类型有什么作用" aria-hidden="true">#</a> 30. Omit 类型有什么作用</h2><p>Omit 以一个类型为基础支持剔除某些属性，然后返回一个新类型。 语法如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Omit<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> Keys<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
  createdAt<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&quot;description&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,237);function k(v,m){const a=i("ExternalLinkIcon");return t(),p("div",null,[r,n("p",null,[n("a",u,[o("参考场景题"),c(a)])]),d])}const g=e(l,[["render",k],["__file","TypeScript 面试专题.html.vue"]]);export{g as default};
