import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as s,b as n,d as p,e as a,r as l}from"./app.d7b34baa.js";const i={},u=a(`<h1 id="牛客网刷题06" tabindex="-1"><a class="header-anchor" href="#牛客网刷题06" aria-hidden="true">#</a> 牛客网刷题06</h1><h3 id="_51-乘法" tabindex="-1"><a class="header-anchor" href="#_51-乘法" aria-hidden="true">#</a> 51. 乘法</h3><blockquote><p>题目描述 求 a 和 b 相乘的值，a 和 b 可能是小数，需要注意结果的精度问题 输入：3, 0.0001 输出：0.0003</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：确定小数的位数然后保证精度是多少位</span>
<span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arrA <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">let</span> arrB <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">let</span> fix <span class="token operator">=</span> arrA<span class="token punctuation">.</span>length <span class="token operator">+</span> arrB<span class="token punctuation">.</span>length
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>fix<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：自己写的</span>
<span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arrA <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> arrB <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">// 第一个有小数位</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arrA<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">+=</span>arrA<span class="token punctuation">.</span>length
        a <span class="token operator">=</span> a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>arrA<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 第二个数有小数位</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arrB<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">+=</span>arrB<span class="token punctuation">.</span>length
        b <span class="token operator">=</span> b <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>arrB<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span>count<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>javascript小数精度问题</li></ul><blockquote><p>javascript的数值存储是双精度浮点数64位，根据IEEE 754标准，0-51为值，52-62位指数，63位是符号位。 二进制浮点数表示法对0.1这样的有误差。 解决方法就是先升幂再降幂。</p></blockquote>`,7),r={id:"_52-改变上下文",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#_52-改变上下文","aria-hidden":"true"},"#",-1),d={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.nowcoder.com%2Fpractice%2Fdfcc28bf243642b795eaf5a2a621acc5%3FtpId%3D2%26tqId%3D37906%26rp%3D1%26ru%3D%2Factivity%2Foj%26qru%3D%2Fta%2Ffront-end%2Fquestion-ranking%26tab%3DanswerKey",target:"_blank",rel:"noopener noreferrer"},v=a(`<blockquote><p>题目描述 将函数 fn 的执行上下文改为 obj，返回 fn 执行后的值 输入： <code>alterContext(function() {return this.greeting + &#39;, &#39; + this.name + &#39;!&#39;; }, {name: &#39;Rebecca&#39;, greeting: &#39;Yo&#39; })</code> 输出：Yo, Rebecca!</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：call</span>
<span class="token keyword">function</span> <span class="token function">alterContext</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法一：apply</span>
<span class="token keyword">function</span> <span class="token function">alterContext</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法一：bind</span>
<span class="token keyword">function</span> <span class="token function">alterContext</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>call/apply/bind</li></ul><h3 id="_53-批量改变对象的属性" tabindex="-1"><a class="header-anchor" href="#_53-批量改变对象的属性" aria-hidden="true">#</a> 53. 批量改变对象的属性</h3><blockquote><p>题目描述 给定一个构造函数 constructor，请完成 alterObjects 方法，将 constructor 的所有实例的 greeting 属性指向给定的 greeting 变量。 输入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">C</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token string">&#39;Rebecca&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token function">alterObjects</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token string">&#39;What\\&#39;s up&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> obj1<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：What&#39;s up</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：原型对象上添加属性</span>
<span class="token keyword">function</span> <span class="token function">alterObjects</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> greeting</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>greeting <span class="token operator">=</span> greeting
<span class="token punctuation">}</span>

复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>原型链</li></ul><h3 id="_54-属性遍历" tabindex="-1"><a class="header-anchor" href="#_54-属性遍历" aria-hidden="true">#</a> 54. 属性遍历</h3><blockquote><p>题目描述 找出对象 obj 不在原型链上的属性(注意这题测试例子的冒号后面也有一个空格~) 1、返回数组，格式为 key: value 2、结果数组不要求顺序 输入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">C</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">&#39;bim&#39;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token class-name">C</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bop <span class="token operator">=</span> <span class="token string">&#39;bip&#39;</span><span class="token punctuation">;</span> 
<span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出 <code>[&quot;foo: bar&quot;, &quot;baz: bim&quot;]</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一： forEach换成map更好，这里不是重点所以不做处理</span>
<span class="token keyword">function</span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>Object.getOwnPropertyNames(obj)， 获取所有的对象自身属性</li></ul><h3 id="_55-判断是否包含数字" tabindex="-1"><a class="header-anchor" href="#_55-判断是否包含数字" aria-hidden="true">#</a> 55. 判断是否包含数字</h3><blockquote><p>题目描述 给定字符串 str，检查其是否包含数字，包含返回 true，否则返回 false 输入： &#39;abc123&#39; ; 输出： true</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：字符串比较ASCII码</span>
<span class="token keyword">function</span> <span class="token function">containsNumber</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：隐式类型转化</span>
<span class="token keyword">function</span> <span class="token function">containsNumber</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法三：正则</span>
<span class="token keyword">function</span> <span class="token function">containsNumber</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>字符串比较ASCII码</li></ul><blockquote><p>字符串比较会比较他们的ASCII码值，数字是连续的ASCII码，0123456789分别是48-57，在这个范围内的就可以。</p></blockquote><ul><li>隐式类型转化</li></ul><blockquote><p>数字字符串和数字比较，会隐式转化成数字，字符串和数字比较，会转化成数字NaN，和数字比较返回false，所以这种方式也可以找到字符串中是否有数字。</p></blockquote><ul><li>正则</li></ul><h3 id="_56-检查重复字符串" tabindex="-1"><a class="header-anchor" href="#_56-检查重复字符串" aria-hidden="true">#</a> 56. 检查重复字符串</h3><blockquote><p>题目描述 给定字符串 str，检查其是否包含连续重复的字母（a-zA-Z），包含返回 true，否则返回 false 输入： &#39;rattler&#39; 输出： true</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：双指针</span>
<span class="token keyword">function</span> <span class="token function">containsRepeatingLetter</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果字符串长度小于2直接返回false</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token comment">// 左右指针</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果左右相等且都是a-z范围的就返回true</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">===</span> str<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;z&#39;</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 否则返回false</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
    
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：正则，小括号表示分组，\\1表示引用第一个分组</span>
<span class="token keyword">function</span> <span class="token function">containsRepeatingLetter</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-zA-Z])\\1</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>双指针(算法思维)</li><li>正则</li></ul><h3 id="_57-判断是否以元音字母结尾" tabindex="-1"><a class="header-anchor" href="#_57-判断是否以元音字母结尾" aria-hidden="true">#</a> 57. 判断是否以元音字母结尾</h3><blockquote><p>题目描述 给定字符串 str，检查其是否以元音字母结尾 1、元音字母包括 a，e，i，o，u，以及对应的大写 2、包含返回 true，否则返回 false 输入： &#39;gorilla&#39; ; 输出： true</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：indexOf</span>
<span class="token keyword">function</span> <span class="token function">endsWithVowel</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">false</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：includes</span>
<span class="token keyword">function</span> <span class="token function">endsWithVowel</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>字符串方法slice，toLowerCase</li><li>数组方法indexOf，includes</li></ul>`,33),m={id:"_58-获取指定字符串",tabindex:"-1"},b=s("a",{class:"header-anchor",href:"#_58-获取指定字符串","aria-hidden":"true"},"#",-1),g={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.nowcoder.com%2Fpractice%2F4ec56ad04a9a4402a01e50a390a8060a%3FtpId%3D2%26tqId%3D37912%26rp%3D1%26ru%3D%2Factivity%2Foj%26qru%3D%2Fta%2Ffront-end%2Fquestion-ranking%26tab%3DanswerKey",target:"_blank",rel:"noopener noreferrer"},f=a(`<blockquote><p>题目描述 给定字符串 str，检查其是否包含 连续3个数字 1、如果包含，返回最先出现的 3 个数字的字符串 2、如果不包含，返回 false 输入： &#39;9876543&#39; 输出： 987</p></blockquote><p>PS: 这个题我们理解的是三个连续递增的数字，但是题的意思是连续的数字即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：计数器</span>
<span class="token keyword">function</span> <span class="token function">captureThreeNumbers</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      count<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      count <span class="token operator">=</span> <span class="token number">0</span>
      start <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> count <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token operator">?</span> str<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">+</span>str<span class="token punctuation">[</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>str<span class="token punctuation">[</span>start<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二：正则 match可以得到匹配的结果</span>
<span class="token keyword">function</span> <span class="token function">captureThreeNumbers</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> arr <span class="token operator">?</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是连续递增的数字，要这样实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：双指针</span>
<span class="token keyword">function</span> <span class="token function">captureThreeNumbers</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 保证右指针连续，且属于数字，右指针往过移动</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right<span class="token operator">++</span>
        <span class="token comment">// 如果小于3，左指针就去右指针右边</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            left <span class="token operator">=</span> <span class="token operator">++</span>right
        <span class="token comment">// 大于3直接返回    </span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 循环结果，如果大于3就返回，否则返回false</span>
    <span class="token keyword">return</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>计数器</li><li>正则</li><li>双指针(算法思维) + 判断连续数字</li></ul><h3 id="_59-判断是否符合指定格式" tabindex="-1"><a class="header-anchor" href="#_59-判断是否符合指定格式" aria-hidden="true">#</a> 59. 判断是否符合指定格式</h3><blockquote><p>题目描述 给定字符串 str，检查其是否符合如下格式 1、XXX-XXX-XXXX 2、其中 X 为 Number 类型 输入：&#39;800-555-1212&#39; 输出：true</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：正则</span>
<span class="token keyword">function</span> <span class="token function">matchesPattern</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{3}-\\d{3}-\\d{4}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>匹配或者判断什么格式就优先考虑正则</li></ul><h3 id="_60-判断是否符合-usd-格式" tabindex="-1"><a class="header-anchor" href="#_60-判断是否符合-usd-格式" aria-hidden="true">#</a> 60. 判断是否符合 USD 格式</h3><blockquote><p>题目描述 给定字符串 str，检查其是否符合美元书写格式 1、以 <code>$</code> 开始 2、整数部分，从个位起，满 3 个数字用 , 分隔 3、如果为小数，则小数部分长度为 2 4、正确的格式如：<code>$1,023,032.03</code> 或者 <code>$2.03</code>， 错误的格式如：<code>$3,432,12.12</code> 或者 <code>$34,344.3</code> 输入：<code>&#39;$20,933,209.93&#39;</code> 输出：true</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：正则，从左往右写，依次匹配</span>
<span class="token keyword">function</span> <span class="token function">isUSD</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\$[\\d]{1,3}(\\,[\\d]{3})*(|\\.[\\d]{2})$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关知识点：</p><ul><li>正则</li></ul><p>已经到底拉，60道题完事，恭喜你，通关啦~~~~</p>`,18);function h(w,y){const t=l("ExternalLinkIcon");return o(),c("div",null,[u,s("h3",r,[k,n(" 52. "),s("a",d,[n("改变上下文"),p(t)]),n("⭐")]),v,s("h3",m,[b,n(" 58. "),s("a",g,[n("获取指定字符串"),p(t)]),n("⭐")]),f])}const _=e(i,[["render",h],["__file","牛客网刷题51-60.html.vue"]]);export{_ as default};
