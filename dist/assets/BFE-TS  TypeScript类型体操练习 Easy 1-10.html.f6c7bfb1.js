import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as t,a as n,b as s,d as o,e as c,r as l}from"./app.d7b34baa.js";const r={},i=n("h1",{id:"bfe-ts-typescript类型体操练习-easy-1-10",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#bfe-ts-typescript类型体操练习-easy-1-10","aria-hidden":"true"},"#"),s(" BFE-TS TypeScript类型体操练习 Easy 1-10")],-1),k={href:"https://bigfrontend.dev/zh/typescript",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="utility-types-内置工具类型实现" tabindex="-1"><a class="header-anchor" href="#utility-types-内置工具类型实现" aria-hidden="true">#</a> Utility types 内置工具类型实现</h2><ol><li><p><strong>实现Partial</strong></p><p><code>Partial&lt;T&gt;</code>返回一个包含所有<code>T</code>的子集的type。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span>
  c<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
​
<span class="token comment">// below are all valid</span>
​
<span class="token keyword">const</span> a<span class="token operator">:</span> MyPartial<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
​
<span class="token keyword">const</span> b<span class="token operator">:</span> MyPartial<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token string">&#39;BFE.dev&#39;</span>
<span class="token punctuation">}</span>
​
<span class="token keyword">const</span> c<span class="token operator">:</span> MyPartial<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  b<span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">}</span>
​
<span class="token keyword">const</span> d<span class="token operator">:</span> MyPartial<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  b<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  c<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
​
<span class="token keyword">const</span> e<span class="token operator">:</span> MyPartial<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token string">&#39;BFE.dev&#39;</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  c<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现Required</strong></p><p>和<code>Partial&lt;T&gt;</code>正好相反， <code>Required&lt;T&gt;</code>会将所有的属性设为required。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// all properties are optional</span>
<span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  c<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
​
​
<span class="token keyword">const</span> a<span class="token operator">:</span> MyRequired<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// Error</span>
​
<span class="token keyword">const</span> b<span class="token operator">:</span> MyRequired<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token string">&#39;BFE.dev&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Error</span>
​
<span class="token keyword">const</span> c<span class="token operator">:</span> MyRequired<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  b<span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">}</span>
<span class="token comment">// Error</span>
​
<span class="token keyword">const</span> d<span class="token operator">:</span> MyRequired<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  b<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  c<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token comment">// Error</span>
​
<span class="token keyword">const</span> e<span class="token operator">:</span> MyRequired<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token string">&#39;BFE.dev&#39;</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  c<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token comment">// valid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现Readonly</strong></p><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现Record</strong></p><p><code>Record&lt;K, V&gt;</code>返回一个key是K值是V的object type。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Key</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span>
​
<span class="token keyword">const</span> a<span class="token operator">:</span> Record<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token string">&#39;BFE.dev&#39;</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token string">&#39;BFE.dev&#39;</span><span class="token punctuation">,</span>
  c<span class="token operator">:</span> <span class="token string">&#39;BFE.dev&#39;</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;bigfrontend.dev&#39;</span> <span class="token comment">// OK</span>
a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// Error</span>
a<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token string">&#39;BFE.dev&#39;</span> <span class="token comment">// Error</span>
​
<span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> MyRecord<span class="token operator">&lt;</span><span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现Pick</strong></p><p><code>Pick&lt;T, K&gt;</code>，正如其名所示，将从T中抽选出K中含有的属性然后返回一个新的type。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span>
  c<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
​
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// {a: string, b: number}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// {c: boolean}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现Omit</strong></p><p><code>Omit&lt;T, K&gt;</code>返回一个从T的属性中剔除掉K过后的type。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span>
  c<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
​
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> MyOmit<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// {c: boolean}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> MyOmit<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// {a: string, b: number}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> MyOmit<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;d&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// {a: string, b: number}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>实现Exclude</strong></p><p><code>Exclude&lt;T, K&gt;</code>返回一个从T中去掉能代入K的成员后的type。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span>
​
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> MyExclude<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;b&#39; | &#39;c&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> MyExclude<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;a&#39; | &#39;b</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> MyExclude<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;d&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// &#39;a&#39; | &#39;b&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> MyExclude<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>实现Extract</strong></p><p>和Exclude正好相反， <code>Extract&lt;T, U&gt;</code>返回T中可以代入到U的成员所组成的type。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span>
​
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> MyExtract<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;a&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> MyExtract<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;a&#39; | &#39;b&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> MyExtract<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;d&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;e&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// &#39;b&#39; | &#39;c&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> MyExtract<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token operator">&gt;</span>  <span class="token comment">// never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>实现NonNullable</strong></p><p>剔除 null | undefined 类型，表明非空</p><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>实现Parameters</strong></p><p>对于function type T， <code>Parameters&lt;T&gt;</code> 返回一个由其参数type组成的tuple type。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
​
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> MyParameters<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token comment">// [a:string, b: number, c:boolean]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> MyParameters<span class="token operator">&lt;</span><span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,2);function u(v,m){const a=l("ExternalLinkIcon");return e(),t("div",null,[i,n("p",null,[s("题目来自"),n("a",k,[s("TypeScript题目 | BFE.dev - 前端刷题，准备前端面试拿到心仪的Offer"),o(a)]),s("，总共60题，带你完爆类型体操！")]),d])}const y=p(r,[["render",u],["__file","BFE-TS  TypeScript类型体操练习 Easy 1-10.html.vue"]]);export{y as default};
