import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.d7b34baa.js";const o={},t=e(`<h1 id="cjs-和-es-module-横向对比" tabindex="-1"><a class="header-anchor" href="#cjs-和-es-module-横向对比" aria-hidden="true">#</a> CJS 和 ES Module 横向对比</h1><h2 id="es-module" tabindex="-1"><a class="header-anchor" href="#es-module" aria-hidden="true">#</a> ES Module</h2><h3 id="export关键字" tabindex="-1"><a class="header-anchor" href="#export关键字" aria-hidden="true">#</a> export关键字</h3><p>export关键字将一个模块中的变量、函数、类等导出；</p><p><strong>我们希望将其他中内容全部导出，它可以有如下的方式：</strong></p><ul><li>方式一：在语句声明的前面直接加上export关键字</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> myName <span class="token operator">=</span> <span class="token string">&quot;ypf&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> myAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;foo start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token function">GetMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Person GetMsg start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式二：将所有需要导出的标识符，放到export后面的 {}中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myName <span class="token operator">=</span> <span class="token string">&quot;ypf&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;foo start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token function">GetMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Person GetMsg start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> myName<span class="token punctuation">,</span> myAge<span class="token punctuation">,</span> foo<span class="token punctuation">,</span> Person <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式三：导出时给标识符起一个别名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myName1 <span class="token operator">=</span> <span class="token string">&quot;ypf&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myAge1 <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;foo start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person1</span> <span class="token punctuation">{</span>
	<span class="token function">GetMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Person GetMsg start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> myName1 <span class="token keyword">as</span> myName<span class="token punctuation">,</span> myAge1 <span class="token keyword">as</span> myAge<span class="token punctuation">,</span> foo1 <span class="token keyword">as</span> foo<span class="token punctuation">,</span> Person1 <span class="token keyword">as</span> Person <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import关键字" tabindex="-1"><a class="header-anchor" href="#import关键字" aria-hidden="true">#</a> import关键字</h3><p><strong>导入内容的方式也有多种：</strong></p><ul><li>import { 标识符列表 } from &#39; 模块 &#39;，原名输出；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> myName<span class="token punctuation">,</span> myAge<span class="token punctuation">,</span> foo<span class="token punctuation">,</span> Person <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./module.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>方式二：导入时给标识符起别名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
	myName <span class="token keyword">as</span> myName2<span class="token punctuation">,</span>
	myAge <span class="token keyword">as</span> myAge2<span class="token punctuation">,</span>
	foo <span class="token keyword">as</span> foo2<span class="token punctuation">,</span>
	Person <span class="token keyword">as</span> Person2<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./module.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式三：通过 * 将模块功能放到一个模块功能对象（a module object）上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myData <span class="token keyword">from</span> <span class="token string">&quot;./module.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="export和import结合使用" tabindex="-1"><a class="header-anchor" href="#export和import结合使用" aria-hidden="true">#</a> export和import结合使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>sum <span class="token keyword">as</span> barSum<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./bar.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>为什么要这样做呢？</strong></p><p>在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中，这样方便指定统一的接口规范，也方便阅读。</p><h3 id="default用法-默认导出" tabindex="-1"><a class="header-anchor" href="#default用法-默认导出" aria-hidden="true">#</a> default用法 默认导出</h3><p>默认导出export时可以不需要指定名字，在导入时不需要使用 {}，并且可以自己来指定名字，它也方便我们和现有的CommonJS等规范相互操作。</p><p><strong>注意：在一个模块中，只能有一个默认导出（default export）；</strong></p><h3 id="import-函数" tabindex="-1"><a class="header-anchor" href="#import-函数" aria-hidden="true">#</a> import() 函数</h3><p><strong>import 是静态解析并加载一个模块的，是不可以将其放到逻辑代码中的</strong></p><p>因为ES Module在被JS引擎解析时，就必须知道它的依赖关系，由于这个时候js代码没有任何的运行，所以无法在进行类似于if判断中根据代码的执行情况。</p><p>但是某些情况下，我们确确实实希望动态的来加载某一个模块，这个时候我们需要使用 import() 函数来动态加载。</p><h2 id="加载对比" tabindex="-1"><a class="header-anchor" href="#加载对比" aria-hidden="true">#</a> 加载对比</h2><h3 id="commonjs的加载过程" tabindex="-1"><a class="header-anchor" href="#commonjs的加载过程" aria-hidden="true">#</a> CommonJS的加载过程</h3><ol><li><p><strong>CommonJS模块加载 js 文件的过程是运行时加载的，并且是同步的。</strong></p><p>这意味着是js引擎在<strong>执行js代码的过程中加载模块</strong>。同步的也就意味着一个文件没有加载结束之前，后面的代码都不会执行。</p></li><li><p><strong>CommonJS通过module.exports导出的是一个对象（对对象的引用）。</strong></p><p>导出的是一个对象意味着可以将这个对象的引用在其他模块中赋值给其他变量，但是最终他们指向的都是同一个对象，那么一个变量修改了对象的属性，所有的地方都会被修改。</p></li></ol><h3 id="es-module加载过程" tabindex="-1"><a class="header-anchor" href="#es-module加载过程" aria-hidden="true">#</a> ES Module加载过程</h3><ol><li><p><strong>ES Module加载js文件的过程是编译（解析）时加载的，并且是异步的</strong></p><p>编译（解析）时加载，意味着import不能和运行时相关的内容放在一起使用，比如from后面的路径需要动态获取，比如不能将import放到if等语句的代码块中。所以我们有时候也称ES Module是静态解析的，而不是动态或者运行时解析的。</p><p><strong>异步的意味着</strong>，JS引擎在遇到import时会去获取这个js文件，但是这个获取的过程是异步的，并不会阻塞主线程继续执行。<strong>在<code>type=&quot;module&quot;</code>的情况下，不管是文件还是行内脚本，都会具有<code>defer</code>的特性。</strong></p><p>而<code>async</code>可以作用于所有的<code>module</code>类型的脚本，无论是行内还是文件形式的。但是添加了<code>async</code>关键字以后并不意味着浏览器在解析到这个脚本文件时就会执行，<strong>而是会等到这段脚本所依赖的所有<code>module</code>加载完毕后再执行。</strong></p><p><img src="https://cdn.yihuiblog.top/images/202208081618461.png" alt="image"></p></li><li><p><strong>ES Module通过export导出的是变量本身的引用</strong></p><p>export在导出一个变量时，js引擎会解析这个语法，并且创建<strong>模块环境记录（module environment record）</strong>。模块环境记录会和变量进行绑定（binding），并且这个绑定是实时的。</p><p>而在导入的地方，我们是可以实时的获取到绑定的最新值的，如果在导出的模块中修改了变化，那么导入的地方可以<strong>实时获取最新的变量</strong>。</p><p>但是，在导入的地方不可以修改变量，因为它只是被绑定到了这个变量上**（其实是一个常量，或理解成静态只读引用）**</p></li></ol><h2 id="cjs和es-module交互" tabindex="-1"><a class="header-anchor" href="#cjs和es-module交互" aria-hidden="true">#</a> CJS和ES Module交互</h2><p><strong>通常情况下，CommonJS不能加载ES Module</strong></p><p>因为CommonJS是同步加载的，但是ES Module必须经过静态分析等，无法在这个时候执行JavaScript代码，Node当中是不支持的。</p><p><strong>多数情况下，ES Module可以加载CommonJS</strong></p><p>ES Module在加载CommonJS时，会将其module.exports导出的内容作为default导出方式来使用，这个依然需要看具体的实现，比如webpack中是支持的、Node最新的Current版本也是支持的，但是在最新的LTS版本中就不支持。</p><blockquote><p>文章内容根据<code>codewhy</code>老师的<code>《深入Node.js技术栈》</code>课程整理的笔记。</p></blockquote>`,41),p=[t];function c(i,l){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","CJS 和 ES Module 横向对比.html.vue"]]);export{d as default};
