import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as r,a as e,b as o,d as t,e as s,r as l}from"./app.d7b34baa.js";const d={},c=s('<h1 id="前端存储方案一览" tabindex="-1"><a class="header-anchor" href="#前端存储方案一览" aria-hidden="true">#</a> 前端存储方案一览</h1><h3 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> <strong>Cookies</strong></h3><p>在HTML5标准前本地储存的主要的也是最早提出的⽅式，优点是兼容性好，请求头⾃带cookie⽅便（使用fetch的话需要额外配置），缺点是⼤⼩只有4k，⾃动请求头加⼊cookie浪费流量，而且每个domain限制20个cookie，使⽤起来麻烦，需要自行封装相关方法。</p><ul><li>Cookie一旦创建成功，名称就无法修改</li><li>Cookie是无法跨域名的，但是子域名之间共享</li><li>有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，预防方式包括设置httpOnly</li><li>Cookie在请求一个新的页面的时候都会被发送过去</li></ul><p>跨域名共享方案：</p><ul><li>Nginx反向代理</li><li>单个站点登入后，通过setCookie的方式，在其他网站上写上Cookie，同时服务端的Session使用同一个节点</li></ul><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> <strong>LocalStorage</strong></h3><p>HTML5加⼊的以键值对(Key-Value)为标准的⽅式，优点是操作⽅便，永久性储存（除⾮⼿动删除），⼤⼩为5M，兼容IE8+ 。</p><p>如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage，同时受到同源策略的限制，非同源页面无法访问。</p><h3 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> <strong>SessionStorage</strong></h3><p>与LocalStorage基本类似，区别是SessionStorage当⻚⾯关闭后会被清理，⽽且与cookie、LocalStorage不同，其主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</p>',11),h={id:"web-sql",tabindex:"-1"},_=e("a",{class:"header-anchor",href:"#web-sql","aria-hidden":"true"},"#",-1),u={href:"https://www.w3.org/TR/webdatabase/",target:"_blank",rel:"noopener noreferrer"},p=e("strong",null,"Web SQL",-1),b=e("p",null,[o("2010年被W3C"),e("strong",null,"废弃"),o("的本地数据库数据存储⽅案，但是主流浏览器（⽕狐除外）都已经有了相关的实现，Web SQL类似于SQLite，是真正意义上的关系型数据库。Web SQL 数据库 API 并不是 HTML5 规范的一部分，但是它是一个独立的规范，引入了一组使用 SQL 操作客户端数据库的 APIs。")],-1),g=e("blockquote",null,[e("p",null,"Beware. This specification is no longer in active maintenance and the Web Applications Working Group does not intend to maintain it further.")],-1),k={href:"http://www.w3.org/2008/webapps/",target:"_blank",rel:"noopener noreferrer"},f={id:"indexeddb",tabindex:"-1"},x=e("a",{class:"header-anchor",href:"#indexeddb","aria-hidden":"true"},"#",-1),L={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API",target:"_blank",rel:"noopener noreferrer"},S=e("strong",null,"IndexedDB",-1),m=e("p",null,"IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））。其是被正式纳⼊HTML5标准的数据库储存⽅案，它是NoSQL数据库，⽤键值对进⾏储存。",-1),w=e("ul",null,[e("li",null,"键值对储存"),e("li",null,"异步"),e("li",null,"支持事务"),e("li",null,"同源限制"),e("li",null,"储存空间大"),e("li",null,"支持二进制储存")],-1);function C(W,I){const n=l("ExternalLinkIcon");return i(),r("div",null,[c,e("h3",h,[_,o(),e("a",u,[p,t(n)])]),b,e("blockquote",null,[g,e("p",null,[o("本文档是 2010 年 11 月 18 日 Web SQL 数据库工作组的说明。作为工作组说明发布并不意味着得到 W3C 成员的认可。这是一份草稿文件，可能随时被其他文件更新、替换或废止。除了正在进行的工作之外，引用本文件是不恰当的。W3C "),e("a",k,[o("Web 应用程序工作组"),t(n)]),o("是负责本文档的 W3C 工作组。")])]),e("h3",f,[x,o(),e("a",L,[S,t(n)])]),m,w])}const Q=a(d,[["render",C],["__file","前端存储方案一览.html.vue"]]);export{Q as default};
