import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as p}from"./app.d7b34baa.js";const t={},e=p(`<h1 id="javascript-进阶整合" tabindex="-1"><a class="header-anchor" href="#javascript-进阶整合" aria-hidden="true">#</a> JavaScript 进阶整合</h1><h2 id="_20个-javascript-技巧" tabindex="-1"><a class="header-anchor" href="#_20个-javascript-技巧" aria-hidden="true">#</a> 20个 Javascript 技巧</h2><h3 id="_1-声明和初始化数组" tabindex="-1"><a class="header-anchor" href="#_1-声明和初始化数组" aria-hidden="true">#</a> 1.声明和初始化数组</h3><p>我们可以使用特定的大小来初始化数组，也可以通过指定值来初始化数组内容，大家可能用的是一组数组，其实二维数组也可以这样做，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> matrix <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">4</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-求和-最小值和最大值" tabindex="-1"><a class="header-anchor" href="#_2-求和-最小值和最大值" aria-hidden="true">#</a> 2. 求和，最小值和最大值</h3><h3 id="_2-求和-最小值和最大值-1" tabindex="-1"><a class="header-anchor" href="#_2-求和-最小值和最大值-1" aria-hidden="true">#</a> 2. 求和，最小值和最大值</h3><p>我们应该利用 <code>reduce</code>方法快速找到基本的数学运算。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>求和</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: 35</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最大值</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最小值</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-排序字符串-数字或对象等数组" tabindex="-1"><a class="header-anchor" href="#_3-排序字符串-数字或对象等数组" aria-hidden="true">#</a> 3.排序字符串，数字或对象等数组</h3><p>我们有内置的方法<code>sort()</code>和<code>reverse()</code>来排序字符串，但是如果是数字或对象数组呢</p><p><strong>字符串数组排序</strong></p><h3 id="_3-排序字符串-数字或对象等数组-1" tabindex="-1"><a class="header-anchor" href="#_3-排序字符串-数字或对象等数组-1" aria-hidden="true">#</a> 3.排序字符串，数字或对象等数组</h3><p>我们有内置的方法<code>sort()</code>和<code>reverse()</code>来排序字符串，但是如果是数字或对象数组呢</p><p><strong>字符串数组排序</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stringArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kapil&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Steve&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Musk&quot;</span><span class="token punctuation">]</span>
stringArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kapil&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Musk&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Steve&quot;</span><span class="token punctuation">]</span>

stringArr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;Steve&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Musk&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kapil&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数字数组排序</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>

array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对象数组排序</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objectArr <span class="token operator">=</span> <span class="token punctuation">[</span> 
    <span class="token punctuation">{</span> <span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token string">&#39;Lazslo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token string">&#39;Jamf&#39;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token string">&#39;Pig&#39;</span><span class="token punctuation">,</span>    <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token string">&#39;Bodine&#39;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token string">&#39;Pirate&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token string">&#39;Prentice&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
objectArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>last_name<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 </span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token string">&quot;Pig&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token string">&quot;Bodine&quot;</span><span class="token punctuation">}</span>
<span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token string">&quot;Lazslo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token string">&quot;Jamf&quot;</span><span class="token punctuation">}</span>
<span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token string">&quot;Pirate&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token string">&quot;Prentice&quot;</span><span class="token punctuation">}</span>
<span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-从数组中过滤到虚值" tabindex="-1"><a class="header-anchor" href="#_4-从数组中过滤到虚值" aria-hidden="true">#</a> 4.从数组中过滤到虚值</h3><p>像 <code>0</code>, <code>undefined</code>, <code>null</code>, <code>false</code>, <code>&quot;&quot;</code>, <code>&#39;&#39;</code>这样的假值可以通过下面的技巧轻易地过滤掉。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-使用逻辑运算符处理需要条件判断的情况" tabindex="-1"><a class="header-anchor" href="#_5-使用逻辑运算符处理需要条件判断的情况" aria-hidden="true">#</a> 5. 使用逻辑运算符处理需要条件判断的情况</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">arg1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    arg1 <span class="token operator">=</span> arg1 <span class="token operator">||</span> <span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token comment">// 如果arg1没有值，则取默认值 10</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  
foo <span class="token operator">===</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 如果 foo 等于 10，刚执行 doSomething();</span>
<span class="token comment">// 输出: 10</span>

foo <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// is the same thing as if (foo != 5) then doSomething();</span>
<span class="token comment">// Output: 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-去除重复值" tabindex="-1"><a class="header-anchor" href="#_6-去除重复值" aria-hidden="true">#</a> 6. 去除重复值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>idx<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token keyword">const</span> nonUnique <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Output: [5, 4, 7, 8, 9, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-创建一个计数器对象或-map" tabindex="-1"><a class="header-anchor" href="#_7-创建一个计数器对象或-map" aria-hidden="true">#</a> 7. 创建一个计数器对象或 Map</h3><p>大多数情况下，可以通过创建一个对象或者Map来计数某些特殊词出现的频率。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;kapilalipak&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> table<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  table<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token operator">=</span>table<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">{</span><span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">l</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> countMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> string<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>countMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      countMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> countMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      countMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token string">&quot;k&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;p&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;i&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;l&quot;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-三元运算符很酷" tabindex="-1"><a class="header-anchor" href="#_8-三元运算符很酷" aria-hidden="true">#</a> 8. 三元运算符很酷</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fever</span><span class="token punctuation">(</span><span class="token parameter">temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> temp <span class="token operator">&gt;</span> <span class="token number">97</span> <span class="token operator">?</span> <span class="token string">&#39;Visit Doctor!&#39;</span> <span class="token operator">:</span> temp <span class="token operator">&lt;</span> <span class="token number">97</span> <span class="token operator">?</span> <span class="token string">&#39;Go Out and Play!!&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Take Some Rest!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 输出</span>
<span class="token function">Fever</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">&quot;Take Some Rest!&quot;</span> 
<span class="token function">Fever</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">&quot;Visit Doctor!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-循环方法的比较" tabindex="-1"><a class="header-anchor" href="#_9-循环方法的比较" aria-hidden="true">#</a> 9. 循环方法的比较</h3><ul><li><code>for</code> 和 <code>for..in</code> 默认获取索引，但你可以使用<code>arr[index]</code>。</li><li><code>for..in</code>也接受非数字，所以要避免使用。</li><li><code>forEach</code>, <code>for...of</code> 直接得到元素。</li><li>forEach 也可以得到索引，但 <code>for...of</code> 不行。</li></ul><h3 id="_10-合并两个对象" tabindex="-1"><a class="header-anchor" href="#_10-合并两个对象" aria-hidden="true">#</a> 10. 合并两个对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Kapil Raghuwanshi&#39;</span><span class="token punctuation">,</span> 
 <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;Male&#39;</span> 
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> college <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token string">&#39;Mani Primary School&#39;</span><span class="token punctuation">,</span> 
 <span class="token literal-property property">secondary</span><span class="token operator">:</span> <span class="token string">&#39;Lass Secondary School&#39;</span> 
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> skills <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token literal-property property">programming</span><span class="token operator">:</span> <span class="token string">&#39;Extreme&#39;</span><span class="token punctuation">,</span> 
 <span class="token literal-property property">swimming</span><span class="token operator">:</span> <span class="token string">&#39;Average&#39;</span><span class="token punctuation">,</span> 
 <span class="token literal-property property">sleeping</span><span class="token operator">:</span> <span class="token string">&#39;Pro&#39;</span> 
 <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> summary <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>user<span class="token punctuation">,</span> <span class="token operator">...</span>college<span class="token punctuation">,</span> <span class="token operator">...</span>skills<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 合并多个对象</span>
<span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&quot;Male&quot;</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Kapil Raghuwanshi&quot;</span>
<span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token string">&quot;Mani Primary School&quot;</span>
<span class="token literal-property property">programming</span><span class="token operator">:</span> <span class="token string">&quot;Extreme&quot;</span>
<span class="token literal-property property">secondary</span><span class="token operator">:</span> <span class="token string">&quot;Lass Secondary School&quot;</span>
<span class="token literal-property property">sleeping</span><span class="token operator">:</span> <span class="token string">&quot;Pro&quot;</span>
<span class="token literal-property property">swimming</span><span class="token operator">:</span> <span class="token string">&quot;Average&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-箭头函数" tabindex="-1"><a class="header-anchor" href="#_11-箭头函数" aria-hidden="true">#</a> 11. 箭头函数</h3><p>箭头函数表达式是传统函数表达式的一种替代方式，但受到限制，不能在所有情况下使用。因为它们有词法作用域(父作用域)，并且没有自己的<code>this</code>和<code>argument</code>，因此它们引用定义它们的环境。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Kapil&#39;</span><span class="token punctuation">,</span>
<span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出</span>
<span class="token string">&quot;Kapil&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Kapil&#39;</span><span class="token punctuation">,</span>
<span class="token function-variable function">sayName</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output</span>
&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-可选的链" tabindex="-1"><a class="header-anchor" href="#_13-可选的链" aria-hidden="true">#</a> 13. 可选的链</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">employee</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Kapil&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span>employee<span class="token operator">?.</span>name<span class="token punctuation">;</span>
<span class="token comment">// Output: &quot;Kapil&quot;</span>
user<span class="token punctuation">.</span>employ<span class="token operator">?.</span>name<span class="token punctuation">;</span>
<span class="token comment">// Output: undefined</span>
user<span class="token punctuation">.</span>employ<span class="token punctuation">.</span>name
<span class="token comment">// 输出: VM21616:1 Uncaught TypeError: Cannot read property &#39;name&#39; of undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-洗牌一个数组" tabindex="-1"><a class="header-anchor" href="#_13-洗牌一个数组" aria-hidden="true">#</a> 13.洗牌一个数组</h3><p>利用内置的<code>Math.random()</code>方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-双问号语法" tabindex="-1"><a class="header-anchor" href="#_14-双问号语法" aria-hidden="true">#</a> 14.双问号语法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">&#39;my school&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: &quot;my school&quot;</span>

<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="剩余和展开语法" tabindex="-1"><a class="header-anchor" href="#剩余和展开语法" aria-hidden="true">#</a> 剩余和展开语法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>  b<span class="token punctuation">,</span> <span class="token operator">...</span>manyMoreArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">myFun</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;five&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;six&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出: 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;shoulders&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;knees&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> lyrics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;head&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>parts<span class="token punctuation">,</span> <span class="token string">&#39;and&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;toes&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 

lyrics<span class="token punctuation">;</span>
<span class="token comment">// 输出: </span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;shoulders&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;knees&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;and&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;toes&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-默认参数" tabindex="-1"><a class="header-anchor" href="#_16-默认参数" aria-hidden="true">#</a> 16.默认参数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>high<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> high<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出: 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-将十进制转换为二进制或十六进制" tabindex="-1"><a class="header-anchor" href="#_17-将十进制转换为二进制或十六进制" aria-hidden="true">#</a> 17. 将十进制转换为二进制或十六进制</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: &quot;1010&quot;</span>
num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: &quot;a&quot;</span>
num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: &quot;12&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-使用解构来交换两个数" tabindex="-1"><a class="header-anchor" href="#_18-使用解构来交换两个数" aria-hidden="true">#</a> 18. 使用解构来交换两个数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span>

<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span>
<span class="token comment">// 输出</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19-单行的回文数检查" tabindex="-1"><a class="header-anchor" href="#_19-单行的回文数检查" aria-hidden="true">#</a> 19. 单行的回文数检查</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkPalindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">checkPalindrome</span><span class="token punctuation">(</span><span class="token string">&#39;naman&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-将object属性转换为属性数组" tabindex="-1"><a class="header-anchor" href="#_20-将object属性转换为属性数组" aria-hidden="true">#</a> 20.将Object属性转换为属性数组</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span>
<span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span>

Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span>

Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何动态导入ecmascript模块" tabindex="-1"><a class="header-anchor" href="#如何动态导入ecmascript模块" aria-hidden="true">#</a> 如何动态导入ECMAScript模块？</h2><blockquote><p>原文：https://dmitripavlutin.com/ecmascript-modules-dynamic-import/</p></blockquote><p>ECMAScript(又名ES2015或ES)模块是在JavaScript中组织内聚代码块的一种方法。</p><p>ES模块系统有2个部分：</p><ul><li><code>import</code>模块 - 使用 <code>import { func } from &#39;./myModule&#39;</code></li><li><code>export</code>模块- 使用 <code>export const func = () =&gt; {}</code></li></ul><p><code>import</code> 模块是使用 <code>import</code> 语法导入依赖项的模块:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> concat <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./concatModule&#39;</span><span class="token punctuation">;</span>

<span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;ab&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而被导入的模块使用<code>export</code>语法从自身导出组件:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">concat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">paramA<span class="token punctuation">,</span> paramB</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> paramA <span class="token operator">+</span> paramB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>import { concat } from &#39;./concatModule&#39;</code>使用ES模块的方式是静态的：<strong>意味着模块之间的依赖关系在编译时就已经知道了。</strong></p><p>虽然静态导入在大多数情况下是有效的，但有时我们想节省客户的带宽并有条件地加载模块。</p><p>为了实现这一点，<strong>我们可以用不同的方式使用 <code>import(pathToModule)</code> 语法对模块进行新的动态导入：作为一个函数。动态导入是<code>ES2020</code>开始的一个JavaScript语言特性。</strong></p><h3 id="_1-动态模块的导入" tabindex="-1"><a class="header-anchor" href="#_1-动态模块的导入" aria-hidden="true">#</a> 1. 动态模块的导入</h3><p>当<code>import</code>关键字用作函数而不是静态导入语法时:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>pathToModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它返回一个<code>promise</code> ，并开始一个加载模块的异步任务。如果模块被成功加载，那么<code>promise</code>就会解析到模块的内容，否则，<code>promise</code> 就会被拒绝。</p><p>请注意，<code>pathToModule</code>可以是任何表达式，其值为表示导入模块路径的字符串。有效的值是普通的字符串字面意义（如<code>./myModule</code>）或有字符串的变量。</p><p>例如，我们在一个异步函数中加载一个模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./myModule&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ... use myModule</span>
<span class="token punctuation">}</span>

<span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有趣的是，与静态导入相反，动态导入接受以模块路径求值的表达式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token parameter">pathToModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>pathToModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ... use myModule</span>
<span class="token punctuation">}</span>

<span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token string">&#39;./myModule&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，了解了如何加载模块后，我们来看看如何从导入的模块中提取组件。</p><h3 id="_2-导入组件" tabindex="-1"><a class="header-anchor" href="#_2-导入组件" aria-hidden="true">#</a> 2.导入组件</h3><h4 id="_2-1-导入命名组件" tabindex="-1"><a class="header-anchor" href="#_2-1-导入命名组件" aria-hidden="true">#</a> 2.1 导入命名组件</h4><p>考虑下面的模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// namedConcat.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">concat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">paramA<span class="token punctuation">,</span> paramB</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> paramA <span class="token operator">+</span> paramB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里导出了一个 <code>concat</code> 函数。</p><p>如果想动态导入<code>namedConcat.js</code>，并访问命名的导出<code>concat</code>，那么只需通解构的方式就行了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> concat <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./namedConcat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;bc&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-默认导出" tabindex="-1"><a class="header-anchor" href="#_2-2-默认导出" aria-hidden="true">#</a> 2.2 默认导出</h4><p>如果模块是默认导出的，我们可以使用<code>default</code>属性来访问。</p><p>还是上面的例子，我们将<code>defaultConcat.js</code>里面的<code>concat</code>函数默认导出:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// defaultConcat.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">paramA<span class="token punctuation">,</span> paramB</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> paramA <span class="token operator">+</span> paramB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在动态导入模块中,可以使用<code>default</code>属性来访问:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> defaultImport <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./defaultConcat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">defaultImport</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;bc&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>default</code>在JavaScript中是一个关键字，所以它不能用作变量名。</p><h4 id="_2-3导入混合形式" tabindex="-1"><a class="header-anchor" href="#_2-3导入混合形式" aria-hidden="true">#</a> 2.3导入混合形式</h4><p>如果模块里面既有默认导出也有命名导出，同样也是使用解构的方式来访问：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> 
    <span class="token keyword">default</span><span class="token operator">:</span> defaultImport<span class="token punctuation">,</span>
    namedExport1<span class="token punctuation">,</span>
    namedExport2
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./mixedExportModule&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">loadMyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-何时使用动态导入" tabindex="-1"><a class="header-anchor" href="#_3-何时使用动态导入" aria-hidden="true">#</a> 3.何时使用动态导入</h4><p>建议在模块比较大的，或者要根据条件才导入的模块可以使用<strong>动态导入</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">execBigModule</span><span class="token punctuation">(</span><span class="token parameter">condition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> funcA <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./bigModuleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> funcB <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./bigModuleB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">execBigModule</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于小模块(如前面例子中的<code>namedConcat.js</code>或<code>defaultConcat.js</code>)，只有几十行代码，使用动态导入在点杀鸡用牛刀感觉。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>当调用 <code>import(pathToModule)</code> 作为一个函数时，其参数表示一个模块的指定符（又称路径），那么就会动态加载该模块。</p><p>在这种情况下，<code>module = await import(pathToModule)</code> 返回一个 promise ，该承诺解析为一个包含导入模块组件的对象。</p><p>Node.js（13.2及以上版本）和大多数现代浏览器都支持动态导入。</p>`,117),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","JavaScript 进阶整合.html.vue"]]);export{k as default};
