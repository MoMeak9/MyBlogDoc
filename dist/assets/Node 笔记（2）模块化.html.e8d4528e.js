import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as o,e as s}from"./app.d7b34baa.js";const n={},r=s(`<h1 id="node-笔记-2-模块化" tabindex="-1"><a class="header-anchor" href="#node-笔记-2-模块化" aria-hidden="true">#</a> Node 笔记（2）模块化</h1><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h2><h3 id="什么是模块化开发" tabindex="-1"><a class="header-anchor" href="#什么是模块化开发" aria-hidden="true">#</a> 什么是模块化开发？</h3><ul><li>事实上模块化开发最终的目的是将程序<strong>划分成一个个小的结构</strong>；</li><li>这个结构中编写属于<strong>自己的逻辑代码</strong>，有自己的作用域，不会影响到其他的结构；</li><li>这个结构可以将自己希望暴露的<strong>变量、函数、对象等导出</strong>给其结构使用；</li><li>也可以通过某种方式，导入另外结构中的<strong>变量、函数、对象</strong>等；</li></ul><p>上面说提到的结构，就是模块；按照这种结构划分开发程序的过程，就是模块化开发的过程；</p><h2 id="commonjs和node" tabindex="-1"><a class="header-anchor" href="#commonjs和node" aria-hidden="true">#</a> CommonJS和Node</h2><p>我们需要知道CommonJS是一个规范，最初提出来是在浏览器以外的地方使用，并且当时被命名为ServerJS，后来为了 体现它的广泛性，修改为CommonJS，平时我们也会简称为CJS。</p><ul><li><p>Node中对<strong>CommonJS进行了支持和实现</strong>；</p></li><li><p>在Node中<strong>每一个js文件都是一个单独的模块</strong>；</p></li><li><p>这个模块中包括<strong>CommonJS规范的核心变量</strong>：exports、module.exports、require；</p></li></ul><h2 id="exports导出" tabindex="-1"><a class="header-anchor" href="#exports导出" aria-hidden="true">#</a> exports导出</h2><p>exports是一个对象，我们可以在这个对象中添加很多个属性，添加的属性会导出；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token string">&#39;sayHello&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一个文件中可以导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这行完成了什么操作呢？</p><ul><li>意味着main中的bar变量等于exports对象；</li><li>也就是require通过各种查找方式，最终找到了exports这个对象；</li><li>并且将这个exports对象赋值给了bar变量；</li><li>bar变量就是exports对象了；</li></ul><h3 id="它们实际上是一个浅层拷贝" tabindex="-1"><a class="header-anchor" href="#它们实际上是一个浅层拷贝" aria-hidden="true">#</a> 它们实际上是一个浅层拷贝</h3><ul><li><strong>bar对象是exports对象的浅拷贝（引用赋值）；</strong></li><li>浅拷贝的本质就是一种引用的赋值而已；</li></ul><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204082013660.png" alt="image-20220408201318574"></p><h2 id="module-exports又是什么" tabindex="-1"><a class="header-anchor" href="#module-exports又是什么" aria-hidden="true">#</a> module.exports又是什么？</h2><p>**在Node中真正用于导出的其实根本不是exports，而是module.exports；**CommonJS中是没有module.exports的概念的；但是为了实现模块的导出，Node中使用的是Module的类，每一个模块都是Module的一个实例，也就是 module；</p><p><strong>为什么exports也可以导出呢？</strong></p><p>这是因为module对象的exports属性是exports对象的一个引用；</p><p>也就是说 <code>module.exports = exports = main中的bar</code>；</p><h2 id="模块的加载过程" tabindex="-1"><a class="header-anchor" href="#模块的加载过程" aria-hidden="true">#</a> 模块的加载过程</h2><ul><li><p>模块在被第一次引入时，模块中的js代码会被运行一次</p></li><li><p>模块被多次引入时，会缓存，<strong>最终只加载（运行）一次</strong></p><p>这是因为每个模块对象module都有一个属性：loaded。为false表示还没有加载，为true表示已经加载；</p></li><li><p>如果有循环引入，那么加载顺序是采取深度优先算法</p></li></ul><p>main -&gt; aaa -&gt; ccc -&gt; ddd -&gt; eee -&gt;bbb</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204082033004.png" alt="image-20220408203317949"></p><h2 id="commonjs规范缺点" tabindex="-1"><a class="header-anchor" href="#commonjs规范缺点" aria-hidden="true">#</a> CommonJS规范缺点</h2><p><strong>CommonJS加载模块是同步的：</strong></p><ul><li>同步的意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行；</li><li>这个在服务器不会有什么问题，因为服务器加载的js文件都是本地文件，加载速度非常快；</li></ul><p><strong>如果将它应用于浏览器呢？</strong></p><ul><li>浏览器加载js文件需要先从服务器将文件下载下来，之后在加载运行；</li><li>那么采用同步的就意味着后续的js代码都无法正常运行，即使是一些简单的DOM操作；所以在浏览器中，我们通常不使用CommonJS规范；</li></ul><p><strong>在早期为了可以在浏览器中使用模块化，通常会采用AMD或CMD</strong></p><ul><li>但是目前一方面现代的浏览器已经支持ES Modules，另一方面借助于webpack等工具可以实现对CommonJS或者 ES Module代码的转换；</li></ul><h2 id="amd规范" tabindex="-1"><a class="header-anchor" href="#amd规范" aria-hidden="true">#</a> AMD规范</h2><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204082037402.png" alt="image-20220408203759224"></p><h2 id="cmd规范" tabindex="-1"><a class="header-anchor" href="#cmd规范" aria-hidden="true">#</a> CMD规范</h2><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204082038316.png" alt="image-20220408203810211"></p><h2 id="es-module" tabindex="-1"><a class="header-anchor" href="#es-module" aria-hidden="true">#</a> ES Module</h2><h3 id="export关键字" tabindex="-1"><a class="header-anchor" href="#export关键字" aria-hidden="true">#</a> export关键字</h3><p>export关键字将一个模块中的变量、函数、类等导出；</p><p><strong>我们希望将其他中内容全部导出，它可以有如下的方式：</strong></p><ul><li>方式一：在语句声明的前面直接加上export关键字</li><li>方式二：将所有需要导出的标识符，放到export后面的 {}中</li><li>方式三：导出时给标识符起一个别名</li></ul><h3 id="import关键字" tabindex="-1"><a class="header-anchor" href="#import关键字" aria-hidden="true">#</a> import关键字</h3><p><strong>导入内容的方式也有多种：</strong></p><ul><li>import {标识符列表} from &#39;模块&#39;；</li><li>方式二：导入时给标识符起别名</li><li>方式三：通过 * 将模块功能放到一个模块功能对象（a module object）上</li></ul><h3 id="export和import结合使用" tabindex="-1"><a class="header-anchor" href="#export和import结合使用" aria-hidden="true">#</a> Export和import结合使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>sum <span class="token keyword">as</span> barSum<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./bar.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>为什么要这样做呢？</strong></p><ul><li>在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</li><li>这样方便指定统一的接口规范，也方便阅读；</li><li>这个时候，我们就可以使用export和import结合使用；</li></ul><h3 id="default用法" tabindex="-1"><a class="header-anchor" href="#default用法" aria-hidden="true">#</a> default用法</h3><p>默认导出（default export）:</p><ul><li>默认导出export时可以不需要指定名字；</li><li>在导入时不需要使用 {}，并且可以自己来指定名字；</li><li>它也方便我们和现有的CommonJS等规范相互操作；</li></ul><p><strong>注意：在一个模块中，只能有一个默认导出（default export）；</strong></p><h3 id="import函数" tabindex="-1"><a class="header-anchor" href="#import函数" aria-hidden="true">#</a> import函数</h3><p><strong>通过import加载一个模块，是不可以在其放到逻辑代码中的；</strong></p><ul><li>因为ES Module在被JS引擎解析时，就必须知道它的依赖关系;由于这个时候js代码没有任何的运行，所以无法在进行类似于if判断中根据代码的执行情况；甚至下面的这种写法也是错误的：因为我们必须到运行时能确定path的值</li></ul><p><strong>但是某些情况下，我们确确实实希望动态的来加载某一个模块：</strong></p><ul><li>这个时候我们需要使用 import() 函数来动态加载；</li></ul><h2 id="commonjs的加载过程" tabindex="-1"><a class="header-anchor" href="#commonjs的加载过程" aria-hidden="true">#</a> CommonJS的加载过程</h2><p>CommonJS模块加载 js 文件的过程是运行时加载的，并且是同步的：</p><ul><li><p>运行时加载意味着是js引擎在执行js代码的过程中加载 模块；</p></li><li><p>同步的就意味着一个文件没有加载结束之前，后面的代码都不会执行；</p></li></ul><p>CommonJS通过module.exports导出的是一个对象：</p><ul><li>导出的是一个对象意味着可以将这个对象的引用在其他模块中赋值给其他变量；</li><li>但是最终他们指向的都是同一个对象，那么一个变量修改了对象的属性，所有的地方都会被修改；</li></ul><h2 id="es-module加载过程" tabindex="-1"><a class="header-anchor" href="#es-module加载过程" aria-hidden="true">#</a> ES Module加载过程</h2><p><strong>ES Module加载js文件的过程是编译（解析）时加载的，并且是异步的：</strong></p><p>编译时（解析）时加载，意味着import不能和运行时相关的内容放在一起使用，比如from后面的路径需要动态获取，比如不能将import放到if等语句的代码块中。所以我们有时候也称ES Module是静态解析的，而不是动态或者运行时解析的。</p><p>**异步的意味着：JS引擎在遇到import时会去获取这个js文件，但是这个获取的过程是异步的，并不会阻塞主线程继 续执行；**也就是说设置了 type=module 的代码，相当于在script标签上也加上了 async 属性。如果我们后面有普通的script标签以及对应的代码，那么ES Module对应的js文件和代码不会阻塞它们的执行；</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204101320628.png" alt="image-20220410132012411"></p><p><strong>ES Module通过export导出的是变量本身的引用：</strong></p><ul><li>export在导出一个变量时，js引擎会解析这个语法，并且创建<strong>模块环境记录（module environment record）；</strong></li><li>模块环境记录会和变量进行 绑定（binding），并且这个绑定是实时的；</li><li>而在导入的地方，我们是可以实时的获取到绑定的最新值的；</li><li>如果在导出的模块中修改了变化，那么导入的地方可以<strong>实时获取最新的变量</strong>；</li><li>在导入的地方不可以修改变量，因为它只是被绑定到了这个变量上**（其实是一个常量，或理解成静态只读引用）**</li><li><strong>如果bar.js中导出的是一个对象，那么main.js中是否可以修改对象中的属性，他们指向同一块内存空间</strong></li></ul><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204101331286.png" alt="image-20220410133157221"></p><h2 id="node对es-module的支持" tabindex="-1"><a class="header-anchor" href="#node对es-module的支持" aria-hidden="true">#</a> Node对ES Module的支持</h2><p>方式一：在package.json中配置 type: module</p><p>方式二：文件以 .mjs 结尾，表示使用的是ES Module；</p><h2 id="commonjs和es-module交互" tabindex="-1"><a class="header-anchor" href="#commonjs和es-module交互" aria-hidden="true">#</a> CommonJS和ES Module交互</h2><p><strong>通常情况下，CommonJS不能加载ES Module</strong></p><ul><li>因为CommonJS是同步加载的，但是ES Module必须经过静态分析等，无法在这个时候执行JavaScript代码；Node当中是不支持的；</li></ul><p><strong>多数情况下，ES Module可以加载CommonJS</strong></p><ul><li>ES Module在加载CommonJS时，会将其module.exports导出的内容作为default导出方式来使用；</li><li>这个依然需要看具体的实现，比如webpack中是支持的、Node最新的Current版本也是支持的；但是在最新的LTS版本中就不支持</li></ul>`,80),i=[r];function t(l,p){return a(),o("div",null,i)}const c=e(n,[["render",t],["__file","Node 笔记（2）模块化.html.vue"]]);export{c as default};
