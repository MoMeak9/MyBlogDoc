import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.d7b34baa.js";const p={},t=e(`<h1 id="typescript面试题" tabindex="-1"><a class="header-anchor" href="#typescript面试题" aria-hidden="true">#</a> TypeScript面试题</h1><blockquote><p>来源：</p><p>https://juejin.cn/post/6999985372440559624</p></blockquote><p><strong>1. 什么是TypeScript？</strong></p><blockquote><p>Typescript 是一个强类型的 JavaScript 超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript并不直接在浏览器上运行，需要编译器编译成纯Javascript来运行。</p></blockquote><p><strong>2. 为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？</strong></p><blockquote><p>增加了<strong>静态类型</strong>，可以在开发人员编写脚本时检测错误，使得代码质量更好，更健壮。优势:</p><ol><li>杜绝手误导致的变量名写错;</li><li>类型可以一定程度上充当文档;</li><li>IDE自动填充，自动联想;</li></ol></blockquote><p><strong>3. TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？</strong></p><blockquote><p><code>const 和 readonly</code>: <strong>const可以防止变量的值被修改，readonly可以防止变量的属性被修改。</strong></p><p><code>枚举和常量枚举</code>: 常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。</p><p><code>接口和类型别名</code>: 两者都可以用来描述对象或函数的类型。<strong>与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。</strong></p></blockquote><p><strong>4. TypeScript 中 any 类型的作用是什么？</strong></p><blockquote><p>为编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。</p></blockquote><p><strong>5. TypeScript 中 any、never、unknown、null &amp; undefined 和 void 有什么区别？</strong></p><blockquote><p><code>any</code>: 动态的变量类型（失去了类型检查的作用）。</p><p><code>never</code>: 永不存在的值的类型。例如：never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。</p><p><code>unknown</code>: 任何类型的值都可以赋给 unknown 类型，但是 unknown 类型的值只能赋给 unknown 本身和 any 类型。</p><p><code>null &amp; undefined</code>: 默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。当你指定了 --strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。</p><p><code>void</code>: 没有任何类型。例如：一个函数如果没有返回值，那么返回值可以定义为void。</p></blockquote><p><strong>6. TypeScript 中 interface 可以给 Function / Array / Class（Indexable）做声明吗？</strong></p><p>可以</p><blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* 可以 */</span>
<span class="token comment">// 函数声明</span>
<span class="token keyword">interface</span> <span class="token class-name">Say</span> <span class="token punctuation">{</span>
 <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> viod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> say<span class="token operator">:</span> Say <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span>viod <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 输入变量，返回值</span>


<span class="token comment">// Array 声明</span>
<span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">{</span> 
 <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">let</span> fibonacci<span class="token operator">:</span> NumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 满足数组内容和索引内容</span>

<span class="token comment">// Class 声明</span>
<span class="token keyword">interface</span> <span class="token class-name">PersonalIntl</span> <span class="token punctuation">{</span>
 name<span class="token operator">:</span> <span class="token builtin">string</span>
 <span class="token function">sayHi</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">// 满足对象属性、成员</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>7. TypeScript 中可以使用 String、Number、Boolean、Symbol、Object 等给类型做声明吗？</strong></p><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 可以 */</span>
<span class="token keyword">let</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&quot;bob&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">decLiteral</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">isDone</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">sym</span><span class="token operator">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
 <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>8. TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？</strong></p><blockquote><ol><li>TypeScript：noImplicitThis: true 的情况下，必须去声明 this 的类型，才能在函数或者对象中使用this。</li><li>Typescript 中箭头函数的 this 和 ES6 中箭头函数中的 this 是一致的。</li></ol></blockquote><p><strong>9. TypeScript 中使用 Union Types 时有哪些注意事项？</strong></p><blockquote><p><strong>属性或方法访问</strong>: 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们<u>只能访问此联合类型的所有类型里共有的属性或方法</u>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &gt;&#39;string | number&#39;.</span>
<span class="token comment">//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</span>

<span class="token keyword">function</span> <span class="token function">getString</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 公共方法和属性可以访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>10. TypeScript 如何设计 Class 的声明？</strong></p><blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
   greeting<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
   <span class="token function">constructor</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在声明类的时候，一般类中都会包含，构造函数、对构造函数中的属性进行类型声明、类中的方法。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>11. TypeScript 中如何<u>联合枚举类型的 Key</u>?</strong></p><p>keyof + typeof</p><blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> str <span class="token punctuation">{</span>
   <span class="token constant">A</span><span class="token punctuation">,</span>
   <span class="token constant">B</span><span class="token punctuation">,</span>
   <span class="token constant">C</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">strUnion</span> <span class="token operator">=</span>  <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> str<span class="token punctuation">;</span> <span class="token comment">// &#39;A&#39; | &#39;B&#39; | &#39;C&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>12. TypeScript 中 type 和 interface 的区别?</strong></p><blockquote><p>相同点：</p><ol><li><p>都可以描述 &#39;对象&#39; 或者 &#39;函数&#39;</p></li><li><p>都允许拓展(extends)</p></li></ol><p>不同点：</p><ol><li><p>type 可以声明基本类型，联合类型，元组</p></li><li><p>type 可以使用 typeof 获取实例的类型进行赋值</p></li><li><p>多个相同的 interface 声明可以自动合并</p></li></ol><p>使用 interface 描述‘数据结构’，使用 type 描述‘类型关系’</p></blockquote><p><em><em>13. TypeScript 中 ?.、??、!、!.、_、*</em> 等符号的含义？</em>*</p><blockquote><p><code>?. 可选链</code> 遇到 null 和 undefined 可以立即停止表达式的运行。</p><p><code>?? 空值合并运算符</code> 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。</p><p><code>! 非空断言运算符</code> x! 将从 x 值域中排除 null 和 undefined</p><p><code>!. </code> 在变量名后添加，可以断言排除undefined和null类型</p><p><code>_ 数字分割符</code> 分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。</p><p><code>** </code>求幂</p></blockquote><p><strong>15. 简单介绍一下 TypeScript 模块的加载机制？</strong></p><blockquote><p>假设有一个导入语句 <code>import { a } from &quot;moduleA&quot;</code>;</p><ol><li><p>首先，编译器会尝试定位需要导入的模块文件，通过绝对或者相对的路径查找方式；</p></li><li><p>如果上面的解析失败了，没有查找到对应的模块，编译器会尝试定位一个<code>外部模块声明</code>（.d.ts）；</p></li><li><p>最后，如果编译器还是不能解析这个模块，则会抛出一个错误 <code>error TS2307: Cannot find module &#39;moduleA&#39;.</code></p></li></ol></blockquote><p><strong>17. TypeScript 中对象展开会有什么副作用吗？</strong></p><blockquote><ol><li>展开对象后面的属性会覆盖前面的属性；</li><li><strong>仅包含对象自身的可枚举属性，不可枚举的属性将会丢失</strong>。</li></ol></blockquote><p><strong>19. TypeScript 中同名的 interface 或者同名的 interface 和 class 可以合并吗？</strong></p><blockquote><p><strong>同名的interface会自动合并，同名的interface和class会自动聚合</strong>。</p></blockquote><p><strong>20. 如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？</strong></p><blockquote><ol><li>选择安装 ts 版本，<code>npm install @types/包名 --save</code>；</li><li>对于没有类型的 js 库，需要编写同名的.d.ts文件</li></ol></blockquote><p><strong>21. TypeScript 的 tsconfig.json 中有哪些配置项信息？</strong></p><blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;compileOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> ... <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>files</code> 是一个数组列表，里面包含指定文件的相对或绝对路径，用来指定待编译文件，编译器在编译的时候只会编译包含在files中列出的文件。 <code>include &amp; exclude</code> 指定编译某些文件，或者指定排除某些文件。 <code>compileOnSave：true</code> 让IDE在保存文件的时候根据tsconfig.json重新生成文件。 <code>extends</code> 可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置。 <code>compilerOptions</code> 编译配置项，如何对具体的ts文件进行编译</p></blockquote><p><strong>22. TypeScript 中如何设置模块导入的路径别名？</strong></p><blockquote><p>通过 tsconfig.json 中的 paths 项来配置:</p></blockquote><p><strong>23. declare，declare global是什么？</strong></p><blockquote><p><code>declare</code> 是用来定义全局变量、全局函数、全局命名空间、js modules、class等 <code>declare global</code> 为全局对象 <code>window</code> 增加新的属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> global <span class="token punctuation">{</span> 
   <span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span> 
        csrf<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>24. 对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？</strong></p><blockquote><p><code>public</code>: 成员都默认为<code>public</code>，被此限定符修饰的成员是可以被外部访问； <code>private</code>: 被此限定符修饰的成员是只可以被类的内部访问； <code>protected</code>: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问; <code>readonly</code>: 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p></blockquote><p><strong>25. keyof 和 typeof 关键字的作用？</strong></p><blockquote><p><code>keyof 索引类型查询操作符</code> 获取索引类型的属性名，构成联合类型。 <code>typeof</code> 获取一个变量或对象的类型。</p></blockquote><p><strong>26. 简述工具类型 <code>Exclude</code>、<code>Omit</code>、<code>Merge</code>、<code>Intersection</code>、<code>Overwrite</code>的作用。</strong></p><blockquote><p><code>Exclude&lt;T, U&gt;</code> 从 <code>T</code> 中排除出可分配给 <code>U</code>的元素。 <code>Omit&lt;T, K&gt;</code> 的作用是忽略<code>T</code>中的某些属性。 <code>Merge&lt;O1, O2&gt;</code> 是将两个对象的属性合并。 <code>Compute&lt;A &amp; B&gt;</code> 是将交叉类型合并 <code>Intersection&lt;T, U&gt;</code>的作用是取<code>T</code>的属性,此属性同样也存在与<code>U</code>。 <code>Overwrite&lt;T, U&gt;</code> 是用<code>U</code>的属性覆盖<code>T</code>的相同属性。</p></blockquote><p><strong>27. 数组定义的两种方式</strong></p><blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span><span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span> 
     baz<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span> 
     baz <span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,52),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","TypeScript面试题.html.vue"]]);export{d as default};
