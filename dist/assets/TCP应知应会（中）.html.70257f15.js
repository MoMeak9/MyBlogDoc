import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as r,e as t}from"./app.d7b34baa.js";const p={},h=t('<h1 id="tcp应知应会-中" tabindex="-1"><a class="header-anchor" href="#tcp应知应会-中" aria-hidden="true">#</a> TCP应知应会（中）</h1><h2 id="syn-洪泛攻击" tabindex="-1"><a class="header-anchor" href="#syn-洪泛攻击" aria-hidden="true">#</a> SYN 洪泛攻击</h2><p>攻击者发送TCP的SYN，SYN是TCP三次握手中的第一个数据包，而当服务器返回ACK后，该攻击者就不对其进行再确认，那这个TCP连接就处于挂起状态，也就是所谓的半连接状态，服务器收不到再确认的话，还会重复发送ACK给攻击者。</p><p><strong>影响：</strong></p><ul><li><p>浪费消耗服务器的资源；</p></li><li><p>在服务器上，这些TCP连接会因为挂起状态而消耗CPU和内存，最后服务器可能死机。</p></li></ul><h2 id="tcp可靠传输的实现机制" tabindex="-1"><a class="header-anchor" href="#tcp可靠传输的实现机制" aria-hidden="true">#</a> TCP可靠传输的实现机制</h2><p><strong>序号：</strong> TCP首部的序号字段来保证数据能够有序的交给应用层，序号建立在传送的字节流上</p><p>**确认机制：**TCP首部的确认号是期望收到对方的下一个报文段的数据的第一个字节的序号，TCP默认使用累计确认，即TCP只确认数据流中至第一个丢失字节为止的字节。</p><p>**重传机制：**分为超时重传和冗余ACK。</p><p>超时重传，TCP每发送一个报文段，就对这个报文段设置一次计时器。计时器设置的重传时间到期但还未收到确认时就进行重传。</p><p>冗余ACK，再次确认某个报文段的ACK，而发送方先前已经收到过该报文的确认，当收到对于某个报文段3个冗余ACK，则可以认为该报文已经丢失，这时候发送方对该报文进行重传。</p><h2 id="tcp流量控制" tabindex="-1"><a class="header-anchor" href="#tcp流量控制" aria-hidden="true">#</a> TCP流量控制</h2><p>**目的：**匹配发送发的发送速率和接收方的读取速率</p><p>**流量控制机制：**基于滑动窗口协议的流量控制机制。</p><p>**实现方法：**接收方根据自己接收缓存的大小，动态地调整发送方的发送窗口大小（接收窗口rwnd），限制发送发向网络注入的报文速率；发送方根据对当前网络拥塞程序的估计而确定拥塞窗口，其大小与网络的带宽和时延有关</p><h3 id="不同层级流量控制和窗口大小的区别" tabindex="-1"><a class="header-anchor" href="#不同层级流量控制和窗口大小的区别" aria-hidden="true">#</a> 不同层级流量控制和窗口大小的区别</h3><p>**传输层：**定义端到端用户之间的流量控制，滑动窗口可以动态变化</p><p>**数据链路层：**定义两个中间的相邻结点的流量控制，滑动窗口不能动态变化</p>',18),n=[h];function c(d,i){return a(),r("div",null,n)}const _=e(p,[["render",c],["__file","TCP应知应会（中）.html.vue"]]);export{_ as default};
