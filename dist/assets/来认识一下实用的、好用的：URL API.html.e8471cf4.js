import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as o,a as s,b as a,d as e,e as r,r as l}from"./app.d7b34baa.js";const c={},i=r(`<h1 id="来认识一下实用的、好用的-url-api" tabindex="-1"><a class="header-anchor" href="#来认识一下实用的、好用的-url-api" aria-hidden="true">#</a> 来认识一下实用的、好用的：URL API</h1><p>JavaScript 代码经常需要操作URL，目前，Node和所有浏览器（除了IE）之外，都实现了URL类用于对其的操作，但它并不是ES标准定义的。这个类是在WHATWG中标准化的。</p><p>使用<code>URL()</code> 构造器函数创建URL对象时，可以传入1个绝对URL作为参数，也可以传入2个参数，第一个作为相对URL，第二个传入绝对URL作为base URL。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myURL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.org/foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token keyword">const</span> myURL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://example.org/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以获取到:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">URL</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;https://example.org/foo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">&#39;https://example.org&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">protocol</span><span class="token operator">:</span> <span class="token string">&#39;https:&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;example.org&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">&#39;example.org&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">searchParams</span><span class="token operator">:</span> URLSearchParams <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了支持http协议，同样还支持例如ftp协议等，并且我们对其属性的修改也会直接反应到href上。</p><h3 id="有意思的特性" tabindex="-1"><a class="header-anchor" href="#有意思的特性" aria-hidden="true">#</a> 有意思的特性</h3><p>当 URL 路径或者查询参数中，带有中文或者特殊字符的时候，就需要对 URL 进行编码（采用十六进制编码格式）。URL 编码的原则是使用安全字符去表示那些不安全的字符。</p><blockquote><p>安全字符，指的是没有特殊用途或者特殊意义的字符。</p></blockquote><p>URL 之所以需要编码，是因为 URL 中的某些字符会引起歧义，比如 URL 查询参数中包含了”&amp;”或者”%”就会造成服务器解析错误；再比如，URL 的编码格式采用的是 ASCII 码而非 Unicode 格式，这表明 URL 中不允许包含任何非 ASCII 字符（比如中文），否则就会造成 URL 解析错误。</p><p>URL 编码协议规定（RFC3986 协议）：URL 中只允许使用 ASCII 字符集可以显示的字符，比如英文字母、数字、和- _ . ~ ! *这 6 个特殊字符。当在 URL 中使用不属于 ASCII 字符集的字符时，就要使用特殊的符号对该字符进行编码，比如空格需要用%20来表示。</p>`,12),d=s("p",null,[s("strong",null,"参考：")],-1),u={href:"https://blog.csdn.net/ccc369639963/article/details/123398268",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/URL",target:"_blank",rel:"noopener noreferrer"};function m(v,h){const n=l("ExternalLinkIcon");return t(),o("div",null,[i,s("blockquote",null,[d,s("p",null,[s("a",u,[a("URL编码/解码详解_睿科知识云的博客-CSDN博客_url解码"),e(n)])]),s("p",null,[s("a",k,[a("URL - Web API 接口参考 | MDN"),e(n)])])])])}const L=p(c,[["render",m],["__file","来认识一下实用的、好用的：URL API.html.vue"]]);export{L as default};
