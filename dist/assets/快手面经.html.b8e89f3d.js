import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.d7b34baa.js";const p={},e=t(`<h1 id="快手暑期实习一面面经" tabindex="-1"><a class="header-anchor" href="#快手暑期实习一面面经" aria-hidden="true">#</a> 快手暑期实习一面面经</h1><p>一面顺利通过，二面挂了。二面没有做记录，所以没有放~</p><h2 id="前端研发实习生-docs-协同办公中心" tabindex="-1"><a class="header-anchor" href="#前端研发实习生-docs-协同办公中心" aria-hidden="true">#</a> <strong>前端研发实习生（Docs）-协同办公中心</strong></h2><h3 id="一面-45min" tabindex="-1"><a class="header-anchor" href="#一面-45min" aria-hidden="true">#</a> 一面 45min</h3><p>面试官迟到了，然后看简历，边看边解答一些问题</p><p>看到了Node.js 和TS，噩梦开始了</p><ol><li><p>我看你写Node的Web挺多的，我们来写个中间件吧？express的跨域中间件（手撕）</p></li><li><p>（打断）顺便问一下跨域怎么理解的？什么是跨域？</p></li><li><p>（打断）我很疑惑你为啥写了(req.method==&quot;OPTIONS&quot;) 可以解释一下吗（我按照模板写的啊！）</p></li><li><p>那问你一下PUT方法的应用场景？（提了一下RESTFUL）</p></li><li><p>那我们现在来基于Vue实现一个吸顶组件，不用手撕，说一下思来？</p></li><li><p>那除了使用CSS的position: sticky 使用原生JS如何实现？</p></li><li><p>TS了解多少，怎么用的？怎么理解泛型？</p></li><li><p>面向对象编程了解过吗？使用过React吗？画风一转至Vue不需要，React有类型组件</p></li><li><p>手撕封装axios的get的请求，要求10s后reject，不用基础超时配置项怎么写？（手撕）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;Time out&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
        server<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
            url<span class="token punctuation">,</span>
            data
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>那我们再来一个输出题（就考了异常，没有事件循环）</p><p>尝试还原了一下，提了一下原型链</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">&#39;b&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span>
    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 分别输出什么，一起会输出什么 b在程序中会？</span>
c<span class="token punctuation">.</span><span class="token function">haha</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>反问业务场景和技术栈（时间充裕）</p></li></ol><p>结束，掌握主动权进行扩展说明，所以面试问的题目可能比较少。但最终owner面没有通过，原因主要是说作为科班同学应该对计算机基础知识有更牢固的掌握。有点可惜，408内容还是要补一下的。</p>`,8),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","快手面经.html.vue"]]);export{k as default};
