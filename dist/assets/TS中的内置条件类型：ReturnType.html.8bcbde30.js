const e=JSON.parse('{"key":"v-43b9280e","path":"/TypeScript/TS%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%EF%BC%9AReturnType.html","title":"TS中的内置条件类型：ReturnType","lang":"zh-CN","frontmatter":{"description":"先说一下条件类型是什么 1. 条件类型是一种由条件表达式所决定的类型。 2. 条件类型使类型具有了不唯一性,同样增加了语言的灵活性。 总言之，条件类型就是在类型中添加条件分支，以支持更加灵活的泛型，满足更多的使用场景。 例如： ```ts T extends U ? X : Y ``` 表示若类型T可被赋值给类型U,那么结果类型就是X类型,否则就是Y类...","head":[["meta",{"property":"og:url","content":"https://yihuiBlog.top/TypeScript/TS%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%EF%BC%9AReturnType.html"}],["meta",{"property":"og:site_name","content":"Yihui\'s Blog"}],["meta",{"property":"og:title","content":"TS中的内置条件类型：ReturnType"}],["meta",{"property":"og:description","content":"先说一下条件类型是什么 1. 条件类型是一种由条件表达式所决定的类型。 2. 条件类型使类型具有了不唯一性,同样增加了语言的灵活性。 总言之，条件类型就是在类型中添加条件分支，以支持更加灵活的泛型，满足更多的使用场景。 例如： ```ts T extends U ? X : Y ``` 表示若类型T可被赋值给类型U,那么结果类型就是X类型,否则就是Y类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-11-25T08:26:33.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-11-25T08:26:33.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"先说一下条件类型是什么","slug":"先说一下条件类型是什么","link":"#先说一下条件类型是什么","children":[]},{"level":2,"title":"内置条件类型：ReturnType<Type>","slug":"内置条件类型-returntype-type","link":"#内置条件类型-returntype-type","children":[]},{"level":2,"title":"讲回infer","slug":"讲回infer","link":"#讲回infer","children":[]}],"git":{"createdTime":1669364793000,"updatedTime":1669364793000,"contributors":[{"name":"MoMeak9","email":"1308994506@qq.com","commits":1}]},"readingTime":{"minutes":2.17,"words":650},"copyright":"著作权归YihuiBlog所有\\n基于CC-BY 4.0协议\\n原文链接：https://yihuiblog.top/TypeScript/TS%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%EF%BC%9AReturnType.html","filePathRelative":"TypeScript/TS中的内置条件类型：ReturnType.md","localizedDate":"2022年11月25日"}');export{e as data};
