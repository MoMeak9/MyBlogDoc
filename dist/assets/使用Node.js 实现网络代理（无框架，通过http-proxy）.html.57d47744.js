import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,a as n,b as s,d as c,e as a,r as i}from"./app.d7b34baa.js";const l={},u=a(`<h1 id="使用node-js-实现网络代理-无框架-通过http-proxy" tabindex="-1"><a class="header-anchor" href="#使用node-js-实现网络代理-无框架-通过http-proxy" aria-hidden="true">#</a> 使用Node.js 实现网络代理（无框架，通过http-proxy）</h1><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>使用场景自不必多说，包括正向代理、反向代理，在Node.js的特有场景中，其实还包含BFF，服务端中间件等等。如果你是在一个比Nginx更细粒度的，并且能够在框架内集成业务的场景，非常推荐继续阅读。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> http-proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过调用 <code>createProxyServer</code> 并将<code>options</code>对象作为参数传递来创建新的代理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> httpProxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http-proxy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> proxy <span class="token operator">=</span> httpProxy<span class="token punctuation">.</span><span class="token function">createProxyServer</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新创建的对象拥有四个方法：</p><ul><li>web <code>req, res, [options]</code>用于代理常规 HTTP(S) 请求</li><li>ws <code>req, socket, head, [options]</code> 用于代理 WS(S) 请求</li><li>listen <code>port</code> 为方便起见，将对象包装在网络服务器中的函数</li><li>close <code>[callback]</code> 关闭内部网络服务器并停止监听给定端口的函数</li></ul><p>然后可以通过调用这些函数来代理请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  proxy<span class="token punctuation">.</span><span class="token function">web</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://mytarget.com:8080&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时可以使用 Event Emitter API 监听错误，传入回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>proxy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在web方法中作为回调函数传入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>proxy<span class="token punctuation">.</span><span class="token function">web</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://mytarget.com:8080&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),r={href:"https://github.com/http-party/node-http-proxy/tree/9b96cd725127a024dabebec6c7ea8c807272223d/lib/http-proxy/passes",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h2><h3 id="设置基本的独立代理服务器" tabindex="-1"><a class="header-anchor" href="#设置基本的独立代理服务器" aria-hidden="true">#</a> 设置基本的独立代理服务器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    httpProxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http-proxy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//</span>
<span class="token comment">// 创建代理服务器并在选项中设置目标服务器。</span>
<span class="token comment">//</span>
httpProxy<span class="token punctuation">.</span><span class="token function">createProxyServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">&#39;http://localhost:9000&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// See (†)</span>
 
<span class="token comment">//</span>
<span class="token comment">// 创建测试用目标服务器</span>
<span class="token comment">//</span>
http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;request successfully proxied!&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 listen(..) 才会触发 Web 服务器的创建。否则，只创建代理实例。</p><h3 id="使用自定义服务器逻辑设置独立代理服务器" tabindex="-1"><a class="header-anchor" href="#使用自定义服务器逻辑设置独立代理服务器" aria-hidden="true">#</a> 使用自定义服务器逻辑设置独立代理服务器</h3><p>此示例展示了如何使用自己的 HTTP 服务器代理请求，以及如何使用自己的逻辑来处理请求。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    httpProxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http-proxy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//</span>
<span class="token comment">// 使用自定义应用程序逻辑创建代理服务器</span>
<span class="token comment">//</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> httpProxy<span class="token punctuation">.</span><span class="token function">createProxyServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//</span>
<span class="token comment">// 创建您的自定义服务器，只需调用 \`proxy.web()\` 来代理</span>
<span class="token comment">// 发送给目标的web请求传递在选项中</span>
<span class="token comment">// 同样的，也可以使用\`proxy.ws()\`</span>
<span class="token comment">//</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 你可以在这里添加处理逻辑</span>
  proxy<span class="token punctuation">.</span><span class="token function">web</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://127.0.0.1:5050&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭服务器" tabindex="-1"><a class="header-anchor" href="#关闭服务器" aria-hidden="true">#</a> 关闭服务器</h3><p>在另一个程序中测试或运行服务器时，可能需要关闭代理。 此操作将阻止代理接受新连接。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">httpProxy<span class="token punctuation">.</span>createProxyServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">1337</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
proxy<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function k(v,m){const t=i("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("当请求被代理时，它遵循两个不同的管道，它们将转换应用于 req 和 res 对象。第一个管道（传入）负责创建和操作将客户端连接到目标的流。第二个管道（传出）负责创建和操作从您的目标向客户端返回数据的流。"),n("a",r,[s("源码位置"),c(t)])]),d])}const y=p(l,[["render",k],["__file","使用Node.js 实现网络代理（无框架，通过http-proxy）.html.vue"]]);export{y as default};
