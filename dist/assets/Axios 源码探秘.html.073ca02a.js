import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.d7b34baa.js";const p={},e=t(`<h1 id="axios-源码探秘" tabindex="-1"><a class="header-anchor" href="#axios-源码探秘" aria-hidden="true">#</a> Axios 源码探秘</h1><blockquote><p>参照：全栈修仙之路-源码探秘篇 宝哥</p></blockquote><p>Axios 是⼀个基于 Promise 的 HTTP 客户端，同时⽀持浏览器和 Node.js 环境。它是⼀个优秀的 HTTP 客户端，被⼴泛地应⽤在⼤量的 Web 项⽬中。</p><p>⽬前 Axios 项⽬的 Star 数为 79.9K，Fork 数也⾼达 7.6K，是⼀个很优秀的开源项⽬，所以接下来阿宝 哥将带⼤家⼀起来分析 Axios 项⽬中⼀些值得借鉴的地⽅。阅读完本章，你将了解以下内容：</p><p>HTTP 拦截器的设计与实现；</p><p>HTTP 适配器的设计与实现</p><p>如何防御 CSRF 攻击。</p><h2 id="一、axios-简介" tabindex="-1"><a class="header-anchor" href="#一、axios-简介" aria-hidden="true">#</a> ⼀、Axios 简介</h2><p>Axios 是⼀个基于 Promise 的 HTTP 客户端，拥有以下特性： ⽀持 Promise API；</p><ul><li>能够拦截请求和响应；</li><li>能够转换请求和响应数据；</li><li>客户端⽀持防御 CSRF 攻击；</li><li>同时⽀持浏览器和 Node.js 环境；</li><li>能够取消请求及⾃动转换 JSON 数据。</li></ul><p>在浏览器端 Axios ⽀持⼤多数主流的浏览器，⽐如 Chrome、Firefox、Safari 和 IE 11。此外，Axios 还 拥有⾃⼰的⽣态：</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/image-20220327223641999.png" alt="image-20220327223641999"></p><p>（数据来源 —— https://github.com/axios/axios/blob/master/ECOSYSTEM.md）</p><p>简单介绍完 Axios，我们来分析⼀下它提供的⼀个核⼼功能 —— 拦截器。</p><h2 id="二、http-拦截器的设计与实现" tabindex="-1"><a class="header-anchor" href="#二、http-拦截器的设计与实现" aria-hidden="true">#</a> ⼆、HTTP 拦截器的设计与实现</h2><h3 id="_2-1-拦截器简介" tabindex="-1"><a class="header-anchor" href="#_2-1-拦截器简介" aria-hidden="true">#</a> 2.1 拦截器简介</h3><p>对于⼤多数 SPA 应⽤程序来说， 通常会使⽤ token 进⾏⽤户的身份认证。这就要求在认证通过后，我们需要在每个请求上都携带认证信息。针对这个需求，为了避免为每个请求单独处理，我们可以通过封装统⼀的 request 函数来为每个请求统⼀添加 token 信息。</p><p>但后期如果需要为某些 GET 请求设置缓存时间或者控制某些请求的调⽤频率的话，我们就需要不断修改request 函数来扩展对应的功能。此时，如果在考虑对响应进⾏统⼀处理的话，我们的 request 函数将变得越来越庞⼤，也越来越难维护。那么对于这个问题，该如何解决呢？Axios 为我们提供了解决⽅案 —— 拦截器。</p><p>Axios 是⼀个基于 Promise 的 HTTP 客户端，⽽ HTTP 协议是基于请求和响应：</p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/image-20220327223940254.png" alt="image-20220327223940254" style="zoom:67%;"><p>所以 Axios 提供了请求拦截器和响应拦截器来分别处理请求和响应，它们的作⽤如下：</p><ul><li>请求拦截器：该类拦截器的作⽤是在请求发送前统⼀执⾏某些操作，⽐如在请求头中添加 token 字段。</li><li>响应拦截器：该类拦截器的作⽤是在接收到服务器响应后统⼀执⾏某些操作，⽐如发现响应状态码为 401 时，⾃动跳转到登录⻚。</li></ul><p>在 Axios 中设置拦截器很简单，通过 <code>axios.interceptors.request</code> 和 <code>axios.interceptors.response</code> 对象提供的 use ⽅法，就可以分别设置请求拦截器和响应拦截器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 添加请求拦截器</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token string">&#39;added by interceptor&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加响应拦截器</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">&#39; - modified by interceptor&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么拦截器是如何⼯作的呢？在看具体的代码之前，我们先来分析⼀下它的设计思路。Axios 的作⽤是⽤于发送 HTTP 请求，⽽请求拦截器和响应拦截器的本质都是⼀个实现特定功能的函数。</p><p>我们可以按照功能把发送 HTTP 请求拆解成不同类型的⼦任务，⽐如有⽤于处理请求配置对象的⼦任务，⽤于发送 HTTP 请求的⼦任务和⽤于处理响应对象的⼦任务。当我们按照指定的顺序来执⾏这些⼦任务时，就可以完成⼀次完整的 HTTP 请求。</p><p>了解完这些，接下来我们将从 <strong>任务注册、任务编排和任务调度</strong> 三个⽅⾯来分析 Axios 拦截器的实现。</p><h3 id="_2-2-任务注册" tabindex="-1"><a class="header-anchor" href="#_2-2-任务注册" aria-hidden="true">#</a> 2.2 任务注册</h3><p>通过前⾯拦截器的使⽤示例，我们已经知道如何注册请求拦截器和响应拦截器，其中请求拦截器⽤于处 理请求配置对象的⼦任务，⽽响应拦截器⽤于处理响应对象的⼦任务。要搞清楚任务是如何注册的，就 需要了解 <code>axios </code>和 <code>axios.interceptors</code> 对象。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// lib/axios.js</span>
<span class="token keyword">function</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Axios</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>request<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Copy axios.prototype to instance</span>
    utils<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Copy context to instance</span>
    utils<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Create the default instance to be exported</span>
<span class="token keyword">var</span> axios <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Axios 的源码中，我们找到了 <code>axios</code> 对象的定义，很明显默认的 <code>axios</code> 实例是通过 <code>createInstance</code> ⽅法创建的，该⽅法最终返回的是 <code>Axios.prototype.request</code> 函数对象。同时， 我们发现了 <code>Axios</code> 的构造函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// lib/core/Axios.js</span>
<span class="token keyword">function</span> <span class="token function">Axios</span><span class="token punctuation">(</span>instanceConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaults <span class="token operator">=</span> instanceConfig<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> <span class="token punctuation">{</span>
        request<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        response<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构造函数中，我们找到了 <code>axios.interceptors</code> 对象的定义，也知道了 <code>interceptors.request</code> 和<code>interceptors.response</code> 对象都是 <code>InterceptorManager</code> 类的实例。因此接下来，进⼀步分析 <code>InterceptorManager</code> 构造函数及相关的 use ⽅法就可以知道任务是如何注册的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// lib/core/InterceptorManager.js</span>
<span class="token keyword">function</span> <span class="token function">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
InterceptorManager<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">use</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">use</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">,</span> rejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        fulfilled<span class="token operator">:</span> fulfilled<span class="token punctuation">,</span>
        rejected<span class="token operator">:</span> rejected
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回当前的索引，⽤于移除已注册的拦截器</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过观察 use ⽅法，我们可知注册的拦截器都会被保存到 <code>InterceptorManager</code> 对象的 <code>handlers</code> 属性中。下⾯我们⽤⼀张图来总结⼀下 <code>Axios</code> 对象与 <code>InterceptorManager</code> 对象的内部结构与关 系：</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/image-20220327230345209.png" alt="image-20220327230345209"></p><h3 id="_2-3-任务编排" tabindex="-1"><a class="header-anchor" href="#_2-3-任务编排" aria-hidden="true">#</a> 2.3 任务编排</h3><p>现在我们已经知道如何注册拦截器任务，但仅仅注册任务是不够，我们还需要对已注册的任务进⾏编排，这样才能确保任务的执⾏顺序。这⾥我们把完成⼀次完整的 HTTP 请求分为<strong>处理请求配置对象、发起 HTTP 请求和处理响应对象</strong> 3 个阶段。</p><p>接下来我们来看⼀下 Axios 如何发请求的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;/hello&#39;</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;axios res: &#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;axios res.data: &#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过前⾯的分析，我们已经知道 axios 对象对应的是 <code>Axios.prototype.request</code> 函数对象，该函数 的具体实现如下：</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/image-20220327232047665.png" alt="image-20220327232047665"></p><h3 id="_2-4-任务调度" tabindex="-1"><a class="header-anchor" href="#_2-4-任务调度" aria-hidden="true">#</a> 2.4 任务调度</h3><p>任务编排完成后，要发起 HTTP 请求，我们还需要按编排后的顺序执⾏任务调度。在 Axios 中具体的调 度⽅式很简单，具体如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib/core/Axios.js</span>
<span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略部分代码</span>
    <span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 chain 是数组，所以通过 while 语句我们就可以不断地取出设置的任务，然后组装成 Promise 调⽤ 链从⽽实现任务调度，对应的处理流程如下图所示：</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204081302794.png" alt="image-20220408130254710"></p><p>下⾯我们来回顾⼀下 Axios 拦截器完整的使⽤流程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 添加请求拦截器 —— 处理请求配置对象</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token string">&#39;added by interceptor&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加响应拦截器 —— 处理响应对象</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">&#39; - modified by interceptor&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/hello&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;axios res.data: &#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考 Axios 拦截器的设计模型，我们就可以抽出以下通⽤的任务处理模型：</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204081304375.png" alt="image-20220408130447315"></p><h2 id="三、http-适配器的设计与实现" tabindex="-1"><a class="header-anchor" href="#三、http-适配器的设计与实现" aria-hidden="true">#</a> 三、HTTP 适配器的设计与实现</h2><h3 id="_3-1-默认-http-适配器" tabindex="-1"><a class="header-anchor" href="#_3-1-默认-http-适配器" aria-hidden="true">#</a> 3.1 默认 HTTP 适配器</h3><p>Axios 同时⽀持浏览器和 Node.js 环境，对于浏览器环境来说，我们可以通过 <code>XMLHttpRequest</code> 或 <code>fetch</code> API 来发送 HTTP 请求，⽽对于 Node.js 环境来说，我们可以通过 Node.js 内置的 <code>http</code> 或 <code>https</code> 模块来发送 HTTP 请求。</p><p>Axios ⽀持⾃定义适配器，同时也提供了默认的适 配器。对于⼤多数场景，我们并不需要⾃定义适配器，⽽是直接使⽤默认的适配器。因此，默认的适配 器就会包含浏览器和 Node.js 环境的适配代码，其具体的适配逻辑如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib/defaults.js</span>
<span class="token keyword">var</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token function">getDefaultAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">xsrfCookieName</span><span class="token operator">:</span> <span class="token string">&#39;XSRF-TOKEN&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">xsrfHeaderName</span><span class="token operator">:</span> <span class="token string">&#39;X-XSRF-TOKEN&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getDefaultAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> adapter<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// For browsers use XHR adapter</span>
        adapter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./adapters/xhr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span>
        <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object process]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// For node use HTTP adapter</span>
        adapter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./adapters/http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>getDefaultAdapter</code> ⽅法中，⾸先通过平台中特定的对象来区分不同的平台，然后再导⼊不同的适 配器，具体的代码⽐较简单，这⾥就不展开介绍。</p><h3 id="_3-2-自定义适配器" tabindex="-1"><a class="header-anchor" href="#_3-2-自定义适配器" aria-hidden="true">#</a> 3.2 ⾃定义适配器</h3><p>其实除了默认的适配器外，我们还可以⾃定义适配器...</p><h2 id="四、csrf-防御" tabindex="-1"><a class="header-anchor" href="#四、csrf-防御" aria-hidden="true">#</a> 四、CSRF 防御</h2><h3 id="_4-1-csrf-简介" tabindex="-1"><a class="header-anchor" href="#_4-1-csrf-简介" aria-hidden="true">#</a> 4.1 CSRF 简介</h3><p>跨站请求伪造（Cross-site request forgery），通常缩写为 CSRF 或者 XSRF， 是⼀种挟制⽤户在当前 已登录的 Web 应⽤程序上执⾏⾮本意的操作的攻击⽅法。</p><p>跨站请求攻击，简单地说，是攻击者通过⼀些技术⼿段欺骗⽤户的浏览器去访问⼀个⾃⼰曾经认证过的 ⽹站并运⾏⼀些操作（如发邮件，发消息，甚⾄财产操作如转账和购买商品）。由于浏览器曾经认证 过，所以被访问的⽹站会认为是真正的⽤户操作⽽去运⾏。</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/202204081332065.png" alt="image-20220408133243984"></p><p>在上图中攻击者利⽤了 Web 中⽤户身份验证的⼀个漏洞：简单的身份验证只能保证请求发⾃某个⽤户的 浏览器，却不能保证请求本身是⽤户⾃愿发出的。</p><h3 id="_4-2-csrf-防御措施" tabindex="-1"><a class="header-anchor" href="#_4-2-csrf-防御措施" aria-hidden="true">#</a> 4.2 CSRF 防御措施</h3><h4 id="_4-2-1-检查-referer-字段" tabindex="-1"><a class="header-anchor" href="#_4-2-1-检查-referer-字段" aria-hidden="true">#</a> 4.2.1 检查 Referer 字段</h4><p>HTTP 头中有⼀个 Referer 字段，这个字段⽤以标明<strong>请求来源于哪个地址</strong>。在处理敏感数据请求时，通常 来说，Referer 字段应和请求的地址位于同⼀域名下。</p><blockquote><p><strong>Referer</strong></p><p>Referer 请求头包含了<strong>当前请求来源页面的地址</strong>，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 <code>Referer</code> 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。</p><p>在以下两种情况下，<code>Referer</code> 不会被发送：</p><ul><li>来源页面采用的协议为表示本地文件的 &quot;file&quot; 或者 &quot;data&quot; URI；</li><li>当前请求页面采用的是非安全协议，而来源页面采用的是安全协议（HTTPS）（协议不同）。</li></ul></blockquote><h4 id="_4-2-2-同步表单-csrf-校验" tabindex="-1"><a class="header-anchor" href="#_4-2-2-同步表单-csrf-校验" aria-hidden="true">#</a> 4.2.2 同步表单 CSRF 校验</h4><p>CSRF 攻击之所以能够成功，是因为服务器⽆法区分正常请求和攻击请求。针对这个问题我们可以要求所 有的⽤户请求都携带⼀个 CSRF 攻击者⽆法获取到的 token。对于 CSRF 示例图中的表单攻击，我们可以 使⽤ <strong>同步表单 CSRF 校验</strong> 的防御措施。</p><p><strong>同步表单 CSRF 校验</strong> 就是在返回⻚⾯时将 token 渲染到⻚⾯上，在 form 表单提交的时候通过隐藏域或 者作为查询参数把 CSRF token 提交到服务器。⽐如，在同步渲染⻚⾯时，<strong>在表单请求中增加⼀个 _csrf 的查询参数</strong>，这样当⽤户在提交这个表单的时候就会将 CSRF token 提交上来：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/upload?_csrf={{由服务端⽣成}}<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 ⽤户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
 选择头像: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-双重-cookie-防御" tabindex="-1"><a class="header-anchor" href="#_4-2-3-双重-cookie-防御" aria-hidden="true">#</a> 4.2.3 双重 Cookie 防御</h4><p><strong>双重 Cookie 防御</strong> <strong>就是将 token 设置在 Cookie 中</strong>，在提交（POST、PUT、PATCH、DELETE）等请求 时提交 Cookie，<strong>并通过请求头或请求体带上 Cookie 中已设置的 token</strong>，服务端接收到请求后，再进⾏对⽐校验。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> csrfToken <span class="token operator">=</span> Cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;csrfToken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">csrfSafeMethod</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 以下HTTP⽅法不需要进⾏CSRF防护</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(GET|HEAD|OPTIONS|TRACE)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$<span class="token punctuation">.</span><span class="token function">ajaxSetup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">beforeSend</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xhr<span class="token punctuation">,</span> settings</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">csrfSafeMethod</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>crossDomain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;x-csrf-token&#39;</span><span class="token punctuation">,</span> csrfToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-axios-csrf-防御" tabindex="-1"><a class="header-anchor" href="#_4-3-axios-csrf-防御" aria-hidden="true">#</a> 4.3 Axios CSRF 防御</h3><p>介绍完 CSRF 攻击的⽅式和防御⼿段，最后我们来看⼀下 Axios 是如何防御 CSRF 攻击的。</p><p>Axios 提供了 xsrfCookieName 和 xsrfHeaderName 两个属性来分别设置 CSRF 的 Cookie 名称和 HTTP 请求头的名称，它们的默认值如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib/defaults.js</span>
<span class="token keyword">var</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token function">getDefaultAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 省略部分代码</span>
    <span class="token literal-property property">xsrfCookieName</span><span class="token operator">:</span> <span class="token string">&#39;XSRF-TOKEN&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">xsrfHeaderName</span><span class="token operator">:</span> <span class="token string">&#39;X-XSRF-TOKEN&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前⾯我们已经知道在不同的平台中，Axios 使⽤不同的适配器来发送 HTTP 请求，这⾥我们以浏览器平 台为例，来看⼀下 Axios 如何防御 CSRF 攻击：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib/adapters/xhr.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">xhrAdapter</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">dispatchXhrRequest</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> requestHeaders <span class="token operator">=</span> config<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>

        <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 省略部分代码</span>

        <span class="token comment">// 添加xsrf头部</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isStandardBrowserEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> xsrfValue <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>withCredentials <span class="token operator">||</span> <span class="token function">isURLSameOrigin</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            config<span class="token punctuation">.</span>xsrfCookieName <span class="token operator">?</span>
                cookies<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>xsrfCookieName<span class="token punctuation">)</span> <span class="token operator">:</span>
                <span class="token keyword">undefined</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xsrfValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                requestHeaders<span class="token punctuation">[</span>config<span class="token punctuation">.</span>xsrfHeaderName<span class="token punctuation">]</span> <span class="token operator">=</span> xsrfValue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>requestData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看完以上的代码，相信⼩伙伴们就已经知道答案了，原来 Axios 内部是使⽤ <strong>双重 Cookie 防御</strong> 的⽅案来 防御 CSRF 攻击。好的，到这⾥本章的主要内容都已经介绍完了，其实 Axios 项⽬还有⼀些值得我们借 鉴的地⽅，⽐如 CancelToken 的设计、异常处理机制等，感兴趣的⼩伙伴可以⾃⾏学习⼀下。</p>`,83),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","Axios 源码探秘.html.vue"]]);export{d as default};
