import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as t,a as n,b as s,d as p,e as c,r as i}from"./app.d7b34baa.js";const l={},r=n("h1",{id:"原型链与原型链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原型链与原型链","aria-hidden":"true"},"#"),s(" 原型链与原型链")],-1),u=n("p",null,"作者：尼克陈 链接：https://juejin.cn/post/6934498361475072014 来源：稀土掘金",-1),d={href:"https://juejin.cn/post/6934498361475072014?share_token=e2859fb1-3aa3-4012-9530-402d4f6102b1#comment",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"仅作为学习笔记使用",-1),v=c(`<h3 id="四个规则" tabindex="-1"><a class="header-anchor" href="#四个规则" aria-hidden="true">#</a> 四个规则</h3><p>我们先来了解下面引用类型的四个规则：</p><p>1、引用类型，都具有对象特性，即可自由扩展属性。</p><p>2、引用类型，都有一个隐式原型 <code>__proto__</code> 属性，属性值是一个普通的对象。</p><p>3、引用类型，隐式原型 <code>__proto__</code> 的属性值指向它的构造函数的显式原型 <code>prototype</code> 属性值。</p><p>4、当你试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么它会去它的隐式原型 <code>__proto__</code>（也就是它的构造函数的显式原型 <code>prototype</code>）中寻找。</p><blockquote><p>引用类型：Object、Array、Function、Date、RegExp。这里我姑且称 <strong>proto</strong> 为隐式原型，没有官方中文叫法，大家都瞎叫居多。</p></blockquote><p>下面我们逐一验证上面几个规则，就会慢慢地理解原型和原型链。</p><h4 id="规则一" tabindex="-1"><a class="header-anchor" href="#规则一" aria-hidden="true">#</a> 规则一</h4><p>引用类型，<strong>都具有对象特性，即可自由扩展属性：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>
arr<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>
fn<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这个规则应该比较好理解，Date 和 RegExp 也一样，就不赘述了。</p></blockquote><h4 id="规则二" tabindex="-1"><a class="header-anchor" href="#规则二" aria-hidden="true">#</a> 规则二</h4><p>引用类型，都有一个隐式原型 <code>__proto__</code> 属性，属性值是一个普通的对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj.__proto__&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arr.__proto__&#39;</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn.__proto__&#39;</span><span class="token punctuation">,</span> fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8640c1029037485ca324b2cf61bdf928~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p><h4 id="规则三" tabindex="-1"><a class="header-anchor" href="#规则三" aria-hidden="true">#</a> 规则三</h4><p>引用类型，隐式原型 <code>__proto__</code> 的属性值指向它的构造函数的显式原型 <code>prototype</code> 属性值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>
arr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>
fn<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="规则四" tabindex="-1"><a class="header-anchor" href="#规则四" aria-hidden="true">#</a> 规则四</h4><p>当你试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么它会去它的隐式原型 <code>__proto__</code>（也就是它的构造函数的显式原型 <code>prototype</code>）中寻找：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>toString
<span class="token comment">// ƒ toString() { [native code] }</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先， <code>obj</code> 对象并没有 <code>toString</code> 属性，之所以能获取到 <code>toString</code> 属性，是遵循了第四条规则，从它的构造函数 <code>Object</code> 的 <code>prototype</code> 里去获取。</p><h2 id="特例" tabindex="-1"><a class="header-anchor" href="#特例" aria-hidden="true">#</a> 特例</h2><p>我试图想推翻上面的规则，看下面这段代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token comment">// 其实这行可以不写，默认返回 this 对象</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> nick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;nick&quot;</span><span class="token punctuation">)</span>
nick<span class="token punctuation">.</span>toString
<span class="token comment">// ƒ toString() { [native code] }</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按理说， <code>nick</code> 是 <code>Person</code> 构造函数生成的实例，而 <code>Person</code> 的 <code>prototype</code> 并没有 <code>toString</code> 方法，那么为什么， <code>nick</code> 能获取到 <code>toString</code> 方法？</p><p>这里就引出 <code>原型链</code> 的概念了， <code>nick</code> 实例先从自身出发检讨自己，发现并没有 <code>toString</code> 方法。找不到，就往上走，找 <code>Person</code> 构造函数的 <code>prototype</code> 属性，还是没找到。构造函数的 <code>prototype</code> 也是一个对象嘛，那对象的构造函数是 <code>Object</code> ，所以就找到了 <code>Object.prototype</code> 下的 <code>toString</code> 方法。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc4cc571148745f4b25545d3a7ccf73d~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p><blockquote><p>上述寻找的过程就形成了原型链的概念，我理解的原型链就是这样一个过程。也不知道哪个人说过一句，JavaScript 里万物皆对象。从上述情况看来，好像是这么个理。🤔</p></blockquote><h2 id="图片描述" tabindex="-1"><a class="header-anchor" href="#图片描述" aria-hidden="true">#</a> 图片描述</h2><p>用图片描述原型链：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c631b657ca62427a8bdef1a2c145346a~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p><p>最后一个 <code>null</code>，设计上是为了避免死循环而设置的, <code>Object.prototype</code> 的隐式原型指向 <code>null</code>。</p><h2 id="一个方法" tabindex="-1"><a class="header-anchor" href="#一个方法" aria-hidden="true">#</a> 一个方法</h2><p><code>instanceof</code> 运算符用于测试构造函数的 <code>prototype</code> 属性是否出现在对象原型链中的任何位置。 <code>instanceof</code> 的简易手写版，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 变量R的原型 存在于 变量L的原型链上</span>
<span class="token keyword">function</span> <span class="token function">instance_of</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">R</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    
  <span class="token comment">// 验证如果为基本数据类型，就直接返回 false</span>
  <span class="token keyword">const</span> baseType <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>baseType<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token constant">L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>

  <span class="token keyword">let</span> <span class="token constant">RP</span> <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token comment">// 取 R 的显示原型</span>
  <span class="token constant">L</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment">// 取 L 的隐式原型</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 找到最顶层</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token operator">===</span> <span class="token constant">RP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 严格相等</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token constant">L</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>  <span class="token comment">// 没找到继续向上一层原型链查找</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
复制代
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来看下面这段代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;nick&#39;</span><span class="token punctuation">)</span>

f <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span>
f <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码判断流程大致如下：</p><p>1、 <code>f instanceof Foo</code>： <code>f</code> 的隐式原型 <code>__proto__</code> 和 <code>Foo.prototype</code> ，是相等的，所以返回 <code>true</code> 。</p><p>2、 <code>f instanceof Object</code>： <code>f</code> 的隐式原型 <code>__proto__</code> ，和 <code>Object.prototype</code> 不等，所以继续往上走。 <code>f</code> 的隐式原型 <code>__proto__</code> 指向 <code>Foo.prototype</code> ，所以继续用 <code>Foo.prototype.__proto__</code> 去对比 <code>Object.prototype</code> ，这会儿就相等了，因为 <code>Foo.prototype</code> 就是一个普通的对象。</p><blockquote><p>再一次验证万物皆对象。。。。</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过四个特性、一个例子、一张图片、一个方法，大家应该对原型和原型链的关系有了大概的认知。我的认知就是，原型链就是一个过程，原型是原型链这个过程中的一个单位，贯穿整个原型链。就好像你要是看完了不点个赞，我可以顺着网线找到你。</p><p>**作用：**我们可以给对象的原型定义一些方法,有点像类的继承吧。比如基础类型 arrary 的map,reduce。实际上我们使用数组调用这些方法的时候,就是用原型查找到这个方法然后使用的。</p>`,46);function m(b,_){const a=i("ExternalLinkIcon");return o(),t("div",null,[r,n("blockquote",null,[u,n("p",null,[n("a",d,[s("参考来源"),p(a)])]),k]),v])}const g=e(l,[["render",m],["__file","Property原型链与原型链.html.vue"]]);export{g as default};
