import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.d7b34baa.js";const p={},t=e(`<h1 id="es-12-新特性" tabindex="-1"><a class="header-anchor" href="#es-12-新特性" aria-hidden="true">#</a> ES 12 新特性</h1><h2 id="逻辑赋值操作符" tabindex="-1"><a class="header-anchor" href="#逻辑赋值操作符" aria-hidden="true">#</a> 逻辑赋值操作符</h2><p>逻辑赋值操作符将逻辑操作(<code>&amp;&amp;</code>、<code>||</code>或<code>??</code>)与赋值表达式组合在一起。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>x <span class="token operator">||=</span> y<span class="token punctuation">;</span>
x <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

x <span class="token operator">&amp;&amp;=</span> y<span class="token punctuation">;</span>
x <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>


x <span class="token operator">??=</span> y<span class="token punctuation">;</span>
x <span class="token operator">??</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>带有<code>&amp;&amp;</code>的逻辑赋值操作符</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
x <span class="token operator">&amp;&amp;=</span> y<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>x &amp;&amp;= y</code> 等价于 <code>x &amp;&amp; (x = y)</code>。</p><p>或者等价于</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> y
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为<code>x</code>是一个真值，所以它被赋值为<code>y</code>，即<code>2</code>。</p><h3 id="带有-的逻辑赋值操作符" tabindex="-1"><a class="header-anchor" href="#带有-的逻辑赋值操作符" aria-hidden="true">#</a> <strong>带有<code>||</code>的逻辑赋值操作符</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
x <span class="token operator">||=</span> y<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>x ||= y</code> 等价于 <code>x || (x = y)</code>。</p><p>这意味着赋值操作只在<code>x</code>为虚值时才会发生。在我们的代码中，<code>x</code>包含<code>1</code>，这是一个真值，因此，赋值不会发生。这就是我们的代码在控制台中打印<code>1</code>的原因。</p><p>简单地说</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">updateID</span> <span class="token operator">=</span> <span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token comment">// 我们可以这样做</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span> user<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>

  <span class="token comment">// 或者这样</span>
  user<span class="token punctuation">.</span>id <span class="token operator">=</span> user<span class="token punctuation">.</span>id <span class="token operator">||</span> <span class="token number">1</span>

  <span class="token comment">// 或者这样</span>
  user<span class="token punctuation">.</span>id <span class="token operator">||=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带有-的逻辑赋值操作符-1" tabindex="-1"><a class="header-anchor" href="#带有-的逻辑赋值操作符-1" aria-hidden="true">#</a> <strong>带有<code>??</code>的逻辑赋值操作符</strong></h3><p><code>??</code> 在 JS 中专门检查一个值是否为 <code>null</code> 或<code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a<span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a <span class="token operator">??</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在第二行，<code>let b = a ?? 5</code>，如果<code>a</code>的值为<code>null</code> 或<code>undefined</code>，<code>??</code>求值并赋值给<code>b</code>。</p><p>现在考虑<code>??</code> 和<code>==</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x<span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
x <span class="token operator">??=</span> y<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
x <span class="token operator">??=</span> y<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> 等价于 </span><span class="token template-punctuation string">\`</span></span>x <span class="token operator">=</span> x <span class="token operator">??</span> <span class="token punctuation">(</span>x<span class="token operator">=</span>y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数字分隔符" tabindex="-1"><a class="header-anchor" href="#数字分隔符" aria-hidden="true">#</a> 数字分隔符</h2><p>它允许我们在数字之间添加下划线(<code>_</code>)字符，使数字更具可读性。</p><p>例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">100000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>被0的数量所迷惑</p><p>分隔符解决这个问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">100_000_000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分隔符可以用于数字的整数部分和小数部分。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1_000_000.123_456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分隔符不仅可以用在整数和浮点数中，也可以用在二进制、十六进制、八进制字面量中。</p><p>分隔符也适用于BigInt数字。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> trillion <span class="token operator">=</span> <span class="token number">1000_000_000_000n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trillion<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1000000000000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分隔符只是为了可读性。所以，它可以放在数字内的任何地方。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> amount <span class="token operator">=</span> <span class="token number">178_00</span><span class="token punctuation">;</span> <span class="token comment">// 00 after _ for cents.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="promise-any-与-aggregateerror" tabindex="-1"><a class="header-anchor" href="#promise-any-与-aggregateerror" aria-hidden="true">#</a> Promise.any 与 AggregateError</h2><p><code>Promise.any()</code>返回第一个完成的promise的值。如果所有传递给<code>Promise.any()</code>作为参数(作为数组)的Promise都被拒绝，则抛出一个&quot;<code>AggregateError</code>&quot;异常。</p><p>AggregateError\`是一个新的Error子类，它对单个错误进行分组。每个AggregateError实例都包含一个对异常数组的引用。</p><p>考虑下面例子：</p><p>下面我们有3个 promise，它们是随机的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>p1</code>, <code>p2</code>和<code>p3</code>中，最先的完成的的由<code>Promise.any()</code>执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 &quot;A&quot;, &quot;B&quot; 或者 &quot;C&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果所有的 promise 都失败了?在这种情况下，<code>Promise.any()</code>抛出<code>AggregateError</code>异常。我们需要捕获它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了演示的目的，在<code>Promise.any()</code>中我们只能它一个 <code>promise</code>。而这个 promise 是失败的。上述代码在控制台中记录了以下错误。</p><p><img src="https://my-doc-1259409954.file.myqcloud.com/MyImages/640" alt="图片"></p><h2 id="string-prototype-replaceall-方法" tabindex="-1"><a class="header-anchor" href="#string-prototype-replaceall-方法" aria-hidden="true">#</a> String.prototype.replaceAll 方法</h2><p><code>String.prototype.replaceAll()</code>允许我们用一个不同的值替换字符串中的所有子串实例，而不需要使用全局正则表达式。</p><p>目前，JavaScript字符串有一个<code>replace()</code>方法。它可以用来用另一个字符串替换一个字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;Backbencher sits at the Back&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;Back&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Front&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Frontbencher sits at the Back&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果输入模式是一个字符串，<code>replace()</code>方法只替换第一次出现的内容。这就是为什么在代码中，&quot;<code>Back</code>&quot;的第二次出现没有被替换。</p><p>只有将模式作为正则表达式提供时，才能进行完全替换。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;Backbencher sits at the Back&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Back</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;Front&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Frontbencher sits at the Front&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看另一个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> strWithPlus <span class="token operator">=</span> <span class="token string">&#39;++&#39;</span>
<span class="token keyword">const</span> strWithComma <span class="token operator">=</span> strWithPlus<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>
<span class="token comment">// , , </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法需要使用正则表达式。然而，复杂的正则表达式往往是错误的来源。(没有人喜欢RegEx 😬)</p><p>还有另一种方法是使用<code>String.prototype.split()</code>和<code>Array.prototype.join()</code>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> strWithPlus <span class="token operator">=</span> <span class="token string">&#39;++&#39;</span>
<span class="token keyword">const</span> strWithComma <span class="token operator">=</span> strWithPlus<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>
<span class="token comment">// , , </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法避免使用正则表达式，但是必须将字符串拆分为单独的部分(单词)，将其转换为一个数组，然后将数组元素连接为一个新字符串。</p><p><code>string.prototype.replaceAll()</code>解决了这些问题，并为全局替换子串提供了简单而方便的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> strWithPlus <span class="token operator">=</span> <span class="token string">&#39;++&#39;</span>
<span class="token keyword">const</span> strWithComma <span class="token operator">=</span> strWithPlus<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>
<span class="token comment">// , ,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：如果使用全局正则表达式作为查找值，那么<code>replace</code>和<code>replaceAll</code>的行为是一样的。</p></blockquote><h2 id="weakrefs-与-finalizationregistry-对象" tabindex="-1"><a class="header-anchor" href="#weakrefs-与-finalizationregistry-对象" aria-hidden="true">#</a> WeakRefs 与 FinalizationRegistry 对象</h2><p><code>WeakRef</code> 是弱引用的意思。弱引用的主要用途是实现大型对象的<strong>缓存或映射</strong>。在这种情况下，我们不希望长期保留大量的内存来保存这种很少使用的缓存或映射。我们可以让内存很快被垃圾回收，以后如果我们再次需要它，我们可以生成一个新的缓存。</p><p>JS 是会自动垃圾收集。如果一个变量不再可达，JS 垃圾收集器将自动删除它。你可以在MDN中阅读更多关于 JS 垃圾收集的内容。</p><p>WeaseRefs（弱引用）提供了两个新功能：</p><ul><li>使用<code>WeakRef</code>类创建对对象的弱引用</li><li>使用<code>FinalizationRegistry</code>类在垃圾收集之后运行自定义收集器</li></ul><p>简而言之，<code>WeakRef</code>允许我们创建对象的弱引用，这些对象是另一个对象的属性值，而finalizers可以用来，除其他外，移除对被垃圾收集器 &quot;清理&quot;过的对象的引用。</p><p>在创建使用内置缓存的记忆化（memoization）函数时，如果缓存中存在传递给函数的参数的计算值，这种技术可能很有用（前提是对象被用作缓存对象的属性值，以及它们随后被删除的风险），以防止重复执行函数。</p><p>在构建内联缓存时</p><ul><li>如果没有内存泄漏的风险，那么使用 <code>Map</code></li><li>当使用可以随后删除对象的键时，使用 <code>WeakMap</code></li><li>当使用可以随后删除的值对象时，请将<code>Map</code>与<code>WeakRef</code>结合使用</li></ul><p>提案中最后一个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeWeakCached</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ref <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//     </span>
      <span class="token keyword">const</span> cached <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cached<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> fresh <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token comment">//    ( )</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>fresh<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> fresh
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> getImageCached <span class="token operator">=</span> <span class="token function">makeWeakCached</span><span class="token punctuation">(</span>getImage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>WeakRef</code>构造函数接受一个参数，该参数必须是一个对象，并返回对该对象的弱引用</li><li>WeakRef 实例的<code>deref</code>方法返回两个值中的一个。</li></ul><p>在内置缓存的情况下，<code>finalizer</code>被设计为在一个值对象被垃圾收集器销毁后完成清理过程，或者更简单地说，删除对这样一个对象的弱引用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeWeakCached</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">//    -   </span>
  <span class="token keyword">const</span> cleanup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ref <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ref<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ref <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> cached <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cached
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> fresh <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>fresh<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">//      ( )</span>
    cleanup<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>fresh<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> fresh
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> getImageCached <span class="token operator">=</span> <span class="token function">makeWeakCached</span><span class="token punctuation">(</span>getImage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","ES 12 新特性.html.vue"]]);export{d as default};
