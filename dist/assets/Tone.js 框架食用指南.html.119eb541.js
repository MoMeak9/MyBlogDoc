import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e as p,r as i}from"./app.d7b34baa.js";const u={},l=p(`<h1 id="tone-js-框架食用指南" tabindex="-1"><a class="header-anchor" href="#tone-js-框架食用指南" aria-hidden="true">#</a> Tone.js 框架食用指南</h1><p>Tone.js 是一个Web Audio框架，用于在浏览器中创建交互式音乐。Tone.js旨在使音乐家和基于Web Audio 应用程序的音频程序员都能熟悉应用。在应用层，Tone.js 提供了常见的DAW(数字音频工作站)功能，如用于同步和调度事件的全局传输，以及预构建的合成器和音效。此外，Tone.js 提供高性能的构建模块，以创建您自己的合成器、音效和复杂的控制信号。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>安装最新稳定版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> tone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者安装最新<code>next</code>版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> tone@next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导入Tone.js</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> * as Tone from <span class="token string">&#39;tone&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="hello-tone" tabindex="-1"><a class="header-anchor" href="#hello-tone" aria-hidden="true">#</a> Hello Tone</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建一个synth并将其连接到主输出设备(您的扬声器)</span>
<span class="token keyword">const</span> synth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Synth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//播放中 &#39;C&#39; 调在8个音符的持续时间内</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttackRelease</span><span class="token punctuation">(</span><span class="token string">&quot;C4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tone-synth" tabindex="-1"><a class="header-anchor" href="#tone-synth" aria-hidden="true">#</a> Tone.Synth</h3>`,12),r=n("code",null,"Tone.Synth",-1),k={href:"https://tonejs.github.io/docs/14.7.77/OmniOscillator.html",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"振荡器",-1),v={href:"https://tonejs.github.io/docs/14.7.77/Envelope.html",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"(波封)",-1),g=p(`<blockquote><p>波封（Envelope）是指将一种音色波形的大致轮廓描绘出来用以表示出该音色在音量变化上的特性的参数。 一个波封可以用4种参数来描述，分别是Attack(起音)、Decay(衰减)、Sustain(延持)、与Release(释音)，这四者也就是一般称的“ADSR”。</p><p>Tone中，Envelope是ADSR信封生成器。信封输出一个信号，可以连接到AudioParam或Tone.Signal。</p></blockquote><h4 id="triggerattack-triggerrelease" tabindex="-1"><a class="header-anchor" href="#triggerattack-triggerrelease" aria-hidden="true">#</a> triggerAttack / triggerRelease</h4><p>triggerAttack启动音符(振幅在上升)，而triggerRelease是当振幅回到0(即音符关闭)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> synth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Synth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> now <span class="token operator">=</span> Tone<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// trigger the attack immediately</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttack</span><span class="token punctuation">(</span><span class="token string">&quot;C4&quot;</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>
<span class="token comment">// wait one second before triggering the release</span>
synth<span class="token punctuation">.</span><span class="token function">triggerRelease</span><span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="triggerattackrelease" tabindex="-1"><a class="header-anchor" href="#triggerattackrelease" aria-hidden="true">#</a> triggerAttackRelease</h4><p><code>triggerAttackRelease</code>是<code>triggerAttack</code>和<code>triggerRelease</code>的组合</p><p>音符的第一个参数可以是赫兹频率(如440)或“音高-八度”符号(如“d# 2”)。</p><p>第二个参数是音符的持续时间。该值可以以秒为单位，也可以作为一个时间相对值。</p><p><code>triggerAttackRelease</code>的第三个(可选)参数是音符在<code>AudioContext</code>时间内应该播放的时间。它可以用于计划未来事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> synth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Synth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> now <span class="token operator">=</span> Tone<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttackRelease</span><span class="token punctuation">(</span><span class="token string">&quot;C4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8n&quot;</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttackRelease</span><span class="token punctuation">(</span><span class="token string">&quot;E4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8n&quot;</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttackRelease</span><span class="token punctuation">(</span><span class="token string">&quot;G4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8n&quot;</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="time-时间" tabindex="-1"><a class="header-anchor" href="#time-时间" aria-hidden="true">#</a> Time 时间</h2><p>Web Audio具有先进的，样本精确调度功能。AudioContext时间是Web Audio API用来安排事件的时间，随当页面加载时从0开始，以秒为单位进行计数。</p><p>获取当前AudioContext时间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tone<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Tone.js 抽象了AudioContext时间。任何以时间为参数的方法都可以接受数字或字符串，而不是以秒为单位定义所有值。例如，“4n”是四分音符，“8t”是八分音符三连音，“1m”是一个小节。</p><h2 id="starting-audio-启动音频" tabindex="-1"><a class="header-anchor" href="#starting-audio-启动音频" aria-hidden="true">#</a> Starting Audio 启动音频</h2><p>浏览器不会播放任何音频，直到用户点击某些东西(如播放按钮)。只有在从事件监听器中调用<code>Tone.start()</code>之后，才能运行你的Tone.js代码，该事件监听器是由用户操作(如“单击”或“按下键”)触发的。</p><p>Tone.start()返回一个承诺，只有在该承诺被解决后，音频才会准备好。在AudioContext运行之前调度或播放音频将导致静默或不正确的调度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">await</span> Tone<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;audio is ready&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scheduling-调度" tabindex="-1"><a class="header-anchor" href="#scheduling-调度" aria-hidden="true">#</a> Scheduling 调度</h2><h3 id="transport" tabindex="-1"><a class="header-anchor" href="#transport" aria-hidden="true">#</a> Transport</h3><p><code>Tone.Transport</code>是主要的计时工具。与AudioContext时钟不同的是，它可以启动、停止、循环和动态调整。你可以把它想象成数字音频工作站中的排列视图或跟踪器中的通道。</p><p>多个事件和部分可以沿着传输安排和同步。<code>Tone.Loop</code>是一种创建循环回调的简单方法，可以计划启动和停止。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create two monophonic synths</span>
<span class="token keyword">const</span> synthA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>FMSynth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> synthB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>AMSynth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//play a note every quarter-note</span>
<span class="token keyword">const</span> loopA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Loop</span><span class="token punctuation">(</span><span class="token parameter">time</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	synthA<span class="token punctuation">.</span><span class="token function">triggerAttackRelease</span><span class="token punctuation">(</span><span class="token string">&quot;C2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;4n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//play another note every off quarter-note, by starting it &quot;8n&quot;</span>
<span class="token keyword">const</span> loopB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Loop</span><span class="token punctuation">(</span><span class="token parameter">time</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	synthB<span class="token punctuation">.</span><span class="token function">triggerAttackRelease</span><span class="token punctuation">(</span><span class="token string">&quot;C4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;4n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&quot;8n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// the loops start when the Transport is started</span>
Tone<span class="token punctuation">.</span>Transport<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// ramp up to 800 bpm over 10 seconds</span>
Tone<span class="token punctuation">.</span>Transport<span class="token punctuation">.</span>bpm<span class="token punctuation">.</span><span class="token function">rampTo</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于Javascript回调的时间不精确，事件的采样精确时间被传递到回调函数中。使用此时间值调度事件。</p><h2 id="instruments-乐器" tabindex="-1"><a class="header-anchor" href="#instruments-乐器" aria-hidden="true">#</a> Instruments 乐器</h2><p>这里有许多合成器可供选择，包括 Tone.FMSynth, Tone.AMSynth and Tone.NoiseSynth.</p><p>所有这些乐器都是单声道(单声道)，这意味着它们一次只能演奏一个音符。</p><p>要创建一个复音合成器，请使用<code>Tone.PolySynth</code>，它接受单音合成器作为它的第一个参数，并自动处理音符分配，以便您可以传入多个音符。该API类似于单音合成，只是必须给triggerRelease一个音符或音符数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> synth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>PolySynth</span><span class="token punctuation">(</span>Tone<span class="token punctuation">.</span>Synth<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> now <span class="token operator">=</span> Tone<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttack</span><span class="token punctuation">(</span><span class="token string">&quot;D4&quot;</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttack</span><span class="token punctuation">(</span><span class="token string">&quot;F4&quot;</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttack</span><span class="token punctuation">(</span><span class="token string">&quot;A4&quot;</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttack</span><span class="token punctuation">(</span><span class="token string">&quot;C5&quot;</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
synth<span class="token punctuation">.</span><span class="token function">triggerAttack</span><span class="token punctuation">(</span><span class="token string">&quot;E5&quot;</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
synth<span class="token punctuation">.</span><span class="token function">triggerRelease</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;D4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E5&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="samples-采样器" tabindex="-1"><a class="header-anchor" href="#samples-采样器" aria-hidden="true">#</a> Samples 采样器</h2><p>声音生成并不局限于合成声音，还可以加载一个示例并以多种方式回放它。<code>Tone.Player</code>是一种加载和播放音频文件的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Player</span><span class="token punctuation">(</span><span class="token string">&quot;https://tonejs.github.io/audio/berklee/gong_1.mp3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Tone<span class="token punctuation">.</span><span class="token function">loaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	player<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Tone.loaded()</code>返回一个promise，该promise在所有音频文件加载后解析。这是一种很有帮助的简写，而不是等待每个音频缓冲区的onload事件来解决。</p><h3 id="tone-sampler" tabindex="-1"><a class="header-anchor" href="#tone-sampler" aria-hidden="true">#</a> Tone.Sampler</h3><p>多个采样器也可以组合成一个仪器。如果你的音频文件是按音符组织的，音调。采样器将音调转移的样本填补音符之间的空白。举个例子，如果你只有一架钢琴上每3个音符的样本，你可以把它变成一架完整的钢琴样本。</p><p>不像其他合成器，托尼。采样器是复调的，所以不需要传递到<code>Tone.PolySynth</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sampler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Sampler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">urls</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&quot;C4&quot;</span><span class="token operator">:</span> <span class="token string">&quot;C4.mp3&quot;</span><span class="token punctuation">,</span>
		<span class="token string-property property">&quot;D#4&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ds4.mp3&quot;</span><span class="token punctuation">,</span>
		<span class="token string-property property">&quot;F#4&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Fs4.mp3&quot;</span><span class="token punctuation">,</span>
		<span class="token string-property property">&quot;A4&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A4.mp3&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">release</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&quot;https://tonejs.github.io/audio/salamander/&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Tone<span class="token punctuation">.</span><span class="token function">loaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	sampler<span class="token punctuation">.</span><span class="token function">triggerAttackRelease</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Eb4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;G4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bb4&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="effects-音效" tabindex="-1"><a class="header-anchor" href="#effects-音效" aria-hidden="true">#</a> Effects 音效</h2><p>在上面的例子中，音源总是直接连接到<code>Destination</code>，但synth的输出也可以通过一个(或多个)效果路由到扬声器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Player</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">loop</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">autostart</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//create a distortion effect</span>
<span class="token keyword">const</span> distortion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Distortion</span><span class="token punctuation">(</span><span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//connect a player to the distortion</span>
player<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>distortion<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接路由非常灵活。连接可以串行运行，也可以并行运行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Player</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://tonejs.github.io/audio/drum-samples/loops/ominous.mp3&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">autostart</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Filter</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&#39;lowpass&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> feedbackDelay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>FeedbackDelay</span><span class="token punctuation">(</span><span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// connect the player to the feedback delay and filter in parallel</span>
player<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
player<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>feedbackDelay<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个节点可以连接到相同的输入，使音源共享效果。对于创建复杂的路由，<code>Tone.Gain</code>是非常有用的实用节点。</p><h2 id="signals-信号" tabindex="-1"><a class="header-anchor" href="#signals-信号" aria-hidden="true">#</a> Signals 信号</h2><p>和底层的Web Audio API一样，Tone.js构建时几乎所有内容都有音频速率信号控制。这是一个功能强大的特性，可以实现样本精确的同步和参数调度。</p><p>信号属性有一些用于创建自动化曲线的内置方法。</p><p>例如，振荡器上的频率参数是一个信号，因此您可以创建从一个频率到另一个频率的平滑斜坡。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> osc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tone<span class="token punctuation">.</span>Oscillator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// start at &quot;C4&quot;</span>
osc<span class="token punctuation">.</span>frequency<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;C4&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// ramp to &quot;C2&quot; over 2 seconds</span>
osc<span class="token punctuation">.</span>frequency<span class="token punctuation">.</span><span class="token function">rampTo</span><span class="token punctuation">(</span><span class="token string">&quot;C2&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// start the oscillator for 2 seconds</span>
osc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">&quot;+3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="audiocontext-音频上下文" tabindex="-1"><a class="header-anchor" href="#audiocontext-音频上下文" aria-hidden="true">#</a> AudioContext 音频上下文</h2><p>js在加载时创建一个<code>AudioContext</code>，并使用标准化的<code>audio-context</code>填充它以获得最大的浏览器兼容性。<code>AudioContext</code>可以在<code>Tone.context</code>中访问。或者使用<code>Tone.setContext(AudioContext)</code>设置自己的<code>AudioContext</code>。</p><h2 id="midi-文件" tabindex="-1"><a class="header-anchor" href="#midi-文件" aria-hidden="true">#</a> MIDI 文件</h2><p>要使用MIDI文件，首先需要将它们转换成JSON格式，使得Tone.js可以读取。</p>`,53);function h(b,y){const a=i("ExternalLinkIcon");return o(),c("div",null,[l,n("p",null,[r,s(" 是一个具有单"),n("a",k,[d,t(a)]),s("和ADSR "),n("a",v,[s("Envelope "),m,t(a)]),s("的基本合成器。")]),g])}const w=e(u,[["render",h],["__file","Tone.js 框架食用指南.html.vue"]]);export{w as default};
