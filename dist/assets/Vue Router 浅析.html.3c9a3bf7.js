import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a,b as n,d as t,e,r as l}from"./app.d7b34baa.js";const i={},u=e(`<h1 id="vue-router-浅析" tabindex="-1"><a class="header-anchor" href="#vue-router-浅析" aria-hidden="true">#</a> Vue Router 浅析</h1><h2 id="路由原理hash和history" tabindex="-1"><a class="header-anchor" href="#路由原理hash和history" aria-hidden="true">#</a> 路由原理hash和history</h2><p>众所周知， <code>hash</code> 和 <code>history</code> 在前端面试中是很常考的一道题目。在学习本文内容之前，周一对 <code>hash</code> 和 <code>history</code> 的认知可能就在 <code>hash</code> 的 <code>url</code> 里面多了个 <code>#</code> ，而 <code>history</code> 就不会。然后，我认知里还有一个是只有 <code>history</code> 才能做前后端分离，而 <code>hash</code> 跟前后端分离没有关系。</p><p>对于前端路由来说， <code>hash</code> 和 <code>history</code> 都可以用于前后端分离项目，且两者有各自的特点和各自的使用场景，在使用过程中主要要了解当前项目所处的场景，以便于更好地判断使用哪一种路由模式更佳。</p><h3 id="前端路由原理" tabindex="-1"><a class="header-anchor" href="#前端路由原理" aria-hidden="true">#</a> 前端路由原理</h3><h4 id="spa" tabindex="-1"><a class="header-anchor" href="#spa" aria-hidden="true">#</a> SPA</h4><p><strong>SPA</strong>，即<strong>单页面应用</strong>(Single Page Application)。所谓单页 <code>Web</code> 应用，就是只有一张 <code>Web</code> 页面的应用。单页应用程序 (SPA) 是加载单个 <code>HTML</code> 页面并在<strong>用户与应用程序交互时</strong>动态更新该页面的 <code>Web</code> 应用程序。浏览器一开始会加载必需的 <code>HTML</code> 、 <code>CSS</code> 和 <code>JavaScript</code> ，所有的操作都在这张页面上完成，都由 <code>JavaScript</code> 来控制。</p><p>现如今，为了配合单页面 <code>Web</code> 应用快速发展的节奏，各类<strong>前端组件化技术栈</strong>层出不穷。近几年来，通过不断的版本迭代， <code>vue</code> 和 <code>react</code> 两大技术栈脱颖而出，成为当下最受欢迎的两大技术栈。</p><h4 id="什么时候需要路由" tabindex="-1"><a class="header-anchor" href="#什么时候需要路由" aria-hidden="true">#</a> 什么时候需要路由</h4><p>对于现代开发的项目来说，稍微复杂一点的 <code>SPA</code> ，都需要用到<strong>路由</strong>。而 <code>vue-router</code> 正是 <code>vue</code> 的路由标配，且 <code>vue-router</code> 有<strong>两种模式</strong>： <code>hash</code> 和 <code>history</code> 。</p><h3 id="hash模式" tabindex="-1"><a class="header-anchor" href="#hash模式" aria-hidden="true">#</a> Hash模式</h3><p><code>hash</code> 模式是一种把前端路由的路径用井号 <code>#</code> 拼接在真实 <code>url</code> 后面的模式。当井号 <code>#</code> 后面的路径发生变化时，浏览器并不会重新发起请求，<u>而是会触发 <code>onhashchange</code> 事件</u>。</p><h4 id="网页url组成部分" tabindex="-1"><a class="header-anchor" href="#网页url组成部分" aria-hidden="true">#</a> 网页url组成部分</h4><p><strong>（1）了解几个url的属性</strong></p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>location.protocal</td><td>协议</td></tr><tr><td>location.hostname</td><td>主机名</td></tr><tr><td>location.host</td><td>主机</td></tr><tr><td>location.port</td><td>端口号</td></tr><tr><td>location.patchname</td><td>访问页面</td></tr><tr><td>location.search</td><td>搜索内容</td></tr><tr><td>location.hash</td><td>哈希值</td></tr></tbody></table><p><strong>（2）演示</strong></p><p><strong>下面用一个网址来演示以上属性：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//http://127.0.0.1:8001/01-hash.html?a=100&amp;b=20#/aaa/bbb</span>
location<span class="token punctuation">.</span>protocal <span class="token comment">// &#39;http:&#39;</span>
localtion<span class="token punctuation">.</span>hostname <span class="token comment">// &#39;127.0.0.1&#39;</span>
location<span class="token punctuation">.</span>host <span class="token comment">// &#39;127.0.0.1:8001&#39;</span>
location<span class="token punctuation">.</span>port <span class="token comment">//8001</span>
location<span class="token punctuation">.</span>pathname <span class="token comment">//&#39;01-hash.html&#39;</span>
location<span class="token punctuation">.</span>serach <span class="token comment">// &#39;?a=100&amp;b=20&#39;</span>
location<span class="token punctuation">.</span>hash <span class="token comment">// &#39;#/aaa/bbb&#39;</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hash的特点" tabindex="-1"><a class="header-anchor" href="#hash的特点" aria-hidden="true">#</a> Hash的特点</h4><ul><li><p>hash变化会触发网页跳转，即浏览器的前进和后退。</p></li><li><p><code>hash</code> 可以改变 <code>url</code> ，但是不会触发页面重新加载（hash的改变是记录在 <code>window.history</code> 中），即不会刷新页面。也就是说，所有页面的跳转都是在客户端进行操作。因此，这并不算是一次 <code>http</code> 请求，所以这种模式不利于 <code>SEO</code> 优化。<code>hash</code> 只能修改 <code>#</code> 后面的部分，所以只能跳转到与当前 <code>url</code> 同文档的 <code>url</code> 。</p></li><li><p><code>hash</code> 通过 <code>window.onhashchange</code> 的方式，来监听 <code>hash</code> 的改变，借此实现无刷新跳转的功能。</p></li><li><p><code>hash</code> 永远不会提交到 <code>server</code> 端（可以理解为只在前端自生自灭）。</p></li></ul><h4 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 定义路由 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 渲染路由对应的 UI --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>routeView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> routerView <span class="token operator">=</span> routeView
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
        routerView<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hash
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果不存在hash值，那么重定向到#/</span>
            location<span class="token punctuation">.</span>hash<span class="token operator">=</span><span class="token string">&quot;/&quot;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//如果存在hash值，那就渲染对应UI</span>
            <span class="token keyword">let</span> hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
            routerView<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hash
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释下上面代码，其实很简单：</p><ol><li>我们通过a标签的href属性来改变URL的hash值（当然，你触发浏览器的前进后退按钮也可以，或者在控制台输入window.location赋值来改变hash）</li><li>我们监听<strong>hashchange</strong>事件。一旦事件触发，就改变<strong>routerView</strong>的内容，若是在vue中，这改变的应当是<strong>router-view</strong>这个组件的内容</li><li><strong>为何又监听了load事件？这时应为页面第一次加载完不会触发 hashchange</strong>，因而用load事件来监听hash值，再将视图渲染成对应的内容。</li></ol><h3 id="history模式" tabindex="-1"><a class="header-anchor" href="#history模式" aria-hidden="true">#</a> History模式</h3><p><code>history API</code> 是 <code>H5</code> 提供的新特性，允许开发者<strong>直接更改前端路由</strong>，即更新浏览器 <code>URL</code> 地址而<strong>不重新发起请求</strong>。</p><h4 id="与hash的区别" tabindex="-1"><a class="header-anchor" href="#与hash的区别" aria-hidden="true">#</a> 与hash的区别</h4><p><strong>正常页面浏览</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://github.com/xxx 刷新页面

https://github.com/xxx/yyy 刷新页面

https://github.com/xxx/yyy/zzz 刷新页面
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>改造H5 history模式</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://github.com/xxx 刷新页面

https://github.com/xxx/yyy 前端跳转，不刷新页面

https://github.com/xxx/yyy/zzz 前端跳转，不刷新页面
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="history的api" tabindex="-1"><a class="header-anchor" href="#history的api" aria-hidden="true">#</a> history的API</h4><p>下面阐述几种 <code>HTML5</code> 新增的 <code>history API</code> 。<strong>具体如下表（实现方式）：</strong></p><table><thead><tr><th>API</th><th>定义</th></tr></thead><tbody><tr><td>history.<strong>pushState</strong>(data, title [, url])</td><td>pushState主要用于<strong>往历史记录堆栈顶部添加一条记录</strong>。各参数解析如下：<strong>①data</strong>会在onpopstate事件触发时作为参数传递过去；<strong>②title</strong>为页面标题，当前所有浏览器都会忽略此参数；③<strong>url</strong>为页面地址，可选，缺少时表示为当前页地址</td></tr><tr><td>history.<strong>replaceState</strong>(data, title [, url])</td><td>更改当前的历史记录，参数同上； 上面的pushState是添加，这个更改</td></tr><tr><td>history.state</td><td>用于存储以上方法的data数据，不同浏览器的读写权限不一样</td></tr><tr><td>window.<strong>onpopstate</strong></td><td>响应pushState或者replaceState的调用</td></tr></tbody></table><h4 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1" aria-hidden="true">#</a> 代码实现</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>/home<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>/about<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>routeView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> routerView <span class="token operator">=</span> routeView
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> onLoad<span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        routerView<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">function</span> <span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        routerView<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname
        <span class="token keyword">var</span> linkList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;a[href]&#39;</span><span class="token punctuation">)</span>
        linkList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            routerView<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释下上面代码，其实也差不多：</p><ol><li>我们通过a标签的href属性来改变URL的path值（当然，你触发浏览器的前进后退按钮也可以，或者在控制台输入history.go,back,forward赋值来触发popState事件）。这里需要注意的就是，当改变path值时，默认会触发页面的跳转，所以需要拦截<code> &lt;a&gt;</code> 标签点击事件默认行为， 点击时使用 pushState 修改 URL并更新手动 UI，从而实现点击链接更新 URL 和 UI 的效果。</li><li>我们监听<strong>popState</strong>事件。一旦事件触发，就改变<strong>routerView</strong>的内容。</li><li>load事件则是一样的，这时应为页面第一次加载完不会触发。</li></ol><h4 id="存在问题" tabindex="-1"><a class="header-anchor" href="#存在问题" aria-hidden="true">#</a> 存在问题</h4><p>对于 <code>history</code> 来说，确实解决了不少 <code>hash</code> 存在的问题，但是也带来了新的问题。<strong>具体如下：</strong></p><ul><li>使用 <code>history</code> 模式时，在对当前的页面进行刷新时，此时浏览器会重新发起请求。如果 <code>nginx</code> 没有匹配得到当前的 <code>url</code> ，就会出现 <code>404</code> 的页面。</li><li>而对于 <code>hash</code> 模式来说， 它虽然看着是改变了 <code>url</code> ，但不会被包括在 <code>http</code> 请求中。所以，<strong>它算是被用来指导浏览器的动作，并不影响服务器端</strong>。因此，改变 <code>hash</code> 并没有真正地改变 <code>url</code> ，所以页面路径还是之前的路径， <code>nginx</code> 也就不会拦截。</li><li>因此，在使用 <code>history</code> 模式时，需要<strong>通过服务端来允许地址可访问</strong>，如果没有设置，就很容易导致出现 <code>404</code> 的局面。</li></ul><h4 id="两者选择" tabindex="-1"><a class="header-anchor" href="#两者选择" aria-hidden="true">#</a> 两者选择</h4><p>下面我们再来介绍下在实际的项目中，如何对这两者进行选择。<strong>具体如下：</strong></p><ul><li><code>to B</code> 的系统推荐用 <code>hash</code> ，相对简单且容易使用，且因为 <code>hash</code> 对 <code>url</code> 规范不敏感；</li><li><code>to C</code> 的系统，可以考虑选择 <code>H5 history</code> ，但是需<strong>要服务端支持</strong>；</li><li>能先用简单的，就别用复杂的，<strong>要考虑成本和收益</strong>。</li></ul><h3 id="history路由模式下的nginx配置。" tabindex="-1"><a class="header-anchor" href="#history路由模式下的nginx配置。" aria-hidden="true">#</a> History路由模式下的Nginx配置。</h3><h4 id="index-html存在服务器本地" tabindex="-1"><a class="header-anchor" href="#index-html存在服务器本地" aria-hidden="true">#</a> Index.html存在服务器本地</h4><p>这种方式应该是非常普遍的, 在VueRouter的官方文档中也提到了, 只需要配置一个<u>location try_files</u>默认指向index.html即可。</p><div class="language-awk line-numbers-mode" data-ext="awk"><pre class="language-awk"><code>location <span class="token operator">/</span> <span class="token punctuation">{</span>
  add_header Cache<span class="token operator">-</span>Control &#39;no<span class="token operator">-</span>store<span class="token punctuation">,</span> no<span class="token operator">-</span>cache&#39;<span class="token punctuation">;</span> <span class="token regex">//</span> 设置不缓存
  try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span>index.html<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>举例</strong></p>`,49),r={href:"https://link.segmentfault.com/?enc=vm2ghX%2BHTv6A6fAgNJzMCw%3D%3D.c46jV4nu48mP9hFU1bjfXXzM5SGf1bOePpNTAoq%2Fk8A%3D",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-awk line-numbers-mode" data-ext="awk"><pre class="language-awk"><code><span class="token regex">//</span> 配置在a.b.com域名下
location <span class="token operator">/</span>main<span class="token operator">/</span> <span class="token punctuation">{</span>
  try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token regex">/home/</span>dist<span class="token operator">/</span>index.html<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的配置就可以实现访问 https://a.b.com/main/a/ 或者 https://a.b.com/main/b/, 即访问 https://a.b.com/main/ 下的任意子路径, 都可以直接访问到index.html, 正常访问页面。</p><h4 id="index-html存在远程地址" tabindex="-1"><a class="header-anchor" href="#index-html存在远程地址" aria-hidden="true">#</a> Index.html存在远程地址</h4>`,3),k={href:"https://link.segmentfault.com/?enc=vuhQrAJ4M5ObfcoTW9j40A%3D%3D.r%2FdBpqNDtno4KM5kYaZVz0Iqy2Fj9Vgg7VC73CfFMtoAk37YfLYiClphtVtRj%2Fkf",target:"_blank",rel:"noopener noreferrer"},h=e(`<p><u>（rewrite和proxy_pass）</u></p><div class="language-awk line-numbers-mode" data-ext="awk"><pre class="language-awk"><code>location <span class="token operator">^</span><span class="token operator">~</span> <span class="token regex">/test/</span> <span class="token punctuation">{</span>
    add_header Cache<span class="token operator">-</span>Control &#39;no<span class="token operator">-</span>store<span class="token punctuation">,</span> no<span class="token operator">-</span>cache&#39;<span class="token punctuation">;</span> <span class="token regex">//</span> 设置不缓存
    rewrite <span class="token operator">^</span> <span class="token regex">/project/</span>index.html <span class="token keyword">break</span><span class="token punctuation">;</span>
    proxy_pass https<span class="token operator">:</span><span class="token regex">//</span>oss.b.com<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是先重写访问路径, 再通过proxy_pass代理到远端文件。</p><p><strong>举例</strong></p>`,4),g={href:"https://link.segmentfault.com/?enc=11gS3fhgRHPqAcnczJM%2FlQ%3D%3D.wRxVkT1Zv%2FUMQ4fxcry6tojXyEyKeKOnKp5qYabapxM%3D",target:"_blank",rel:"noopener noreferrer"},v={href:"https://link.segmentfault.com/?enc=G9aqPshcDD4ms84kYn95qA%3D%3D.9V3UFtr545rHpg6UisCiEgsmKlg4n0vjUHHKiGXLF3JlgiJvy3Ox8qk6UxYpQ%2Ffu",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-awk line-numbers-mode" data-ext="awk"><pre class="language-awk"><code><span class="token regex">//</span> 配置在a.b.com域名下
location <span class="token operator">/</span>main<span class="token operator">/</span> <span class="token punctuation">{</span>
    rewrite <span class="token operator">^</span> <span class="token regex">/project/</span>index.html <span class="token keyword">break</span><span class="token punctuation">;</span>
    proxy_pass https<span class="token operator">:</span><span class="token regex">//</span>oss.b.com<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的配置就可以实现访问 https://a.b.com/main/a/ 或者 https://a.b.com/main/b/, 即访问 https://a.b.com/main/ 下的任意子路径, 都可以直接访问到index.html, 正常访问页面。</p>`,2);function b(x,y){const s=l("ExternalLinkIcon");return p(),c("div",null,[u,a("ol",null,[a("li",null,[n("要访问的基础页面Url是 "),a("a",r,[n("https://a.b.com/main/,"),t(s)]),n(" 并且index.html存储在服务器的/home/dist/index.html下")])]),d,a("p",null,[n("有的时候我们的index.html并不会存在于服务器本地上，而是有可能上传到了oss或者cdn上，也就是一个远程的地址，比如 "),a("a",k,[n("https://oss.b.com/project/ind..."),t(s)]),n(" 这时候就需要下面的这种配置方式了。")]),h,a("ol",null,[a("li",null,[n("要访问的基础页面Url是 "),a("a",g,[n("https://a.b.com/main/,"),t(s)]),n(" 并且index.html存储在 "),a("a",v,[n("https://oss.b.com/project/ind..."),t(s)]),n(" 下")])]),m])}const _=o(i,[["render",b],["__file","Vue Router 浅析.html.vue"]]);export{_ as default};
