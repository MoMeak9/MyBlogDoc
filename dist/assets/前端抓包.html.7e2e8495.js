import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as i,e as t}from"./app.d7b34baa.js";const a={},h=t('<h1 id="前端抓包" tabindex="-1"><a class="header-anchor" href="#前端抓包" aria-hidden="true">#</a> 前端抓包</h1><blockquote><p>参照收集：</p><ul><li>https://juejin.cn/post/7140040425129115684</li><li>https://juejin.cn/post/6844904100996481031</li></ul></blockquote><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>主要涉及 Hybrid 开发，涉及到 h5 页面与原生 app 的交互，h5 页面需要与原生打通登录态，以及调用原生app 的接口</p><h2 id="抓包原理" tabindex="-1"><a class="header-anchor" href="#抓包原理" aria-hidden="true">#</a> 抓包原理</h2><h3 id="能够做什么" tabindex="-1"><a class="header-anchor" href="#能够做什么" aria-hidden="true">#</a> 能够做什么</h3><ul><li><p>分析网络问题</p></li><li><p>业务分析</p></li><li><p>分析网络信息流通量</p></li><li><p>网络大数据金融风险控制</p></li><li><p>探测企图入侵网络的攻击</p></li><li><p>探测由内部和外部的用户滥用网络资源</p></li><li><p>探测网络入侵后的影响</p></li><li><p>监测链接互联网宽频流量</p></li><li><p>监测网络使用流量（包括内部用户，外部用户和系统）</p></li><li><p>监测互联网和用户电脑的安全状态</p></li><li><p>渗透与欺骗......</p></li></ul><p>作为前端开发者，通常是抓取应用层的 HTTP/HTTPS 的包。</p><h3 id="http-https-抓包原理" tabindex="-1"><a class="header-anchor" href="#http-https-抓包原理" aria-hidden="true">#</a> HTTP/HTTPS 抓包原理</h3><p>思路就是设置一个中间人进程负责抓包，每次目标进程之间的会话都先与中间人进程通信，再进行转发。</p><p><strong>HTTP抓包</strong></p><p>在 http 标准中，没有对通信端身份验证的标准。对于服务器来说，它接收的 HTTP 请求报文只要格式符合规范，就发送响应报文。</p><p>对于客户端来说也是如此，它无法校验服务器的身份，比如它连接的 <code>http://www.jecyu.com</code> 的主机，但由于中间节点的存在，最终连接的可能是 <code>http://www.jerry.com</code> 的主机。</p><p>因此，对于 HTTP 抓包，无需做过多的处理，只需要让中间人负责转发客户端和服务端的数据包。</p><p><strong>HTTPS 抓包</strong></p><p>HTTPS 语义仍然是 HTTP，只不过是在 HTTP 协议栈中 http 与 tcp 之间插入安全层 <code>SSL/TSL</code>。</p><p>安全层采用<strong>对称加密的方式加密传输数据和非对称加密的方式来传输对称密钥</strong>，解决 http 数据没有加密、无法验证身份、数据容易纂改三个核心问题。</p><blockquote><p>HTTP + 加密 + 认证 + 完整性保护 = HTTPS</p></blockquote><p><strong>其中验证身份问题是通过验证服务器的证书来实现的，证书是第三方组织（CA 证书签发机构）使用数字签名技术管理的</strong>，包括创建证书、存储证书、更新证书、撤销证书。</p><img src="https://cdn.yihuiblog.top/images/202209211019246.png" alt="image-20220921101930945" style="zoom:50%;"><h3 id="电脑如何抓手机的包" tabindex="-1"><a class="header-anchor" href="#电脑如何抓手机的包" aria-hidden="true">#</a> 电脑如何抓手机的包</h3><p>要想通过电脑端获取手机 Web 应用的数据包，根据前面所学，就需要中间人策略。</p><p>PC 端建立一个服务器中间人进程，伪装为 web 应用的目标服务器。手机端 web 应用发送的请求数据先经过中间人，中间人进行拦截处理再发送给目标服务器。反过来，目标服务器发送的数据包先通过中间人，再由中间人响应给浏览器客户端。</p><p>这里要注意的是，无论是个人电脑PC，还是移动端手机，都需要接入互联网网络，可以相互找到对方才能建立通信。</p><p>一般对开发来说，个人电脑本地起的服务器进程，在公网上是访问不到的。一般是无线局域网，个人电脑与手机端连接同一个路由器发出的 Wi-Fi，就可以相互通信。</p><p>具体步骤：</p><ol><li>在 PC 电脑本地起一个服务器进程，监听一个端口比如 8899</li><li>在手机上连接同一个局域网，配置网络代理，指向 PC 端的 IP 地址和 8899 端口</li><li>这样一来，手机上所有的网络通信都会被先转发到 PC 端的 8899 端口，就可以对数据包进行分析处理</li></ol><h2 id="常见工具" tabindex="-1"><a class="header-anchor" href="#常见工具" aria-hidden="true">#</a> 常见工具</h2><p>Charles www.charlesproxy.com</p><p>wireshark www.wireshark.org</p><p>whistle https://github.com/avwo/whistle</p>',31),r=[h];function l(o,s){return e(),i("div",null,r)}const n=p(a,[["render",l],["__file","前端抓包.html.vue"]]);export{n as default};
