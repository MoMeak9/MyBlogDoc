import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as s,d as e,e as o,r as l}from"./app.d7b34baa.js";const i={},r=o('<h1 id="cors-跨域及其-nodejs-服务端配置实践" tabindex="-1"><a class="header-anchor" href="#cors-跨域及其-nodejs-服务端配置实践" aria-hidden="true">#</a> CORS 跨域及其 Nodejs 服务端配置实践</h1><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p><h2 id="简单请求和复杂请求" tabindex="-1"><a class="header-anchor" href="#简单请求和复杂请求" aria-hidden="true">#</a> 简单请求和复杂请求</h2><h3 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求" aria-hidden="true">#</a> 简单请求</h3><p>不会触发CORS预检的请求称为简单请求，满足以下<strong>所有条件</strong>的才会被视为简单请求，基本上我们日常开发只会关注前面两点</p><ol><li>使用<code>GET、POST、HEAD</code>其中一种方法</li><li>只使用了如下的<strong>安全首部字段</strong>，不得人为设置其他首部字段 <ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code> 仅限以下三种 <ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li><li>HTML头部header field字段：<code>DPR、Download、Save-Data、Viewport-Width、WIdth</code></li></ul></li><li>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问</li><li>请求中没有使用 ReadableStream 对象</li></ol><h3 id="预检请求" tabindex="-1"><a class="header-anchor" href="#预检请求" aria-hidden="true">#</a> 预检请求</h3><p>需预检的请求要求必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。&quot;预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响</p><p>下面的请求会触发预检请求，其实非简单请求之外的就会触发预检，就不用记那么多了：</p><ol><li>使用了<code>PUT、DELETE、CONNECT、OPTIONS、TRACE、PATCH</code>方法</li><li>人为设置了非规定内的其他首部字段，参考上面简单请求的安全字段集合，还要特别注意<code>Content-Type</code>的类型</li><li><code>XMLHttpRequestUpload</code> 对象注册了任何事件监听器</li><li>请求中使用了<code>ReadableStream</code>对象</li></ol><h2 id="基本配置所需头部字段-access-contro" tabindex="-1"><a class="header-anchor" href="#基本配置所需头部字段-access-contro" aria-hidden="true">#</a> 基本配置所需头部字段 <code>Access-Contro-***</code></h2><h3 id="access-control-allow-origin" tabindex="-1"><a class="header-anchor" href="#access-control-allow-origin" aria-hidden="true">#</a> Access-Control-Allow-Origin</h3><p>该字段是必须的。它的值要么是请求时<code>Origin</code>字段的值，要么是一个<code>*</code>，表示接受任意域名的请求。</p><h3 id="access-control-allow-credentials" tabindex="-1"><a class="header-anchor" href="#access-control-allow-credentials" aria-hidden="true">#</a> Access-Control-Allow-Credentials</h3><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。</p><h3 id="access-control-allow-headers" tabindex="-1"><a class="header-anchor" href="#access-control-allow-headers" aria-hidden="true">#</a> Access-Control-Allow-Headers</h3>',18),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers",target:"_blank",rel:"noopener noreferrer"},u=n("code",null,"Access-Control-Request-Headers",-1),k=n("code",null,"Access-Control-Allow-Headers",-1),h=o(`<h3 id="access-control-allow-methods" tabindex="-1"><a class="header-anchor" href="#access-control-allow-methods" aria-hidden="true">#</a> Access-Control-Allow-Methods</h3><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&quot;预检&quot;请求。</p><h2 id="nodejs-服务-cors-配置" tabindex="-1"><a class="header-anchor" href="#nodejs-服务-cors-配置" aria-hidden="true">#</a> Nodejs 服务 CORS 配置</h2><p>基于 <code>express</code> 中间件配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string-property property">&#39;Access-Control-Allow-Credentials&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//允许后端发送cookie</span>
        <span class="token string-property property">&#39;Access-Control-Allow-Origin&#39;</span><span class="token operator">:</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin <span class="token operator">||</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token comment">//任意域名都可以访问,或者基于我请求头里面的域</span>
        <span class="token string-property property">&#39;Access-Control-Allow-Headers&#39;</span><span class="token operator">:</span> <span class="token string">&#39;X-Requested-With,Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token comment">//设置请求头格式和类型</span>
        <span class="token string-property property">&#39;Access-Control-Allow-Methods&#39;</span><span class="token operator">:</span> <span class="token string">&#39;PUT,POST,GET,DELETE,OPTIONS&#39;</span><span class="token punctuation">,</span><span class="token comment">//允许支持的请求方式</span>
        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json; charset=utf-8&#39;</span><span class="token comment">//默认与允许的文本格式json和编码格式</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;OPTIONS&#39;</span> <span class="token operator">?</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 预检请求快速返回 </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 cors 库的配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npm install cors</span>

<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> corsOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optionsSuccessStatus</span><span class="token operator">:</span> <span class="token number">204</span> 
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;CORS-enabled web server listening on port 80&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),v=n("p",null,"参考：",-1),m={href:"https://github.com/amandakelake/blog/issues/62",target:"_blank",rel:"noopener noreferrer"};function b(g,_){const a=l("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[s("如果浏览器请求包括"),n("a",d,[u,e(a)]),s("字段，则"),k,s('字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段。')]),h,n("blockquote",null,[v,n("p",null,[n("a",m,[s("CORS 简单请求+预检请求（彻底理解跨域"),e(a)])])])])}const w=t(i,[["render",b],["__file","CORS 跨域及其 Nodejs 服务端配置实践.html.vue"]]);export{w as default};
