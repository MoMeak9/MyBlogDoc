import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as t,a as e,b as n,d as r,e as c,r as p}from"./app.d7b34baa.js";const d={},i=c(`<h1 id="node-js-前端面试题" tabindex="-1"><a class="header-anchor" href="#node-js-前端面试题" aria-hidden="true">#</a> Node.js 前端面试题</h1><blockquote><p>参照</p><p>https://juejin.cn/post/6844904071501971469</p><p>https://juejin.cn/post/6844903764202094606</p></blockquote><h2 id="node-进程通信" tabindex="-1"><a class="header-anchor" href="#node-进程通信" aria-hidden="true">#</a> node-进程通信 ⭐</h2><h4 id="node-js-与-javascript-有什么不同" tabindex="-1"><a class="header-anchor" href="#node-js-与-javascript-有什么不同" aria-hidden="true">#</a> Node.js 与 JavaScript 有什么不同?</h4><p>(宿主环境)</p><p><img src="https://mc-web-1259409954.cos.ap-guangzhou.myqcloud.com/MyImages/2ee2f07e9bce4fc9778bf05273645365.png" alt="img"></p><h4 id="什么时候用-node-js" tabindex="-1"><a class="header-anchor" href="#什么时候用-node-js" aria-hidden="true">#</a> 什么时候用 Node.js？</h4><p>Node.js 是异步的、事件驱动的、非阻塞的和单线程的，使得它成为开发下面应用程序的完美候选：</p><ul><li>实时应用程序，如聊天和提供实时更新的应用程序</li><li>将视频或其他多媒体内容流式传输给大量观众的流式应用程序</li><li>其他 I/O 密集型应用程序，如协作平台</li><li>遵循微服务架构的网络后端</li></ul><p>然而，Node.js 的特性使得它对于其他类型的应用程序来说不是一个理想的选择。执行 CPU 密集型任务的应用程序（如复杂的数学计算）在使用 CPU 时表现不佳，因为 Node.js 是单线程的。</p><p>如果你想了解更多这方面的信息，请查看我们的文章 Node.js 架构以及何时在项目中使用。</p><h4 id="事件循环是什么" tabindex="-1"><a class="header-anchor" href="#事件循环是什么" aria-hidden="true">#</a> 事件循环是什么?</h4><p>单线程的 Node.js 必须是非阻塞的，以防止线程阻塞在需要很长时间才能完成的任务上，事件循环负责实现这种非阻塞行为，它使用应用程序线程调度挂起的任务。</p><p>Node.js 在<strong>任务完成时通过回调</strong>来处理异步函数返回的响应。与创建任务的事件类似，任务完成后也会发出一个事件。<strong>Node.js 将需要处理的事件添加到事件队列</strong>。</p><p>事件循环对事件队列中的事件进行迭代，并安排何时执行其关联的回调函数。</p><h4 id="流是什么" tabindex="-1"><a class="header-anchor" href="#流是什么" aria-hidden="true">#</a> 流是什么?</h4><p>Stream 流是<strong>从源读取或写入数据并将其传输到连续流目标的<u>管道</u></strong>。有四种类型：</p><ul><li><p>可读</p></li><li><p>可写的</p></li><li><p>可读写</p></li><li><p>先写入，再读出来</p></li></ul><p>每个流也是一个 EventEmitter。这意味着流对象可以在流上没有数据、流上有可用数据或流中的数据在程序刷新时发出事件。</p><h4 id="readfile-和-createreadstream-函数有什么区别" tabindex="-1"><a class="header-anchor" href="#readfile-和-createreadstream-函数有什么区别" aria-hidden="true">#</a> readFile 和 createReadStream 函数有什么区别</h4><p>readFile 函数异步读取文件的全部内容，并存储在内存中，然后再传递给用户。</p><p>createReadStream 使用一个可读的流，逐块读取文件，而不是全部存储在内存中。</p><p>与 readFile 相比，createReadStream 使用更少的内存和更快的速度来优化文件读取操作。如果文件相当大，用户不必等待很长时间直到读取整个内容，因为读取时会先向用户发送小块内容。</p><h4 id="如何处理-node-js-中未捕获的异常" tabindex="-1"><a class="header-anchor" href="#如何处理-node-js-中未捕获的异常" aria-hidden="true">#</a> 如何处理 Node.js 中未捕获的异常？</h4><p>我们可以在<strong>进程级别</strong>捕获应用程序中未捕获的异常。为此将<strong>侦听器附加到 process 全局对象</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;uncaughtException&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;exception caught: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="node-js-能否充分利用多核处理器" tabindex="-1"><a class="header-anchor" href="#node-js-能否充分利用多核处理器" aria-hidden="true">#</a> Node.js 能否充分利用多核处理器？</h4><p>（默认的）Node.js 应用程序总是单线程的，即使在多核处理器上运行，应用程序也能只使用一个处理器。</p><p>但是 Node.js 的核心模块之一 <strong>Cluster</strong> 支持 Node.js 应用程序开启多核，允许我们创建多个工作进程，这些进程可以在多个内核上并行运行，并共享一个端口来侦听事件。</p><p>每个进程使用 <strong>IPC</strong> 与主线程通信，并根据需要将服务器句柄传递给其他进程。主进程可以侦听端口本身并以循环方式将每个新连接传递给子进程，也可以将端口分配给子进程以便子进程侦听请求。</p><h4 id="单线程与多线程网络后端相比有哪些好处" tabindex="-1"><a class="header-anchor" href="#单线程与多线程网络后端相比有哪些好处" aria-hidden="true">#</a> 单线程与多线程网络后端相比有哪些好处？</h4><p>尽管 Node.js 是单线程的，但是大多数用于后端开发的编程语言都提供多线程来处理应用程序操作。</p><p><strong>为什么单线程有利于后端开发？</strong></p><ul><li>开发人员更容易实现应用程序。我们的应用程序在生产过程中不会突然遇到意外的竞争条件。</li><li>单线程应用程序易于扩展。</li><li>它们可以毫不延迟地在一个时刻收到的大量用户请求提供服务。相比之下，当流量较大时，多线程后端必须等待线程池中的线程释放，才能为用户请求提供服务。<strong>利用 Node.js 的非阻塞特性，用户请求不会在单个线程上挂起太长时间（只有在操作不是 CPU 密集型时）</strong>。</li></ul><h4 id="process-nexttick-和-setimmediate-有什么区别" tabindex="-1"><a class="header-anchor" href="#process-nexttick-和-setimmediate-有什么区别" aria-hidden="true">#</a> process.nextTick 和 setImmediate 有什么区别？</h4><p>传递给 setImmediate 函数的回调将在事件队列上的下一次迭代中执行。</p><p>另一方面，回调传递给 process.nextTick 在下一次迭代之前以及程序中当前运行的操作完成之后执行。在应用程序启动时，开始遍历事件队列之前调用它的回调。</p><p>因此，回调 process.nextTick 总是在 setImmediate 之前调用。</p><h4 id="什么是-yarn-和-npm-为什么要用-yarn-代替-npm-呢" tabindex="-1"><a class="header-anchor" href="#什么是-yarn-和-npm-为什么要用-yarn-代替-npm-呢" aria-hidden="true">#</a> 什么是 yarn 和 npm？为什么要用 yarn 代替 npm 呢？</h4><p>yarn 也是一个包管理器，为了解决 npm 的一些缺点。yarn 依赖 npm 注册中心为用户提供对包访问。<strong>yarn 底层结构基于 npm</strong>，如果从 npm 迁移到 yarn，项目结构和工作流不需要大改。</p><p>就像之前提到的，在某些情况下，yarn 提供了比 npm 更好的功能。<strong>与 npm 不同的是，它会缓存下载的每个包，不必重新下载。</strong></p><p><strong>通过<u>校验和验证包的完整性</u>来提供更好的安全性，保证在某个系统上运行的包在任何其他系统中的工作方式完全相同，这就是为什么选择 yarn 而不是 npm 来进行包管理。</strong></p><h4 id="怎么看-nodejs-可支持高并发" tabindex="-1"><a class="header-anchor" href="#怎么看-nodejs-可支持高并发" aria-hidden="true">#</a> 怎么看 nodejs 可支持高并发</h4><ol><li>nodejs 的单线程架构模型</li></ol><p>我们通常认为nodejs 的是基于单线程架构模型，但nodejs 其实并不是真正的单线程架构，因为 nodejs 还有I/O线程存在（网络I/O、磁盘I/O），这些I/O线程是由更底层的 <code>libuv</code> 处理，这部分线程对于开发者来说是透明的。 JavaScript 代码永远运行在V8上，是单线程的。</p><p>所以从开发者的角度上来看 nodejs 是单线程的。</p><p>优势：</p><ul><li>单线程就一个线程在玩，省去了线程间切换的开销</li><li>还有线程同步的问题，线程冲突的问题的也不需要担心</li></ul><p>劣势：</p><ul><li>劣势也很明显，现在起步都是 4 核，单线程没法充分利用 cpu 的资源</li><li>单线程，一旦崩溃，应用就挂掉了，大家调试脚本也知道一旦执行过程报错了，本次调试就直接结束了</li><li>因为只能利用一个 cpu ，一旦 cpu 被某个计算一直占用， cpu 得不到释放，后续的请求就会一直被挂起，直接无响应了</li></ul><blockquote><p>当然这些劣势都已经有成熟的解决方案了，使用 PM2 管理进程，或者上 K8S 也可以</p></blockquote><ol start="2"><li>核心：事件循环机制</li></ol><p><code>Node</code>中的<code>Event Loop</code>是基于<code>libuv</code>实现的，而<code>libuv</code>是 <code>Node</code> 的新跨平台抽象层，libuv使用异步，事件驱动的编程方式，核心是提供<code>i/o</code>的事件循环和异步回调。libuv的<code>API</code>包含有时间，非阻塞的网络，异步文件操作，子进程等等。 <code>Event Loop</code>就是在<code>libuv</code>中实现的。</p><p><strong>⭐最常用且特殊的 Process.nextTick()</strong></p><p><strong><code>process.nextTick()</code>虽然它是异步API的一部分，但未在图中显示。这是因为<code>process.nextTick()</code>从技术上讲，它不是事件循环的一部分。</strong></p><ul><li><code>process.nextTick()</code>方法将 <code>callback</code> <strong>添加到<code>next tick</code>队列</strong>。 <strong>一旦当前事件轮询队列的任务全部完成，在<code>next tick</code>队列中的所有<code>callbacks</code>会被依次调用。</strong></li></ul><p><strong>换种理解方式：</strong></p><ul><li>当每个阶段完成后，如果存在 <code>nextTick</code> 队列，<strong>就会清空队列中的所有回调函数，并且优先于其他 <code>microtask</code> 执行。</strong></li></ul><p><strong>⭐一起说说Vue的API命名<code>nextTick</code></strong></p><p><strong>Vue 的 NextTicket</strong></p><p>也就是说我们在设置<code>this.msg = &#39;some thing&#39;</code>的时候，Vue并没有马上去更新DOM数据，而是将这个操作放进一个队列中；如果我们重复执行的话，队列还会进行去重操作；等待<strong>同一事件循环中</strong>的所有数据变化完成之后，会将队列中的事件拿出来处理。</p>`,61),l={href:"https://link.juejin.cn?target=http%3A%2F%2Fxieyufei.com%2F2019%2F12%2F30%2FQuiz-Eventloop.html",target:"_blank",rel:"noopener noreferrer"},u=e("p",null,[n("为了在数据更新操作之后操作DOM，我们可以在数据变化之后立即使用"),e("code",null,"Vue.nextTick(callback)"),n("；这样回调函数会在DOM更新完成后被调用，就可以拿到最新的DOM元素了。")],-1);function h(g,m){const a=p("ExternalLinkIcon");return o(),t("div",null,[i,e("p",null,[n("这样做主要是为了提升性能，因为如果在主线程中更新DOM，循环100次就要更新100次DOM；但是如果等事件循环完成之后更新DOM，只需要更新1次。还不了解事件循环的童鞋，可以看我的另一篇文章"),e("a",l,[n("从一道面试题来理解JS事件循环"),r(a)])]),u])}const x=s(d,[["render",h],["__file","Node.js 前端面试题.html.vue"]]);export{x as default};
