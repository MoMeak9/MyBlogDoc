import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e as p,r}from"./app.d7b34baa.js";const l={},i=n("h1",{id:"umijs-乌米学习实战",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#umijs-乌米学习实战","aria-hidden":"true"},"#"),s(" UmiJS 乌米学习实战🍚")],-1),u=n("p",null,"参照文档",-1),k={href:"https://umijs.org/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/7111528216631705608",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/7021358536504393741",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"目前umi已经更新到4啦~，文章就只挑重要的讲解记录~",-1),b=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),s(" 简介")],-1),h=n("p",null,"Umi，中文发音为「乌米」，是可扩展的企业级前端应用框架。Umi 以路由为基础的，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。",-1),g={href:"https://zhuanlan.zhihu.com/p/403206195",target:"_blank",rel:"noopener noreferrer"},y=p('<p>Umi 有很多非常有意思的特性，比如。</p><p>1、<strong>企业级</strong>，在安全性、稳定性、最佳实践、约束能力方面会考虑更多 <u>2、<strong>插件化</strong>，啥都能改，Umi 本身也是由插件构成</u> 3、<strong>MFSU</strong>，比 Vite 还快的 Webpack 打包方案 4、基于 React Router 6 的完备路由 5、默认最快的请求 6、SSR &amp; SSG 7、稳定白盒性能好的 ESLint 和 Jest 8、React 18 的框架级接入 9、Monorepo 最佳实践 ...</p><p>引用一下云谦大佬的话：</p><blockquote></blockquote><h3 id="啥时候不用" tabindex="-1"><a class="header-anchor" href="#啥时候不用" aria-hidden="true">#</a> 啥时候不用？</h3><p>总结一下：低版本浏览器、React或者Node14以下环境，需要高粒度的路由管理和Webpack处理的</p><h3 id="为什么不用" tabindex="-1"><a class="header-anchor" href="#为什么不用" aria-hidden="true">#</a> 为什么不用？</h3><p>**create-react-app：**有没有可能，Vue CLI 这种渐进式设计就是很好的正面例子？create-react-app就是逊啦（狗头）、</p><p><strong>next.js</strong>：如果要做 SSR，next.js 是非常好的选择，但是作者也说了，Umi更好的扩展性（插件很好用），更接地气</p><p><strong>remix</strong>：还没了解....</p>',10),_={id:"快速上手",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#快速上手","aria-hidden":"true"},"#",-1),w={href:"https://umijs.org/docs/tutorials/getting-started",target:"_blank",rel:"noopener noreferrer"},x=p(`<p>去官方文档看吧~</p><h3 id="请求的封装" tabindex="-1"><a class="header-anchor" href="#请求的封装" aria-hidden="true">#</a> 请求的封装</h3><p>src文件夹下新建 <code>request</code>文件夹 新建<code>request.ts</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>request<span class="token punctuation">.</span>ts
<span class="token doc-comment comment">/**
 * 网络请求工具 封装umi-request
 * 更详细的 api 文档\b: https://github.com/umijs/umi-request
 */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> extend <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi-request&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> type <span class="token punctuation">{</span> RequestOptionsInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi-request&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> notification <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;antd&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// codeMessage仅供参考 具体根据和后端协商,在详细定义.</span>
<span class="token keyword">const</span> codeMessage <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">200</span><span class="token operator">:</span> <span class="token string">&#39;服务器成功返回请求的数据。&#39;</span><span class="token punctuation">,</span>
  <span class="token number">400</span><span class="token operator">:</span> <span class="token string">&#39;发出的请求有错误，服务器没有进行新建或修改数据的操作。&#39;</span><span class="token punctuation">,</span>
  <span class="token number">500</span><span class="token operator">:</span> <span class="token string">&#39;服务器发生错误，请检查服务器。&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
type mapCode <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">|</span> <span class="token number">400</span> <span class="token operator">|</span> <span class="token number">500</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 错误异常处理程序
 */</span>
<span class="token keyword">const</span> errorHandler <span class="token operator">=</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">response</span><span class="token operator">:</span> Response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">Response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> response <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> errorText <span class="token operator">=</span> codeMessage<span class="token punctuation">[</span>response<span class="token punctuation">.</span>status <span class="token keyword">as</span> mapCode<span class="token punctuation">]</span> <span class="token operator">||</span> response<span class="token punctuation">.</span>statusText<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>
    response
      <span class="token operator">?.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">?.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">?.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 后端返回错误信息,就用后端传回的</span>
        errorText <span class="token operator">=</span> res<span class="token punctuation">.</span>msg <span class="token operator">?</span> res<span class="token punctuation">.</span>msg <span class="token operator">:</span> errorText<span class="token punctuation">;</span>
        notification<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">请求错误 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">description</span><span class="token operator">:</span> errorText<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    notification<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;您的网络发生异常，无法连接服务器&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;网络异常&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 配置request请求时的默认参数
 */</span>
<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  errorHandler<span class="token punctuation">,</span> <span class="token comment">// 默认错误处理</span>
  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 默认请求是否带上cookie</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据不同的开发环境,配置请求前缀</span>
<span class="token keyword">interface</span> <span class="token class-name">ApiPrefix</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">dev</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">prd</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">apiPreFix</span><span class="token operator">:</span> ApiPrefix <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">dev</span><span class="token operator">:</span> <span class="token string">&#39;http://120.55.193.14:3030/&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token string">&#39;http://120.55.193.14:3030/&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">prd</span><span class="token operator">:</span> <span class="token string">&#39;http://120.55.193.14:3030/&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// request拦截器, 携带token,以及根据环境,配置不同的请求前缀</span>
request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> RequestOptionsInit</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 不携带token的请求数组</span>
  <span class="token keyword">let</span> <span class="token literal-property property">notCarryTokenArr</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>notCarryTokenArr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>apiPreFix<span class="token punctuation">[</span>CurrentEnvironment<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      options<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 给每个请求带上token</span>
  <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;tokens&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>apiPreFix<span class="token punctuation">[</span>CurrentEnvironment<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> <span class="token literal-property property">interceptors</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> headers <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@url</span> 请求的url
 * <span class="token keyword">@parameter</span> 上传的参数
 */</span>

<span class="token comment">// 封装的get,post.put,delete请求</span>
<span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">,</span> parameter<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> unknown<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> parameter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> deletes <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">,</span> parameter<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> unknown<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> parameter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">,</span> parameter<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> unknown<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> parameter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> put <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">,</span> parameter<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> unknown<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> parameter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  get<span class="token punctuation">,</span>
  post<span class="token punctuation">,</span>
  put<span class="token punctuation">,</span>
  deletes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里封装了umi-request,统一处理了接口错误,请求拦截器携带token等.最后在配合useRequest 非常的好用.</p><h2 id="设计思路" tabindex="-1"><a class="header-anchor" href="#设计思路" aria-hidden="true">#</a> 设计思路</h2><p>1、技术收敛 ⭐</p><p>我们希望开发者依赖 Umi 之后就无需关心 babel、webpack、postcss、react、react-router 等依赖，而依赖 @umijs/max 之后无需再关心开发中台项目的依赖和技术栈。</p><p>2、插件和插件集 ⭐</p><p>Umi 通过提供插件和插件集的机制来满足不同场景和业务的需求。插件是为了扩展一个功能，而插件集是为了扩展一类业务。比如要支持 vue，我们可以有 <code>@umijs/preset-vue</code>，包含 vue 相关的构建和运行时；比如要支持 h5 的应用类型，可以有 <code>@umijs/preset-h5</code>，把 h5 相关的功能集合到一起。</p><p>3、最佳实践</p><p>4、企业级</p><p>5、import all from umi ⭐</p><p>很多人可能都第一次听到。import all from umi 意思是所有 import 都来自 <code>umi</code>。比如 dva 不是 <code>import { connect } from &#39;dva&#39;</code>，而是 <code>import { connect } from &#39;umi&#39;</code>，从 umi 中导出。导出的方法不仅来自 umi 自身，还来自 umi 插件。</p><p>6、编译时框架</p><p>7、依赖预打包</p><p>8、默认快</p><p>9、约束与开放</p><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用API</h2>`,19),U={id:"umi-max-简介",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#umi-max-简介","aria-hidden":"true"},"#",-1),S={href:"https://umijs.org/docs/max/introduce",target:"_blank",rel:"noopener noreferrer"},R=n("blockquote",null,[n("p",null,[s("为了方便开发者更加方便的使用这些插件，在我们这些插件开源的基础上，直接将他们集成到一起，打造了 "),n("code",null,"@umijs/max"),s("。 让开发者直接可以通过脚手架马上获得和蚂蚁集团开发 Umi 应用一样的开发体检。")])],-1),q=n("p",null,"新建的项目默认安装以下插件, 可以按需开启：",-1),M={href:"https://umijs.org/docs/max/access",target:"_blank",rel:"noopener noreferrer"},V={href:"https://umijs.org/docs/max/analytics",target:"_blank",rel:"noopener noreferrer"},C={href:"https://umijs.org/docs/max/antd",target:"_blank",rel:"noopener noreferrer"},F={href:"https://umijs.org/docs/max/dva",target:"_blank",rel:"noopener noreferrer"},P={href:"https://umijs.org/docs/api/runtime-config#getinitialstate",target:"_blank",rel:"noopener noreferrer"},T={href:"https://umijs.org/docs/max/layout-menu",target:"_blank",rel:"noopener noreferrer"},A={href:"https://umijs.org/docs/max/locale",target:"_blank",rel:"noopener noreferrer"},I={href:"https://umijs.org/docs/max/data-flow",target:"_blank",rel:"noopener noreferrer"},E={href:"https://umijs.org/docs/max/micro-frontend",target:"_blank",rel:"noopener noreferrer"},B={href:"https://umijs.org/docs/max/request",target:"_blank",rel:"noopener noreferrer"},$={href:"https://umijs.org/docs/max/tailwindcss",target:"_blank",rel:"noopener noreferrer"},J=p('<h2 id="umijs-4更新内容" tabindex="-1"><a class="header-anchor" href="#umijs-4更新内容" aria-hidden="true">#</a> UmiJS 4更新内容</h2><p><strong>多构建引擎。</strong> Umi 4 同时支持 Vite 和 Webpack 两种构建方式，并尽量确保他们之间功能的一致性，让开发者可以通过一行配置进行切换。可能有些同学会喜欢 dev 用 vite，build 用 webpack 这样的组合。同时我们也在探索包括 ESMi 在内的其他构建方案的探索。</p><p><strong>默认快。</strong> 默认快是多维度的，我们通过 MFSU V3 + Webpack 5 缓存解 Dev 时编译慢的问题；内网还有通过 Webpack 5 物理缓存和 CD 平台结合解 Build 时编译慢的问题；有使用 esbuild 做 js 和 css 的压缩器、配置和 MOCK 文件的读取、jest 的 transformer，让除构建之外的其他环节也飞快；此外还有运行时速度也有考虑。</p><p><strong>MFSU V3。</strong> Umi 3 的 MFSU 大家可能多少有接触过，虽然有用，但 DX 不够好。用的时候会遇到一些坑，以至于很多同学都掌握了一项特殊技能，遇到问题时 rm -rf src/.umi。大家可能会遇到 monorepo 不支持、热更新导致 Tab 卡死、请求多导致页面打开慢、一些语法不支持的问题。以上问题在 MFSU V3 中全解！基于此，我们非常有信心地在 Umi 4 中默认开启 MFSU 功能。当然，如果你不喜欢，会保留手动配置 mfsu: false 关闭的口子。同时，MFSU V3 还可脱离 Umi 独立使用。</p><p><strong>Umi Max。</strong> 这是内部 Bigfish 框架的对外版本，解我们自己的问题，同时也给社区另一个集中化框架的选择，定位是中后台框架，包含了中后台相关的大量最佳实践的插件。如果有定制需求，大家可以参考他来实现内网框架的定制，比如快手团队就有基于 Umi 4 的框架定制，还有 Alita 也是基于 Umi 定制的面向移动端的框架。</p><p><strong>React Router 6。</strong> 我们升级了路由方案到 React Router 6，喜忧参半。好消息是，React Router 6 是 Remix 的基础库，面向框架层做了很多优化，路由实现层更优雅，Umi 得以删除大量路由渲染的代码；坏消息是，带来不少 Break Change，比如之前父路由渲染子路由用 children，得换成 。</p><p><strong>支持 Vue。</strong> Umi 4 中提供了 Vue 支持，记得我在 Umi 2 时画过一张架构图，其中就有 Vue 的一环，Umi 3 时也有过尝试，但那会 Vue 3 还不太成熟，接入时遇到不少坑，这个坑今天总算是补上了。此功能由社区同学操刀，只需装载一个 preset 即可切换到 Vue。</p><p><strong>默认最快的 CSR 请求。</strong> 项目构建快解的是 DX 问题，但同时也应该关注 UX。Client Loader 的目的是让应用加载默认快，避免 React 项目经典的 Render-Then-Fetch 的加载瀑布流问题。效果见下图，示例项目的从 9s 降到 6s，这 6s 还是之前截的图，上了 Preload 功能之后其实已更快。</p><p><strong>白盒文档的 Lint。</strong> Umi 4 里内置了我们精挑细选的 lint 规则，只有质量类不开可能会导致项目问题的规则，不包含风格类的规则，不包含 TypeScript 中 type-aware 类的规则，这类规则需要跑整个项目，会导致性能问题；同时，我们通过 @rushstack/eslint-pach 的方式锁定了 config 里找 plugin 的规则，确保规则是长期稳定的。</p>',9),L=n("strong",null,"SSR。",-1),N={href:"https://link.juejin.cn?target=https%3A%2F%2Ftest-vercel-chencheng.vercel.app%2F",target:"_blank",rel:"noopener noreferrer"},D=n("p",null,[n("strong",null,"Umi UI 卷土重来？"),s(" 日常排查问题时，很多 Umi 框架的内部状态是看不到的，比如插件启用情况、appData 元数据、修改过的最终配置、修改过的最终 webpack 配置、修改过的最终路由、MFSU 的 module graph 信息等。Umi 4 提供了 /__umi/ 路由，dev 阶段可用，效果见下图。定位是开发辅助，大家也可以理解为是「丐版 Umi UI」。")],-1),W=n("h2",{id:"额外的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#额外的","aria-hidden":"true"},"#"),s(" 额外的🐙")],-1),H=n("strong",null,"基于 React 的应用研发框架 icejs",-1),z={href:"https://ice.work/",target:"_blank",rel:"noopener noreferrer"},O=n("strong",null,"飞冰",-1);function X(G,K){const a=r("ExternalLinkIcon");return o(),c("div",null,[i,n("blockquote",null,[u,n("p",null,[n("a",k,[s("官方文档"),t(a)])]),n("p",null,[n("a",d,[s("Umi 4 发布啦 🎈"),t(a)])]),n("p",null,[n("a",m,[s("umi3教程"),t(a)])])]),v,b,h,n("p",null,[s("Umi 是蚂蚁集团的底层前端框架，已直接或间接地服务了 10000+ 应用，包括 Java、Node、H5 无线、离线（Hybrid）应用、纯前端 assets 应用、CMS 应用、Electron 应用、Serverless 应用等。他已经很好地服务了我们的内部用户，同时也服务了不少外部用户，包括淘系、飞猪、阿里云、字节、腾讯、口碑、美团等。在 2021 年字节的"),n("a",g,[s("调研报告"),t(a)]),s("中，Umi 是其中 25.33% 开发者的选择。")]),y,n("h3",_,[f,s(),n("a",w,[s("快速上手"),t(a)])]),x,n("h2",U,[j,s(),n("a",S,[s("Umi Max 简介"),t(a)])]),R,q,n("ul",null,[n("li",null,[n("a",M,[s("权限"),t(a)])]),n("li",null,[n("a",V,[s("站点统计"),t(a)])]),n("li",null,[n("a",C,[s("Antd"),t(a)])]),n("li",null,[n("a",F,[s("dva"),t(a)])]),n("li",null,[n("a",P,[s("initial-state"),t(a)])]),n("li",null,[n("a",T,[s("布局和菜单"),t(a)])]),n("li",null,[n("a",A,[s("多语言"),t(a)])]),n("li",null,[n("a",I,[s("model"),t(a)])]),n("li",null,[n("a",E,[s("乾坤微前端"),t(a)])]),n("li",null,[n("a",B,[s("请求库"),t(a)])]),n("li",null,[n("a",$,[s("tailwindCSS支持"),t(a)])])]),J,n("p",null,[L,s(" Umi 4 重写了 SSR 功能，目前此功能还在 beta 阶段，请勿将其用于生产环境。Umi 4 的 SSR 有以下特点，1）server 代码的构建基于 esbuild，所以极快，2）请求的处理类似 next.js 的 getServerSideProps 和 remix 的 loader，只在服务端跑，3）基于 react 18 的 suspense 和 renderToPipeableStream。实现原因，部署层目前仅实现了 vercel 的 adapter。这里有个简单的 Todos 示例："),n("a",N,[s("test-vercel-chencheng.vercel.app/"),t(a)])]),D,W,n("p",null,[H,s(),n("a",z,[O,t(a)])])])}const Z=e(l,[["render",X],["__file","UmiJS 乌米学习实战.html.vue"]]);export{Z as default};
