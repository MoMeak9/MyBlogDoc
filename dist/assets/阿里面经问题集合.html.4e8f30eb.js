import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as p,a as n,b as e,d as t,e as r,r as l}from"./app.d7b34baa.js";const c={},i=n("h1",{id:"阿里面经问题集合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#阿里面经问题集合","aria-hidden":"true"},"#"),e(" 阿里面经问题集合")],-1),u=n("blockquote",null,[n("p",null,"收入一些不太会的")],-1),d=n("h2",{id:"阿里巴巴icbu",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#阿里巴巴icbu","aria-hidden":"true"},"#"),e(" 阿里巴巴ICBU")],-1),_=r(`<li><p>webpack怎么提高构建速度？</p><p>减少 resolve 的解析</p><p>把 loader 应用的文件范围缩小，例如 node_modules 目录下的其他依赖类库文件，基本就是直接编译好可用的代码，无须再经过 loader 处理了</p><p>利用缓存提升构建速度，利用缓存提升构建速度</p></li><li><p>外部扩展(externals) 排除啥？</p><p>就是webpack可以不处理应用的某些依赖库，使用externals配置后，依旧可以在代码中通过CMD、AMD或者window/global全局的方式访问。</p><p>有时我们希望我们通过script引入的库，如用CDN的方式引入的jquery，我们在使用时，依旧用require的方式来使用，但是却不希望webpack将它又编译进文件中。</p></li><li><p>Person是<strong>构造</strong>函数**, Person.<strong>prototype</strong> 是<strong>原型对象（提供共有方法）</strong>, person<strong>是实例</strong>, 实例可以通过_proto_找到原型对象。</p></li><li><p>每个对象都有_<em>proto</em>_ ( <strong>除了</strong> var obj = Object.create(null) )</p><p>每个函数对象都有 prototype。这个属性用于实现“实例化”（函数对象也是对象所以也有_<em>proto</em>_，即 Func._<em>proto</em>_ = Function.prototype）</p><p>函数对象的 prototype 所指向的也是对象，所以也有 __proto__，即 Func**.prototype._<em>proto</em>_**。这个属性用于实现“继承”</p></li><li><p>const a = 2</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">.</span>__proto__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>instanceof 手写</p><p><strong>关键点:</strong> 构造函数Fn的<code>prototype</code>，实例对象的原型链。</p><p>所以只要<strong>遍历实例对象的原型链</strong>，挨个往上查找看是否有与Fn的<code>prototype</code>相等的原型，直到最顶层<code>Object</code>还找不到，那么就返回false。</p></li>`,6),m=n("p",null,"可枚举对象有什么",-1),h=n("li",null,[e("其中js中"),n("strong",null,"基本包装类型的原型属性"),e("是不可枚举的，如Object, Array, Number等。")],-1),k={href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in",target:"_blank",rel:"noopener noreferrer"},g={href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,[e("Object.keys()"),n("strong",null,"方法返回一个"),e("可枚举属性的数组")],-1);function f(v,y){const o=l("ExternalLinkIcon");return a(),p("div",null,[i,u,d,n("ol",null,[_,n("li",null,[m,n("ul",null,[h,n("li",null,[e("可枚举的属性可以通过"),n("a",k,[e("for...in"),t(o)]),e("循环进行遍历（"),n("strong",null,[e("除非该属性名是一个"),n("a",g,[e("Symbol"),t(o)])]),e("），或者通过"),b,e("。")])])])])])}const S=s(c,[["render",f],["__file","阿里面经问题集合.html.vue"]]);export{S as default};
