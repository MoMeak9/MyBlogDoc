import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.d7b34baa.js";const p={},e=t(`<h1 id="容器内选择单一列表并进行高亮切换的实践" tabindex="-1"><a class="header-anchor" href="#容器内选择单一列表并进行高亮切换的实践" aria-hidden="true">#</a> 容器内选择单一列表并进行高亮切换的实践</h1><p>基于React和antd技术栈下，对有限容器内列表选择的行进行高亮提示，并且不影响容器内部进行的滚动查看引发的思考，涉及的内容包括overflow熟悉，CSS 类名替换而不是改写style、React Element的复用和性能优化。</p><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><h3 id="overflow" tabindex="-1"><a class="header-anchor" href="#overflow" aria-hidden="true">#</a> overflow</h3><p>overflow 是overflow-x 和overflow-y的简写，用来设定当一块级元素（通常设置了height/max-height）的内容太大而超出范围的时候，元素内容如何加载。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>overflow：属性值；
<span class="token property">overflow</span><span class="token punctuation">:</span> [overflow-x] [overflow-y]<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只设定一个值的话，则同时对x和y轴生效，当其中一方被设置了auto的话，visible的表现也会是auto</p><h3 id="其他用途" tabindex="-1"><a class="header-anchor" href="#其他用途" aria-hidden="true">#</a> 其他用途</h3><ul><li><p>text-overflow 与 overflow 配合用于文字省略</p><blockquote><p>超出文字隐藏：overflow：hidden; 文字不换行：text-wrap:nowrap;</p></blockquote></li><li><p>overflow: hidden 清除浮动</p></li><li><p>overflow: hidden 解决外边距折叠问题（触发BFC）</p></li></ul><h2 id="分析实践" tabindex="-1"><a class="header-anchor" href="#分析实践" aria-hidden="true">#</a> 分析实践</h2><p>CSS 类名替换而不是改写style</p><p>并不适用于虚拟列表</p><h3 id="demo-演示" tabindex="-1"><a class="header-anchor" href="#demo-演示" aria-hidden="true">#</a> demo 演示</h3><p>设置容器、列表样式以及选中行的样式：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.main</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50vw<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.list</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.active</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// App.jsx</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>useState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./App.css&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>List<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;antd&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;Racing car sprays burning fuel into crowd.&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Japanese princess to wed commoner.&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Australian walks 100km after outback crash.&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Man charged over missing wedding girl.&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Los Angeles battles huge wildfires.&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>activeIndex<span class="token punctuation">,</span> setActiveIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span>
                    <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>small<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">bordered</span>
                    <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span>
                    <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List.Item</span></span>
                            <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index <span class="token operator">===</span> activeIndex <span class="token operator">?</span> <span class="token string">&quot;active&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span></span>
                            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                                <span class="token function">setActiveIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
                            <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">List.Item</span></span><span class="token punctuation">&gt;</span></span>
                    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
                <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显示效果" tabindex="-1"><a class="header-anchor" href="#显示效果" aria-hidden="true">#</a> 显示效果</h3><p>通过设置外部容器固定宽高，overflow: auto已经生效，生成滚动条</p><p><img src="https://cdn.yihuiblog.top/images/202208180948011.png" alt="image-20220818094857915"></p><p>外部内容被隐藏遮住</p><p><img src="https://cdn.yihuiblog.top/images/202208181006727.png" alt="image-20220818100627657"></p><p>当点击的时候，改变的是仅受影响的两行的类名</p><p><img src="https://cdn.yihuiblog.top/images/202208180950439.png" alt="image-20220818095042385"></p><p><img src="https://cdn.yihuiblog.top/images/202208180950376.png" alt="image-20220818095006325"></p><p>此修改方法通过只修改类名而不是style属性，更有利于后期维护和修改选中的样式，我们只需对<code>.active</code>进行修改即可。如果是写成style形式，就很冗余了，也不好扩展。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> style<span class="token operator">=</span><span class="token punctuation">{</span>index <span class="token operator">===</span> activeIndex <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;#f5f5f5&#39;</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="思考问题" tabindex="-1"><a class="header-anchor" href="#思考问题" aria-hidden="true">#</a> 思考问题</h2><p>数据量大了怎么办？目前修改相当于整个App都被重新执行了渲染，行数多了有明显卡顿，甚至没有反应，而且生成的时候这行相当于进行多了次比较：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>className<span class="token operator">=</span><span class="token punctuation">{</span>activeIndex <span class="token operator">===</span> index <span class="token operator">?</span> <span class="token string">&quot;active&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Mark一下，待思考解决办法：</p><h3 id="只对选中行进行重绘" tabindex="-1"><a class="header-anchor" href="#只对选中行进行重绘" aria-hidden="true">#</a> 只对选中行进行重绘</h3><p>通过标记之前选中的节点，在下次选中的时候进行重写className</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">let</span> preClickElement <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>currentTarget
        target<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;ant-list-item active&#39;</span><span class="token punctuation">;</span>
        preClickElement <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>preClickElement<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;ant-list-item&#39;</span><span class="token punctuation">)</span>
        preClickElement <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>demo</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>List<span class="token punctuation">.</span>Item
            key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>
            onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如果用虚拟列表的话-如何实现这个效果" tabindex="-1"><a class="header-anchor" href="#如果用虚拟列表的话-如何实现这个效果" aria-hidden="true">#</a> 如果用虚拟列表的话，如何实现这个效果？</h3><p>Mark，重写一个虚拟列表demo后尝试</p>`,37),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","容器内选择单一列表并进行高亮切换的实践.html.vue"]]);export{d as default};
