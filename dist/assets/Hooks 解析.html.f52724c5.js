import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as a,e as c}from"./app.d7b34baa.js";const d={},h=c('<h1 id="hooks-解析" tabindex="-1"><a class="header-anchor" href="#hooks-解析" aria-hidden="true">#</a> Hooks 解析</h1><h2 id="hooks-理念" tabindex="-1"><a class="header-anchor" href="#hooks-理念" aria-hidden="true">#</a> Hooks 理念</h2><p>Component 是 React 的原子，Hooks接近于原子内电子的概念。相比于<code>ClassComponent</code>的更上层抽象，<code>Hooks</code>则更贴近<code>React</code>内部运行的各种概念（<code>state</code> | <code>context</code> | <code>life-cycle</code>）。</p><p>当我们熟练运用<code>Hooks</code>时，就会发现，这两者的概念（与生命周期）有很多割裂感，并不是同一抽象层次可以互相替代的概念。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><h2 id="常见hooks解析" tabindex="-1"><a class="header-anchor" href="#常见hooks解析" aria-hidden="true">#</a> 常见Hooks解析</h2>',7),s=[h];function r(t,n){return o(),a("div",null,s)}const l=e(d,[["render",r],["__file","Hooks 解析.html.vue"]]);export{l as default};
