import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c,a as t,b as e,d as o,e as a,r as d}from"./app.d7b34baa.js";const r={},i=a('<h1 id="js中-与-的区别" tabindex="-1"><a class="header-anchor" href="#js中-与-的区别" aria-hidden="true">#</a> js中<code>==</code>与<code>===</code>的区别</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><h3 id="起因" tabindex="-1"><a class="header-anchor" href="#起因" aria-hidden="true">#</a> 起因</h3><p>当开始使用WebStorm进行编程的时候，原本不会报错的<code>==``（也是因为过去写java不太在意），突然，满屏黄色波浪线，得换成 </code>===` 才行，开始发掘是怎么回事......</p><h3 id="javascript-中的相等性判断" tabindex="-1"><a class="header-anchor" href="#javascript-中的相等性判断" aria-hidden="true">#</a> JavaScript 中的相等性判断</h3><p><strong>ES2015</strong>中有四种相等算法：</p><ul><li>抽象（非严格）相等比较 (<code>==</code>)</li><li>严格相等比较 (<code>===</code>): 用于 <code>Array.prototype.indexOf</code>, <code>Array.prototype.lastIndexOf</code>, 和 <code>case</code>-matching</li><li>同值零: 用于 <code>%TypedArray%</code> 和 <code>ArrayBuffer </code>构造函数、以及<code>Map</code>和<code>Set</code>操作, 并将用于 ES2016/ES7 中的<code>String.prototype.includes</code></li><li>同值: 用于所有其他地方</li></ul><p>JavaScript提供三种不同的值比较操作：</p>',8),u={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity",target:"_blank",rel:"noopener noreferrer"},p={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality",target:"_blank",rel:"noopener noreferrer"},y=t("li",null,[e("以及 "),t("code",null,"Object.is"),e("（ECMAScript 2015/ ES6 新特性）")],-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness",target:"_blank",rel:"noopener noreferrer"},x=a(`<h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h3 id="js-中-和-的区别" tabindex="-1"><a class="header-anchor" href="#js-中-和-的区别" aria-hidden="true">#</a> js 中 == 和 === 的区别</h3><blockquote><p><code>===</code> 严格相等，会比较两个值的类型和值 <code>==</code> 抽象相等，比较时，会先进行类型转换，然后再比较值</p></blockquote><h4 id="举个栗子" tabindex="-1"><a class="header-anchor" href="#举个栗子" aria-hidden="true">#</a> 举个栗子</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，发生什么事了！？？除了 <code>null==false</code>是false外，其他的都是true?但是 <code>!null==true</code>却是true?这是为啥？</p><h3 id="strict-equality-comparison-严格相等" tabindex="-1"><a class="header-anchor" href="#strict-equality-comparison-严格相等" aria-hidden="true">#</a> Strict Equality Comparison === 严格相等</h3><blockquote><p>The comparison x === y, where x and y are values, produces true or false. Such a comparison is performed as follows:</p><ol><li>If Type(x) is different from Type(y), return false.</li><li>If Type(x) is Number, then <ul><li>a. If x is NaN, return false.</li><li>b. If y is NaN, return false.</li><li>c. If x is the same Number value as y, return true.</li><li>d. If x is <code>+0</code> and y is <code>‐0</code>,return true.</li><li>e. If x is ‐0 and y is +0, return true.</li><li>f. Return false.</li></ul></li><li>Return SameValueNonNumber(x, y). <strong>NOTE</strong> This algorithm differs from the SameValue Algorithm in its treatment of signed zeroes and NaNs.</li></ol></blockquote><p><strong>译文：</strong></p><ul><li>如果Type(x)和Type(y)不同，返回false</li><li>如果Type(x)和Type(y)相同 <ul><li>如果Type(x)是Undefined，返回true</li><li>如果Type(x)是Null，返回true</li><li>如果Type(x)是String，当且仅当x,y字符序列完全相同（长度相同，每个位置上的字符也相同）时返回true，否则返回false</li><li>如果Type(x)是Boolean，如果x,y都是true或x,y都是false返回true，否则返回false</li><li>如果Type(x)是Symbol，如果x,y是相同的Symbol值，返回true,否则返回false</li><li>如果Type(x)是Number类型 <ul><li>如果x是NaN，返回false</li><li>如果y是NaN，返回false</li><li>如果x的数字值和y相等，返回true</li><li>如果x是+0，y是-0，返回true</li><li>如果x是-0，y是+0，返回true</li><li>其他返回false</li></ul></li></ul></li></ul><h3 id="abstract-equality-comparison-非严格相等" tabindex="-1"><a class="header-anchor" href="#abstract-equality-comparison-非严格相等" aria-hidden="true">#</a> Abstract Equality Comparison 非严格相等 ==</h3><blockquote><p>The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:</p><ol><li>If Type(x) is the same as Type(y), then a. Return the result of performing Strict Equality Comparison x === y.</li><li>If x is null and y is undefined, return true.</li><li>If x is undefined and y is null, return true.</li><li>If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y).</li><li>If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.</li><li>If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.</li><li>If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).</li><li>If Type(x) is either String, Number, or Symbol and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).</li><li>If Type(x) is Object and Type(y) is either String, Number, or Symbol, return the result of the comparison ToPrimitive(x)== y.</li><li>Return false.</li></ol></blockquote><p><strong>译文：</strong></p><ul><li>如果Type(x)和Type(y)相同，返回x===y的结果</li><li>如果Type(x)和Type(y)不同 <ul><li>如果x是null，y是undefined，返回true</li><li>如果x是undefined，y是null，返回true</li><li>如果Type(x)是Number，Type(y)是String，返回 x==ToNumber(y) 的结果</li><li>如果Type(x)是String，Type(y)是Number，返回 ToNumber(x)==y 的结果</li><li>如果Type(x)是Boolean，返回 ToNumber(x)==y 的结果</li><li>如果Type(y)是Boolean，返回 x==ToNumber(y) 的结果</li><li>如果Type(x)是String或Number或Symbol中的一种并且Type(y)是Object，返回 x==ToPrimitive(y) 的结果</li><li>如果Type(x)是Object并且Type(y)是String或Number或Symbol中的一种，返回 ToPrimitive(x)==y 的结果</li><li>其他返回false</li></ul></li></ul><p>其中涉及到几个es定义的抽象操作：</p><ul><li>Type(x) : 获取x的类型</li><li>ToNumber(x) : 将x转换为Number类型</li><li>ToBoolean(x) : 将x转换为Boolean类型</li><li>ToString(x) : 将x转换为String类型</li><li>SameValueNonNumber(x,y) : 计算非数字类型x,y是否相同</li><li>ToPrimitive(x) : 将x转换为原始值</li></ul><h4 id="samevaluenonnumber-x-y-方法" tabindex="-1"><a class="header-anchor" href="#samevaluenonnumber-x-y-方法" aria-hidden="true">#</a> SameValueNonNumber(x,y) 方法</h4>`,17),f={href:"http://www.ecma-international.org/ecma-262/#sec-samevaluenonnumber",target:"_blank",rel:"noopener noreferrer"},h=t("strong",null,"true",-1),m=t("strong",null,"false",-1),b=a('<h5 id="主要规则" tabindex="-1"><a class="header-anchor" href="#主要规则" aria-hidden="true">#</a> 主要规则</h5><ol><li>断言：x 不是 Number 类型。</li><li>断言：x 和 y 是 相同类型。</li><li>如果 x 是 Undefined 类型，返回 <strong>true</strong> 。</li><li>如果 x 是 Null 类型，返回 <strong>true</strong> 。</li><li>如果 x 是 String 类型： <ul><li>如果 x 和 y 长度相同且相应编码单元相同，返回 <strong>true</strong> 。</li><li>否则返回 <strong>false</strong> 。</li></ul></li><li>如果 x 是 Boolean 类型： <ul><li>如果 x 和 y 都是true 或者 都是false，返回 <strong>true</strong> 。</li><li>否则返回 <strong>false</strong> 。</li></ul></li><li>如果 x 是 Symbol 类型： <ul><li>如果 x 和 y 都是相同 Symbol 值，返回 <strong>true</strong> 。</li><li>否则返回 <strong>false</strong> 。</li></ul></li><li>如果 x 和 y 指向同一对象，返回 <strong>true</strong> 。否则返回 <strong>false</strong> 。</li></ol><h5 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h5><p><strong>相同类型比较规则（除Number类型）</strong></p><ol><li>都是 undefined，<strong>相等</strong>。</li><li>都是 null，<strong>相等</strong>。</li><li>String 类型中，都是相同字符串，<strong>相等</strong>。</li><li>Boolean 类型中，都是 true 或者 都是 false，<strong>相等</strong>。</li><li>Symbol 类型中，都是相同 Symbol 值，<strong>相等</strong>。</li><li>Object 类型中，引用同一对象，<strong>相等</strong>。</li></ol><h5 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h5><p>哪些 JavaScript 公开方法采用了 SameValueNonNumber 比较呢？**</p><ol><li>公开方法木有</li><li>接着看下去你就会知道，撇开数值类型比较，<code>SameValueNonNumber</code> 是 <code>SameValue</code>、<code>SameValueZero</code>、 <code>===</code> 的公共方法。</li></ol><h4 id="关于-0、-0、0-的疑惑" tabindex="-1"><a class="header-anchor" href="#关于-0、-0、0-的疑惑" aria-hidden="true">#</a> 关于-0、+0、0 的疑惑</h4><p><strong>明明日常没什么卵用，为什么会有±0？</strong></p><ul><li>其实遵从<code>IEEE754</code>标准的编程语言都有±0的概念，<code>IEEE754</code>标准的64位浮点数，是以<code>1+11+53</code>形式的<code>符号位+阶数位+尾数位</code>表示。</li><li>符号位、阶数位、尾数位都是0，那便是<code>+0</code>，也就是常规的数字<code>0</code>。</li><li>符号位为1，阶数位、尾数位都是0，那便是 <code>-0</code>。</li><li><code>IEEE754</code>还规定了<code>NaN</code>、<code>无穷</code>及其它的相应规范，有兴趣可自行查找相关资料。</li></ul><h4 id="toprimitive-方法" tabindex="-1"><a class="header-anchor" href="#toprimitive-方法" aria-hidden="true">#</a> ToPrimitive 方法</h4>',12),k={href:"http://www.ecma-international.org/ecma-262/#sec-toprimitive",target:"_blank",rel:"noopener noreferrer"},N=t("strong",null,"引用数据类型",-1),S=t("strong",null,"基本数据类型",-1),T=a('<ul><li>根据内部标记 <code>hint</code> 的不同有不同的调用顺序。</li><li><code>hint</code>有三种：<strong>default</strong>、<strong>number</strong>、<strong>string</strong>。<strong>default</strong> 默认遵照 <strong>number</strong> 规则。</li><li><strong>default/number</strong>：先 valueOf，后 toString。一般转化规则皆如此。</li><li><strong>string</strong>：先 toString，后 valueOf。如Date对象方法、String()转化等。</li><li>如果 toString/valueOf 中某一方法返回类型不为对象类型，则直接返回该值，不会继续调用后面方法。如果两者都返回对象类型，会抛 TypeError 错误。</li></ul><h3 id="理解相等比较的模型" tabindex="-1"><a class="header-anchor" href="#理解相等比较的模型" aria-hidden="true">#</a> 理解相等比较的模型</h3><p>在 ES2015 以前，你可能会说双等和三等是“扩展”的关系。比如有人会说双等是三等的扩展版，因为他处理三等所做的，还做了类型转换。例如 6 == &quot;6&quot; 。反之另一些人可能会说三等是双等的扩展，因为他还要求两个参数的类型相同，所以增加了更多的限制。怎样理解取决于你怎样看待这个问题。</p><p><strong>希望下表可以帮到你：</strong></p><table><thead><tr><th style="text-align:center;">x</th><th style="text-align:center;">y</th><th style="text-align:center;"><code>==</code></th><th style="text-align:center;"><code>===</code></th><th style="text-align:center;"><code>Object.is</code></th></tr></thead><tbody><tr><td style="text-align:center;"><code>undefined</code></td><td style="text-align:center;"><code>undefined</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td></tr><tr><td style="text-align:center;"><code>null</code></td><td style="text-align:center;"><code>null</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td></tr><tr><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td></tr><tr><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td></tr><tr><td style="text-align:center;"><code>&quot;foo&quot;</code></td><td style="text-align:center;"><code>&quot;foo&quot;</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td></tr><tr><td style="text-align:center;"><code>0</code></td><td style="text-align:center;"><code>0</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td></tr><tr><td style="text-align:center;"><code>+0</code></td><td style="text-align:center;"><code>-0</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>0</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>&quot;&quot;</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>&quot;&quot;</code></td><td style="text-align:center;"><code>0</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>&quot;0&quot;</code></td><td style="text-align:center;"><code>0</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>&quot;17&quot;</code></td><td style="text-align:center;"><code>17</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>[1,2]</code></td><td style="text-align:center;"><code>&quot;1,2&quot;</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>new String(&quot;foo&quot;)</code></td><td style="text-align:center;"><code>&quot;foo&quot;</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>null</code></td><td style="text-align:center;"><code>undefined</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>null</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>undefined</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>{ foo: &quot;bar&quot; }</code></td><td style="text-align:center;"><code>{ foo: &quot;bar&quot; }</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>new String(&quot;foo&quot;)</code></td><td style="text-align:center;"><code>new String(&quot;foo&quot;)</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>0</code></td><td style="text-align:center;"><code>null</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>0</code></td><td style="text-align:center;"><code>NaN</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>&quot;foo&quot;</code></td><td style="text-align:center;"><code>NaN</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>NaN</code></td><td style="text-align:center;"><code>NaN</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>true</code></td></tr></tbody></table><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li><p><code>SameValueZero</code>、<code>SameValue</code>、<code>===</code>这仨完全差不多</p><ul><li>相同点： <ul><li>不同类型即不相等。</li><li>相同类型遵从<code>SameValueNonNumber</code>规则。</li></ul></li><li>不同点：对<code>±0</code>、<code>NaN</code> 的判断上各有不同。</li></ul></li><li><p>以 <strong>Array.prototype.includes</strong> 为代表的<code>SameValueZero</code></p><ul><li>±0 <strong>相等</strong></li><li>NaN 和 NaN <strong>相等</strong></li></ul></li><li><p>以 <strong>Object.is</strong> 为代表的<code>SameValue</code></p><ul><li>±0 <strong>不相等</strong></li><li>NaN 和 NaN <strong>相等</strong></li></ul></li><li><p>以 <strong>===</strong>、<strong>Array.prototype.indexOf</strong> 为代表的<code>===</code></p><ul><li>±0 <strong>相等</strong></li><li>NaN 和 NaN <strong>不相等</strong></li></ul></li><li><p>==</p><ul><li>相同类型采用<code>===</code>严格比较。</li><li>不同类型会隐式转换： <ul><li>基本数据类型转换为 Number 类型再 == 比较。</li><li>引用数据类型执行 ToPrimitive 转换后再 == 比较。</li><li>undefined/null 特例。</li></ul></li></ul></li></ol>',7);function v(_,q){const n=d("ExternalLinkIcon");return l(),c("div",null,[i,t("ul",null,[t("li",null,[e('严格相等比较 (也被称作"strict equality", "identity", "triple equals")，使用 '),t("a",u,[e("==="),o(n)]),e(" ,")]),t("li",null,[e('抽象相等比较 ("loose equality"，"double equals") ，使用 '),t("a",p,[e("=="),o(n)])]),y]),t("p",null,[e("本文就js 中 == 和 === 的区别做详细讨论，更多介绍"),t("a",g,[e("JavaScript 中的相等性判断"),o(n)])]),x,t("p",null,[t("a",f,[e("SameValueNonNumber"),o(n)]),e(" 方法接收两个参数 x 和 y ，其中 x 和 y 都不是 Number 类型，该方法返回 "),h,e(" 或 "),m,e("。")]),b,t("p",null,[t("a",k,[e("传送门"),o(n)]),e("。内部方法，主要功能是将"),N,e("转化为"),S,e("。")]),T])}const I=s(r,[["render",v],["__file","js中==与===的区别.html.vue"]]);export{I as default};
