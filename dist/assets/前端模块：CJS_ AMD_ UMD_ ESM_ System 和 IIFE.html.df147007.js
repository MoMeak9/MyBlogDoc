import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c,a as e,b as s,d as t,e as o,r as i}from"./app.d7b34baa.js";const d={},l=o('<h1 id="前端模块-cjs-amd-umd-esm-system-和-iife" tabindex="-1"><a class="header-anchor" href="#前端模块-cjs-amd-umd-esm-system-和-iife" aria-hidden="true">#</a> 前端模块：CJS, AMD, UMD, ESM, System 和 IIFE</h1><p>现代 Javascript 项目需要用打包工具来将小段代码编译成库或者应用程序那种更大更复杂的东西。流行的打包器有webpack、Rollup、Parcel、RequireJS 和 Browserify。它们将 JavaScript 代码转换为可以作为一个 bundle 加载的模块。</p><p><strong>一般来说，常见的模块类型有：</strong></p><ul><li>CJS(CommonJS) — 适用于 Node 和其他打包工具</li><li>AMD(Asynchronous Module Definition，异步模块化定义) — 与 RequireJS 等模块加载工具一起使用。</li><li>UMD(Universal Module Definition，通用模块化定义) — amd，cjs 和 iife 包含在一个文件中。</li><li>ES— 将 bundle 保存为 ES 模块文件。适用于其他打包工具，在现代浏览器中用&lt;script type=module&gt; 标签引入（别名：ems, module）。 system — SystemJS 加载器的原生格式 （别名：systemjs）。</li><li>IIFF— &lt;script&gt; 标签引入的自执行函数。如果你想为你的应用创建一个包，你需要用到的可能就是这种。</li></ul>',4),p={id:"commonjs-cjs",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#commonjs-cjs","aria-hidden":"true"},"#",-1),_={href:"https://en.wikipedia.org/wiki/CommonJS",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,[s("CJS 适用于浏览器之外的 Node 和其他生态系统。它在服务端被广泛使用。CJS 可以通过使用 "),e("code",null,"require()"),s(" 函数和 "),e("code",null,"module.exports"),s(" 来识别。"),e("code",null,"require()"),s(" 是一个可用于从另一个模块导入 symbols 到当前作用域的函数。 "),e("code",null,"module.exports"),s(" 是当前模块在另一个模块中引入时返回的对象。")],-1),m=e("p",null,"CJS 模块的设计考虑到了服务器开发。这个 API 天生是同步的。换言之，在源文件中按 require 的顺序瞬时加载模块。 由于 CJS 是同步的且不能被浏览器识别，CJS 模块不能在浏览器端使用，除非它被转译器打包。",-1),S={id:"异步模块定义-amd",tabindex:"-1"},f=e("a",{class:"header-anchor",href:"#异步模块定义-amd","aria-hidden":"true"},"#",-1),k={href:"https://en.wikipedia.org/wiki/Asynchronous_module_definition",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"AMD脱胎于 CJS，支持异步模块加载。AMD 和 CJS 的主要区别在于它是否支持异步模块加载。RequireJS 使用 AMD 在浏览器端工作。",-1),b=e("blockquote",null,[e("p",null,[s("AMD 提供了一些 CJS 相似的特性。它允许在代码中使用类似的 "),e("code",null,"exports"),s(" 和 "),e("code",null,"require()"),s(" 接口，尽管它自己的 "),e("code",null,"define()"),s(" 接口更基础更受欢迎。")])],-1),J={id:"通用模块定义-umd",tabindex:"-1"},M=e("a",{class:"header-anchor",href:"#通用模块定义-umd","aria-hidden":"true"},"#",-1),v={href:"https://github.com/umdjs/umd",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"UMD 被设计用于任何地方 — 包括服务端和浏览器端。它试图兼容目前最流行的 script 加载器（如 RequireJS）。在许多情况下，它使用 AMD 作为基础，且兼容 CJS。然而兼容增加了一些复杂度，使得读写变得更加困难。",-1),j={id:"ecmascript-modules-esm",tabindex:"-1"},x=e("a",{class:"header-anchor",href:"#ecmascript-modules-esm","aria-hidden":"true"},"#",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},D=o(`<p>静态 <code>import</code> 指令可用于将模块引入当前作用域。与 <code>require</code> 和 <code>define</code> 不同，这个指令只能放在文件的顶部。动态 <code>import()</code> 目前处于 TC39 流程的第4阶段（项目中所见的由打包工具支持，如Webpack的同态module，但存在额外消耗）。</p><p>通常的 ESM 格式的文件无法直接在浏览器上通过默认脚本标签运行，报错：</p><p><code>Uncaught SyntaxError: Unexpected token &#39;export&#39;</code></p><p>可以通过设置 <code>script</code> 标签的 <code>type</code> 为 <code>module</code> 来修复：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span>”module” src<span class="token operator">=</span>”dist<span class="token operator">/</span>bundle<span class="token punctuation">.</span>js”<span class="token operator">&gt;</span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),E=e("code",null,".mjs",-1),A={href:"https://v8.dev/features/modules#mjs",target:"_blank",rel:"noopener noreferrer"},I=e("code",null,".js",-1),q=e("code",null,".mjs",-1),w={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},U={id:"系统模块-systemjs",tabindex:"-1"},F=e("a",{class:"header-anchor",href:"#系统模块-systemjs","aria-hidden":"true"},"#",-1),N={href:"https://github.com/systemjs/systemjs",target:"_blank",rel:"noopener noreferrer"},R=o(`<p>SystemJs 是一个通用的模块<strong>加载器</strong>，支持 CJS，AMD 和 ESM 模块。Rollup 可以将代码打包成 SystemJS 的原生格式。</p><p>在使用时需要在 <code>index.html</code> 中引入 <code>system.js</code></p><h2 id="立即执行的函数表达式-iife-模块" tabindex="-1"><a class="header-anchor" href="#立即执行的函数表达式-iife-模块" aria-hidden="true">#</a> 立即执行的函数表达式（IIFE）模块</h2><p>正如模块名所示，IIFE 是一个适合用 <code>&lt;script&gt;</code> 标签引入的自执行函数。我们可以用这种格式为应用创建一个包。它帮助我们将内容放到命名空间中，避免变量冲突并使代码私有。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是第二个立即执行函数&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码可以在浏览器中运行，也是较为常见的Javascript SDK 引入方式</p>`,6),V=e("p",null,[e("strong",null,"参照整理：")],-1),B={href:"https://betterprogramming.pub/what-are-cjs-amd-umd-esm-system-and-iife-3633a112db62",target:"_blank",rel:"noopener noreferrer"};function T(W,z){const n=i("ExternalLinkIcon");return r(),c("div",null,[l,e("h2",p,[u,s(" CommonJS"),e("a",_,[s("（CJS）"),t(n)])]),h,m,e("h2",S,[f,s(" 异步模块定义"),e("a",k,[s("（AMD）"),t(n)])]),g,b,e("h2",J,[M,s(" 通用模块定义"),e("a",v,[s("（UMD）"),t(n)])]),y,e("h2",j,[x,s(" ECMAScript modules"),e("a",C,[s("（ESM）"),t(n)])]),D,e("p",null,[s("此外，关于"),E,s("扩展名，"),e("a",A,[s("V8 推荐了这样的做法"),t(n)]),s("，但是官方持以推荐继续使用"),I,s(" 扩展名的态度。其中一些工具不支持 "),q,s("，比如 "),e("a",w,[s("TypeScript"),t(n)]),s("。")]),e("h2",U,[F,s(" 系统模块 "),e("a",N,[s("SystemJS"),t(n)])]),R,e("blockquote",null,[V,e("p",null,[e("a",B,[s("What Are CJS, AMD, UMD, ESM, System, and IIFE?"),t(n)])])])])}const G=a(d,[["render",T],["__file","前端模块：CJS, AMD, UMD, ESM, System 和 IIFE.html.vue"]]);export{G as default};
